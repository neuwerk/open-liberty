<?xml version="1.0"?>
<!DOCTYPE project [        
        <!ENTITY instance SYSTEM "instance.xml">
        <!ENTITY properties SYSTEM "src/xmls/properties.xml">
        <!ENTITY targets SYSTEM "src/xmls/targets.xml">
        <!ENTITY path_refs SYSTEM "src/xmls/path_refs.xml">
        <!ENTITY taskdefs SYSTEM "src/xmls/taskdefs.xml">
]>

<!--
    1.18.1.15, 7/10/12

   Description:  This is the main Ant build file that hopefully hides some
                 of the complexity of the ws/code/webservices/fvt/src/build.xml
                 file from users.  The intent of this file is to just offer
                 targets for the specific tasks that would be necessary for
                 the tests (ex. compile, fvt, install, uninstall).

   Change History:
   Date        UserId         Feature/Defect          Description
   03/11/2003  ulbricht       160678                  Add report target
   03/14/2003  rsitze         160767                  Add exec target
   03/18/2003  ulbricht       161249                  Add ftpReport target
   06/30/2003  ulbricht       170881                  Add install/uninstall targets
   08/15/2003  ulbricht       174374                  Need to get properties from instance.xml
   08/20/2003  ulbricht       174754                  Using too much memory
   04/19/2004  ulbricht       199296                  Add target to get built tests
   11/11/2004  ulbricht       243972                  Change path name from SERV1 to FVT
   11/19/2004  ulbricht       244607                  Rename path name
   02/22/2005  ulbricht       257111                  Use start/stop server from targets file
   02/23/2005  ulbricht       257389                  Allow for running with smaller classpath
   10/11/2005  ulbricht       311801                  Remove execThinClient target
   12/05/2005  ulbricht       328481                  Add set up server target
   03/10/2006  ulbricht       308793.1                Add change host and port
   04/21/2006  ulbricht       364680                  Add wsengine package to deletes
   05/18/2006  ulbricht       368616                  Change for WSFP
   08/02/2006  smithd         381622                  Add ND support
   10/05/2006  btiffany       LIDB3296.31.01          Remove all class files on clean
   10/08/2006  ulbricht       394375                  Call execBase instead of execAll
   01/12/2007  jramos         413702                  Remove fvtND; Add hotInstall
   01/21/2007  jramos         415986                  Have clean delete fvt.log, startApps.log, and timeRestart.log
   01/22/2007  jramos         416124                  Delete log file explicitly
   01/23/2007  jramos         416853                  Call setHotInstall in hotInstall target
   04/02/2007  ulbricht       430026                  Copy WS-Security xml log files
   05/22/2007  jramos         440922                  Change for Pyxis
   10/13/2007  ulbricht       472023                  Update for iSeries platform
   02/05/2008  jramos         495714                  Add enableSecurity and configMultiSecDomains targets
   03/26/2008  sedov          507937                  Added enable-security and disable-security to match webservices bucket
   06/12/2008  jramos         524904                  Add new test case groupings
   07/18/2008  gkuo           535890                  add setupServerAll tag for the zOS on setupServer
   11/05/2008  btiffany       562927                  update basic tests group for L3
   11/07/2008  jramos         559143                  Add new targets to modify simplicity config file, stop-server for compile
   11/12/2008  bluk           551682                  Add some groupings for z/OS
   12/01/2008  btiffany       567451                  Add runMixedCell grouping
   12/11/2008  jramos         566458                  Write log file when execution completes
   01/15/2009  jramos         571132                  Set setFrameworkTopology.topology property for mixed cell
   02/04/2009  btiffany       573511                  Add   runFvtCoreAtOnce, runFvtBasicAtOnce 
   02/11/2009  jramos         574405                  Change core grouping to run in fvtAtOnce mode
   03/04/2009  btiffany       578313                  enable ldap security automatically for core tests 
   04/07/2009  jramos         584075                  Add runFVTRapidRegression target
   08/25/2009  syed           609212                  Add runSamlFis
   11/10/2009  jramos         626728                  Redefine targets
   12/14/2009  syed           632329                  Define runWssecurityTrust
   03/16/2010  syed           F18567-23226            Define runWssecurityGlm
   03/24/2010  sy             639343                  Redefine ws-misc and add ws-audit (runWssecurityAudit) 
   06/21/2010  jtnguyen       655734                  Add ws.mixedcell bucket
   06/23/2010  gkuo           657751                  Add wss.mixedcell bucket(WSSecurity)
   11/04/2010  whsu           677032                  adding serviceref ps v7-8 migration tests
   1/20/2010   whsu           685511                  reorganize/optimize timing of serviceref runtime testcases
   2/22/2012   syed           728744                  Added runSamlWebSSO
   07/10/2012  syed           736372                  Define runOAuth20
-->

<project name="tWAS.websvcs.fvt" default="liberty.runFvt" basedir=".">
  &instance;
  &properties;
  &targets;
  &path_refs;
  &taskdefs;
    
	<import file="../../ant_build/public_imports/internal_imports/buildtasks.xml"/>
    <!-- Start of Liberty FAT setup -->
    <path id="buildtasks">
		<fileset dir="${basedir}/common/jars/">
    	    <patternset refid="buildtasks.jars" />
		</fileset>
	</path>
	<taskdef resource="com/ibm/aries/buildtasks/buildtasks.properties" classpathref="buildtasks" />
    <!-- Import standard launch tasks into this project -->
    <import file="${basedir}/src/ant/properties.xml"/>
    <import file="${basedir}/src/ant/launch.xml"/>
	
    <!-- The directory where the test bucket is unzipped -->
    <!--<dirname property="dir.component.root" file="${ant.file.tWAS.websvcs.fvt}"/>-->

    <property name="bootstrapping.properties" value="${dir.component.root}/bootstrapping.properties"/>
    
    <!-- These properties won't be used in migrated tWAS websvcs.fvt -->
    <!-- The name of the test bucket  -->
    <property name="test.bucket.name"  value="Migrated tWAS websvcs.fvt"/>
    
    <!-- The JAR file that contains all the files needed by the test bucket.  Located in ${dir.build.jars} -->
    <property name="test.bucket.jar"   value="tWAS.websvcs.fvt.jar"/>
 
    <!-- The entry point of the BVT/FVT/FAT  buckets.  This class must have a public, static, no-argument method called suite() that returns a junit.framework.Test. -->
    <property name="test.bucket.class" value="com.ibm.wsspi.fvt.suite.config.junit.CustomizedTestSuite"/>

    <!-- Needed to find suite def XML files. -->
    <property name="dir.suitedef" value="${dir.component.root}/src/suitedef/" />   
    
    <!-- End of Liberty FAT setup -->
    
    <import file="src/xmls/test_groupings.xml"/>
    
    <target name="liberty.runFvt" depends="initProperties, translateProperties, init, fvt.liberty, postclean"/>
    
    <target name="liberty.compileFvt" depends="initProperties, translateProperties, clean, init, compile.liberty, postclean"/>

    <target name="runFvt" depends="setSimplicityConfigProps, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
    <target name="runFvtAtOnce" depends="setSimplicityConfigProps, clean, init, compile, fvtAtOnce, restoreSimplicityConfigProps"/>
    <target name="runFvtAll" depends="setSimplicityConfigProps, define-all, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
    <target name="runMigration" depends="setSimplicityConfigProps, define-migration, clean, init, compile, fvtMigration, restoreSimplicityConfigProps"/>

<!-- whsu -->

    <target name="runMigration8" depends="setSimplicityConfigProps, define-migrationV7To8, clean, init, compile, fvtMigration, restoreSimplicityConfigProps"/>


      <target name="runWSSMixedcell">
        <property name="setFrameworkTopology.topology" value="multiNode"/>
        <antcall target="setSimplicityConfigProps"/>
        <antcall target="define-wss-mixedcell"/>
        <antcall target="clean"/>
        <antcall target="init"/>
        <antcall target="compile"/>
        <antcall target="fvtMixedCell"/>
        <antcall target="restoreSimplicityConfigProps"/>
      </target>
      <target name="runMixedCell">
        <property name="setFrameworkTopology.topology" value="multiNode"/>
        <antcall target="setSimplicityConfigProps"/>
        <antcall target="define-mixedcell"/>
        <antcall target="clean"/>
        <antcall target="init"/>
        <antcall target="compile"/>
        <antcall target="fvtMixedCell"/>
        <antcall target="restoreSimplicityConfigProps"/>
      </target>
      
      <target name="runWsMixedcell">
        <property name="setFrameworkTopology.topology" value="multiNode"/>
        <antcall target="setSimplicityConfigProps"/>
        <antcall target="define-ws-mixedcell"/>
        <antcall target="clean"/>
        <antcall target="init"/>
        <antcall target="compile"/>
        <antcall target="fvtMixedCell"/>   
        <antcall target="restoreSimplicityConfigProps"/>
      </target>
      
      <target name="runJms" depends="setSimplicityConfigProps, define-jms, clean, init,compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runSamlFisFats" depends="setSimplicityConfigProps, define-samlFisFats, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runSamlWebSSO" depends="setSimplicityConfigProps, define-samlWebSSO, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runOAuth20" depends="setSimplicityConfigProps, define-OAuth20, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <!--<target name="runWssecurity" depends="setSimplicityConfigProps, define-wssecurity, clean, init, compile, fvt, restoreSimplicityConfigProps"/>-->
      <target name="runWssecurityCore" depends="setSimplicityConfigProps, define-wssecurity-core, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecurityCoreRapid" depends="setSimplicityConfigProps, define-wssecurity-core-rapid, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecuritySecconv" depends="setSimplicityConfigProps, define-wssecurity-secconv, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecurityTrust" depends="setSimplicityConfigProps, define-wssecurity-wstrust, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecurityWspolicy" depends="setSimplicityConfigProps, define-wssecurity-wspolicy, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecurityMisc" depends="setSimplicityConfigProps, define-wssecurity-misc, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecurityAudit" depends="setSimplicityConfigProps, define-wssecurity-audit, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWssecurityGlm" depends="setSimplicityConfigProps, define-wssecurity-glmFisFats, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runAdminCore" depends="setSimplicityConfigProps, define-admin-core, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runAdminCoreRapid" depends="setSimplicityConfigProps, define-admin-core-rapid, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runAdminPolicyset" depends="setSimplicityConfigProps, define-admin-policyset, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runAdminEnhancement" depends="setSimplicityConfigProps, define-admin-Enhancement, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runAdminIntegration" depends="setSimplicityConfigProps, define-admin-Integration, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWsEngine" depends="setSimplicityConfigProps, define-ws-engine, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWsEngineRapid" depends="setSimplicityConfigProps, define-ws-engine-rapid, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWsTransport" depends="setSimplicityConfigProps, define-ws-transport, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWsInteg1" depends="setSimplicityConfigProps, define-ws-integ1, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      <target name="runWsInteg2" depends="setSimplicityConfigProps, define-ws-integ2, clean, init, compile, fvt, restoreSimplicityConfigProps"/>
      
  <target name="clean" depends="printEnv, cleanExec, killwlp">
    <delete dir="${FVT.build.installableApps.dir}"/>
    <delete dir="${FVT.build.lib.dir}"/>
    <delete dir="${FVT.build.work.dir}"/>
    <delete dir="${FVT.build.javadoc}"/>

    <!-- try not to confuse CVS and/or Eclipse-CVS tooling -->
    <!-- delete generated artifacts, leave controlled (source) artifacts -->
    <!-- <delete dir="${FVT.build.classes.dir}"/> -->

    <delete dir="${FVT.build.classes.dir}/com"/>
    <delete dir="${FVT.build.classes.dir}/org"/>
    <delete dir="${FVT.build.classes.dir}/samples"/>
    <delete dir="${FVT.build.classes.dir}/test"/>
    <delete dir="${FVT.build.classes.dir}/work"/>
    <delete dir="${FVT.build.classes.dir}/wsengine"/>
    <delete dir="${FVT.build.classes.dir}/*.jacl"/>
    <delete dir="${FVT.build.classes.dir}/*.log"/>
    <delete dir="${FVT.build.classes.dir}/*.properties"/>
    <delete file="${FVT.build.classes.dir}/*.properties"/>
    <delete>
      <fileset dir="${FVT.build.classes.dir}">
        <include name="**/*class"/>
      </fileset >
    </delete>
  </target>  
  
  <target name="postclean">
    <antcall target="killwlp"/>
  </target>

  <target name="cleanExec" depends="printEnv">
    <delete dir="${FVT.logs.dir}"/>
    <!--<delete dir="${FVT.test.reports.dir}"/>-->
	<delete>
		<fileset dir="${FVT.test.reports.dir}" includes="**/*" excludes="*.log"/>
	</delete>
    <delete>
      <fileset dir="${FVT.base.dir}/build/classes" includes="*.log"/>
    </delete>
  </target>

  <target name="init" depends="printEnv, initExec">
    <mkdir dir="${FVT.build.installableApps.dir}"/>
    <mkdir dir="${FVT.build.lib.dir}"/>
    <mkdir dir="${FVT.build.work.dir}"/>
    <mkdir dir="${FVT.build.classes.dir}"/>
    <mkdir dir="${FVT.build.javadoc}"/>
    <chmod file="${FVT.build.work.dir}" perm="777" type="dir"/>
  </target>

  <target name="initExec" depends="printEnv">
    <mkdir dir="${FVT.test.reports.dir}"/>
    <mkdir dir="${FVT.logs.dir}"/>
  </target>
	
	  <target name="compile" depends="init, compileFramework">
	    <ant antfile="${FVT.base.dir}/src/build.xml"
	         target="stopServer"
	         dir="${FVT.base.dir}/src">
	    </ant>
	    <ant antfile="${FVT.base.dir}/src/build.xml"
	         target="buildAll"
	         dir="${FVT.base.dir}/src"/>
	  </target>
	
	<target name="compile.liberty" depends="init, compileFramework">
		    <!--<ant antfile="${FVT.base.dir}/src/build.xml"
		         target="stopServer.liberty"
		         dir="${FVT.base.dir}/src">
		    </ant>-->
		    <ant antfile="${FVT.base.dir}/src/build.xml"
		         target="buildAll.liberty"
		         dir="${FVT.base.dir}/src"/>
		  </target>

	  <target name="compileFramework" depends="init">
	    <javac compiler="modern" srcdir="${FVT.base.dir}/src/"
	           destdir="${FVT.build.classes.dir}"
	           debug="${debug}"
	           failonerror="${failonerror}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
	           deprecation="${deprecation}">
	        <include name="com/**/*.java"/>
	        <include name="common/utils/**/*.java"/>
	        <classpath refid="classpath"/>
	    </javac>
	  </target>

  <target name="install">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="installAppsInWAS"
         dir="${FVT.base.dir}/src"/>
  </target>

  <target name="uninstall">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="uninstallAppsInWAS"
         dir="${FVT.base.dir}/src"/>
  </target>

  <target name="fvt">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         dir="${FVT.base.dir}/src"/>
  </target>
	
	<target name="fvt.liberty">
	    <ant antfile="${FVT.base.dir}/src/build.xml"
	    	 target="fvt.liberty"
	         dir="${FVT.base.dir}/src"/>
	  </target>
        
  <target name="fvtAtOnce">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="fvtAtOnce"
         dir="${FVT.base.dir}/src"/>
  </target>

  <target name="fvtMigration">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="fvtMigration"
         dir="${FVT.base.dir}/src"/>
  </target>

 <target name="fvtMixedCell">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="fvtMixedCell"
         dir="${FVT.base.dir}/src"/>
 </target>

  <target name="exec">   <!-- for EzWAS. Default execFvt -->
    <antcall target="execFvt" />
  </target>
  
  <target name="execFvt" depends="cleanExec, initExec"> <!-- for EzWAS -->
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="execFvt"
         dir="${FVT.base.dir}/src"/>
  </target>
 
  <target name="startWAS">
    <antcall target="start-server"/>
  </target>

  <target name="stopWAS">
    <antcall target="stop-server"/>
  </target>

  <target name="report">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="genReports"
         dir="${FVT.base.dir}/src"/>
  </target>

  <target name="ftpReport">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="ftp-report"
         dir="${FVT.base.dir}/src"/>
  </target>

  <target name="manual-tests">
    <ant antfile="${FVT.base.dir}/src-mfvt/build.xml"
         dir="${FVT.base.dir}/src-mfvt"/>
  </target>

  <!-- This target will get the built tests from the report
       server (amy.austin.ibm.com).  This is time saving
       feature so that users can just execute this target
       and then run the install and exec targets.
  -->
  <target name="getBuiltTests">
     <antcall target="ftp-get">
        <param name="host" value="amy.austin.ibm.com"/>
        <param name="user" value="${reportUser}"/>
        <param name="passwd" value="${reportPasswd}"/>
        <param name="dir" value="public_html/tests/${reportRelease}/${reportBuild}"/>
        <param name="localdir" value="${FVT.base}"/>
        <param name="file" value="ws-built.zip"/>
     </antcall>
  </target>

  <!-- This target will unzip the ws/code/webservices/fvt/* files
       from the built tests zip file.
  -->
  <target name="unzipBuiltTests">
    <unzip src="${FVT.base}/ws-built.zip"
           dest="${FVT.base}"
           overwrite="true">
      <patternset>
        <include name="WFVT/ws/code/websvcs.fvt/fvt/**"/>
      </patternset>
    </unzip>
  </target>

  <!-- This target will set up the server (ex. set up SSL,
       JMS configuration, etc.)
  -->
  <target name="configServer">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="setupServer"
         dir="${FVT.base.dir}/src"/>
  </target>

  <!-- This target will generate the JavaDoc for the tests.
  -->
  <target name="javadoc">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="genjavadoc"
         dir="${FVT.base.dir}/src"/>
  </target>
  
  <!-- This target will copy and modify the WS-Security xml
       log files to the base engine directory.
  -->
  <target name="modifyWSSecurityLogs">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="copyWSSecurityLogs"
         dir="${FVT.base.dir}/src"/>
  </target>

  <!--
	Print out a list of top-level test directories. This is used by automated
	regression tool
  -->
  <target name="listTestDirs" depends="compileFramework">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="listTestDirs"
         dir="${FVT.base.dir}/src"/>
  </target>

	<!--
		Enable Global LDAP ltpa security
		To call this target, the server must be started and then restarted to
		make security changes effective
	-->
  <target name="enable-security" >
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="enableSecurity"
         dir="${FVT.base.dir}/src"/>
  </target>
	
	<!--
		Enable Global LDAP ltpa security
		To call this target, the server must be started and then restarted to
		make security changes effective
	-->
  <target name="disable-security" >
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="disableSecurity"
         dir="${FVT.base.dir}/src"/>
  </target>

  <target name="configMultiSecDomains" depends="compileFramework">
    <ant antfile="${FVT.base.dir}/src/build.xml"
         target="performMultiSecDomConfig"
         dir="${FVT.base.dir}/src"/>
  </target>

      <target name="setSimplicityConfigProps">
	    <condition property="copy.config.file">
	      <not>
	        <available file="${FVT.base.dir}/simplicityConfig.props.orig"/>
	      </not>
	    </condition>
	    <antcall target="copyFrameworkSimplicityConfigProps"/>
	  </target>

	  <target name="copyFrameworkSimplicityConfigProps" if="copy.config.file">
	    <copy overwrite="yes"
	          file="${FVT.base.dir}/simplicityConfig.props"
	          tofile="${FVT.base.dir}/simplicityConfig.props.orig"/>
	    <copy overwrite="yes"
	          file="${FVT.base.dir}/frameworkSimplicityConfig.props"
	          tofile="${FVT.base.dir}/simplicityConfig.props"/>
	  </target>

	  <target name="restoreSimplicityConfigProps">
	    <condition property="copy.orig.config.file">
	      <available file="${FVT.base.dir}/simplicityConfig.props.orig"/>
	    </condition>
	    <antcall target="copyOrigSimplicityConfigProps"/>
	  </target>

	  <target name="copyOrigSimplicityConfigProps" if="copy.orig.config.file">
	    <copy overwrite="yes"
	          file="${FVT.base.dir}/simplicityConfig.props.orig"
	          tofile="${FVT.base.dir}/simplicityConfig.props"/>
	    <delete file="${FVT.base.dir}/simplicityConfig.props.orig"/>
    </target>

    <!-- Test grouping definitions have been moved to src/xmls/test.groupings.xml -->

</project>
