<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "instance.xml">
        <!ENTITY properties SYSTEM "properties.xml">
]>

<!--
 1.2, 7/27/07


Date         Defect/Feature     Author          Description
05/16/2006   368259             ulbricht        Install Samples
05/18/2006   368616             ulbricht        Changes for WSFP
09/07/2007                      gkuo            enable the auto install on WASX

        
Local Windows Platform
    call java handleProps to handle:
      1) instance.xml (input from parameters and ez.props)
      2) change fvt/src/xmls/properties.xml for EzWAS
      3) Check if an WebSphere installed in the default WebSphere directory.
    do preluninstall in Local Windows platform if a WebSphere is installed
    Install the build if do.linsytall in ez.props is ture
       Chang the trust level to allow the installation
       call WIOU2(CIS) to install the Base version of Build
       Chang the trust level back to protect the machine

    cd to FVT/ws/code/websvcs.fvt
       call bin/nt/unittest.bat %FVT_TOP% %WAS_TOP% ZOSC ZOSC compile

    Call ToWZ to translate the necessary files into EBCDIC

    jar the FVT code up
       cd %FVT_TOP%
       zip -r %buildNumber%.zip FVT 

    Call ToWZ to translate the necessary files back to ASCII for reuse

To EzWAS:
  call autotelnet task to remove the old FVT in ZOS
  call ftp task to transfer the FVT jar file to ZOS
  call autotelnet to chmod 775 on th FVT directory
  call autotelnet to run the install for us
  call autotelnet to run the exec for us
  call autotelnet to jar up the test results 
  call ftp task to get  results jar files back to <FVT_ROOT>/FVT/ws/code/websvcs.fvt
-->

<project default="all" basedir=".">
  &instance;
  &properties;

  <target name="all" depends="printEnv, preluninstall, linstall, startzstaf,  compile, ezwas, getresults"/>

  <target name="setuponly" depends="printEnv, preluninstall, linstall, startzstaf, compile, ftpz, zexpand"/>

  <target name="installonly" depends="printEnv, preluninstall, linstall"/>

  <target name="ezwasonly" depends="printEnv, ezwas, getresults"/>


  <target name="installexec" depends="printEnv, startzstaf, zexec"/>




  <!-- If the WAS was installed in WAS.base.dir, such as: c:\WebSphere\AppServer
       and do.linstall(ez.props) is true, then uninstall the old WebSphere
       -->
  <target name="preluninstall" if="IF.preluninstall">
     <antcall target="doluninstall"/>
  </target>

  <!-- install the WAS when do.linstall(ez.props) is true 
       if do.linstall(ez.props) is false, manually install the WebSphere
       This is useful when silent install is not working    
       -->
  <target name="linstall" if="IF.linstall">
     <mkdir dir="${WAS.base.dir}"/>
     <antcall target="trustWIOU"/>
     <echo message="Doing WIOU Install on WASX ${WIOU.build.level}" />
     <exec executable="staf.exe" dir="${FVT.zos.dir}">
        <arg value="${WIOU.server}"/>
        <arg value="${WIOU.service}"/>
        <arg value="install"/>
        <arg value="target"/>
        <arg value="${local.hostname}"/>
        <arg value="product"/>
        <arg value="${WIOU.product}"/> <!-- was61 GM -->
        <arg value="version"/>
        <arg value="${WIOU.version}"/>
        <arg value="installroot"/>
        <arg value="${WAS.base.dir}"/>
        <arg value="buildlevel"/>
        <arg value="${WIOU.build.level}"/>
        <arg value="option"/>
        <arg value="&quot;-OPT feature=samplesSelected&quot;"/>
     </exec>
     <antcall target="secureWIOU"/>
  </target>

  <!-- do the ZOSC compile in the Windows Machine
       call unittest.bat
       -->
  <target name="compile" >
      <echo message="Doing compile in local driver" />
      <exec executable="${FVT.fvt.dir}\bin\nt\unittest.bat" dir="${FVT.fvt.dir}">
          <arg value="${FVT.base}" />
          <arg value="${WAS.base.dir}" />
          <arg value="${WIOU.build.level}" />
          <arg value="ZPyxis" />
          <arg value="compile" />
      </exec>
  </target>

  <target name="ezwas" depends="ftpz, zexpand, zexec"/>

  <!-- 1. Call ToWZ to translate all the .sh  files into EBCDIC
            Also change the text file into Unix format
       2. Jar up the compiled FVT code into fvt/jar in the FVT.root(FVT.base)
       3. Call ToWZ again but this time to translate the .sh files back to ASCII
       4. ftp the fvt.jar to EzWAS system under userHome, such as: /u/USER144
       -->
  <target name="ftpz">
      <echo message="Change the ascii txt to Ebcdic" />
      <java classname="ToWZ" fork="true"> 
          <arg value="${FVT.base}/${cmvc.fvt.base}"/>
          <arg value="${linux.encoding.4z}"/>
          <classpath>
            <pathelement path="${FVT.base}/${cmvc.fvt.base}/zos/classes"/>
          </classpath>
      </java>
      <echo message="zip the compiled FVT code" />
      <jar destfile="${FVT.base}/fvt.jar" 
           basedir="${FVT.base}" 
           includes="autoFVT/**"
      />
      <echo message="reverse the sh file to ASCII" />
      <java classname="ToWZ" fork="true"> 
          <arg value="${FVT.base}/${cmvc.fvt.base}"/>
          <arg value="${linux.encoding.4z}"/>
          <arg value="reverse"/>
          <classpath>
            <pathelement path="${FVT.base}/${cmvc.fvt.base}/zos/classes"/>
          </classpath>
      </java>
      <echo message="jar up all the local profiles files" />
      <jar destfile="${FVT.base}/fvtndm.jar" 
           basedir="${linux.nd.dmgr.profile.dir}" 
           includes="**"
      />
      <jar destfile="${FVT.base}/fvtnda.jar" 
           basedir="${linux.nd.appsrv.profile.dir}" 
           includes="**"
      />
      <jar destfile="${FVT.base}/fvtbasea.jar" 
           basedir="${linux.base.profile.dir}" 
           includes="**"
      />
      <echo message="ftp the zipped FVT code to zOS" />
      <ftp server="${ez.tcpip}" userid="${ez.user.id}" password="${ez.password}"
           binary="true" action="put" 
           remotedir="${ez.user.home}">
            <fileset dir="${FVT.base}">
               <include name="fvt*.jar"/>
            </fileset>
      </ftp>
  </target>

  <!-- Call telnet to run the command in the EzWAS.
       See the statements in <write />
       1. It removes the old /u/USER144/FVT
       2. unjar the fvt.jar into /u/USER144
       3. chmod -r on /u/USER144/FVT
       -->
  <target name="zexpand">
      <echo message="telnet to zOS to expand the fvt.jar" />
      <autotelnet userid="${ez.user.id}" password="${ez.password}" server="${ez.tcpip}">
         <readuntil>${ez.prompt.login}</readuntil>
         <write>cd ${ez.user.home}</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>\rm -r FVT</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>\rm -r WFVT</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>jar -xvf fvt.jar</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>chmod -R 775 FVT</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <!-- Wait till chmod complete -->
         <!-- copy the files which were copied during compile -->
         <write>cd ${ez.user.home}/${cmvc.fvt.base}/zos</write>   <!-- copy the wssecfvt client file -->
         <readuntil>zos&gt;</readuntil>
         <write>./copyMisc.sh ${ez.user.id} ${ez.password}</write>   <!-- copy the wssecfvt client file -->
         <readuntil>zos&gt;</readuntil>
         <write>cd ${linux.nd.dmgr.profile.dir}</write>   <!-- copy the wssecfvt client file -->
         <readuntil>${linux.nd.dmgr.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtndm.jar</write>   
         <readuntil>${linux.nd.dmgr.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtnda.jar</write>   
         <readuntil>${linux.nd.dmgr.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtbasea.jar</write>   
         <readuntil>${linux.nd.dmgr.profile.dir}</readuntil>
         <write>chmod -R 777 *</write>   
         <readuntil>${linux.nd.dmgr.profile.dir}</readuntil>

         <write>cd ${linux.nd.appsrv.profile.dir}</write>   <!-- copy the wssecfvt client file -->
         <readuntil>${linux.nd.appsrv.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtndm.jar</write>   
         <readuntil>${linux.nd.appsrv.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtnda.jar</write>   
         <readuntil>${linux.nd.appsrv.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtbasea.jar</write>   
         <readuntil>${linux.nd.appsrv.profile.dir}</readuntil>
         <write>chmod -R 777 *</write>   
         <readuntil>${linux.nd.appsrv.profile.dir}</readuntil>
         
         <write>cd ${linux.base.profile.dir}</write>   <!-- copy the wssecfvt client file -->
         <readuntil>${linux.base.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtndm.jar</write>   
         <readuntil>${linux.base.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtnda.jar</write>   
         <readuntil>${linux.base.profile.dir}</readuntil>
         <write>jar -xvf  ${ez.user.home}/fvtbasea.jar</write>   
         <readuntil>${linux.base.profile.dir}</readuntil>
         <write>chmod -R 777 *</write>   
         <readuntil>${linux.base.profile.dir}</readuntil>
         
      </autotelnet>
  </target>


  <!-- Call telnet to run the FVT install step
       1) cd to /u/USER144/FVT/ws/code/websvcs.fvt
       2) run bin/unix/unittest.sh FVT_HOME WAS_HOME ZOSC ZOSC install
       -->
  <target name="startzstaf" >
      <!-- See staf task document at http://staf.sourceforge.net/current/STAFAnt.htm -->
      <staf location="${ez.tcpip}" 
            service="PING"
            request="PING"
            resultPrefix="z.ping" />

      <!-- phantom.sh starts the STAFProc   -->
      <!-- phantom1.sh does not start the STAFProc-->
      <condition property="zstaf.running"> 
          <equals arg1="${z.ping.rc}"
                  arg2="0"
                  trim="true" />
      </condition>

      <antcall target="spawnzstaf" inheritAll="true" />

      <!-- ftp the ImportDefPlcy.py to the zOS -->
      <ftp server="${ez.tcpip}" userid="${ez.user.id}" password="${ez.password}"
           binary="true" action="put" 
           remotedir="${linux.tmp.dir}">
            <fileset dir="${FVT.base}/${cmvc.fvt.base}/src/wssecfvt/jython">
               <include name="ImportDefPlcy.py"/>
            </fileset>
      </ftp>

      <!-- Call STAF to exec the ant-->
      <!-- Start zOS STAFProc. If it's started, it's OK too start again. -->
      <autotelnet userid="${ez.user.id}" password="${ez.password}" server="${ez.tcpip}">
         <readuntil>${ez.prompt.login}</readuntil>
         <!-- Change all the files to 777 for STAF to access -->
         <write>cd</write> 
         <readuntil>${ez.prompt.home}</readuntil>
         <write>${linux.base.profile.dir}/bin/wsadmin.sh -conntype none -f ${linux.tmp.dir}/ImportDefPlcy.py</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>${linux.nd.dmgr.profile.dir}/bin/wsadmin.sh -conntype none -f ${linux.tmp.dir}/ImportDefPlcy.py</write>
         <readuntil>${ez.prompt.home}</readuntil>

         <!-- copy the WSSecuritydefault to ND WSSEcurity default -->
         <write>mkdir "${linux.nd.appsrv.profile.dir}/config/cells/${linux.nd.cell.name}/PolicySets/WSSecurity default/"</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>\rm -rf $HOME/tmpS</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>mkdir $HOME/tmpS</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <write>cd "${linux.nd.dmgr.profile.dir}/config/cells/${linux.nd.cell.name}/PolicySets/WSSecurity default/"</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>\cp -r * $HOME/tmpS</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>cd "${linux.nd.appsrv.profile.dir}/config/cells/${linux.nd.cell.name}/PolicySets/WSSecurity default/"</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>\cp -r $HOME/tmpS/* .</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <!-- link the directory for wssecfvt
             // /WebSphere/ND/AppServer/profiles/default/fvtWorkDir/wssecfvt/securitypolicy12/Callers
             // /WebSphere/ND/DeploymentManager/profiles/default/fvtWorkDir/wssecfvt/securitypolicy12/Callers
         -->
         <write>cd ${linux.nd.dmgr.profile.dir}</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir fvtWorkDir</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir fvtWorkDir/wssecfvt</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>ln -s $HOME/autoFVT/build/work/wssecfvt/securitypolicy12 fvtWorkDir/wssecfvt/securitypolicy12</write>

         <write>cd ${linux.nd.appsrv.profile.dir}/</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir fvtWorkDir</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir fvtWorkDir/wssecfvt</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>ln -s $HOME/autoFVT/build/work/wssecfvt/securitypolicy12 fvtWorkDir/wssecfvt/securitypolicy12</write>
         <readuntil>${ez.prompt.login}</readuntil>

         <write>mkdir etc/ws-security</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir etc/ws-security/samples</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding04</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding04/PolicyTypes</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding04/PolicyTypes/WSSecurity</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding05</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding05/PolicyTypes</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding05/PolicyTypes/WSSecurity</write>
         <readuntil>${ez.prompt.login}</readuntil>

         <write>cd ${linux.nd.dmgr.profile.dir}/</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir etc/ws-security</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir etc/ws-security/samples</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding04</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding04/PolicyTypes</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding04/PolicyTypes/WSSecurity</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding05</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding05/PolicyTypes</write>
         <readuntil>${ez.prompt.login}</readuntil>
         <write>mkdir config/cells/${linux.nd.cell.name}/bindings/CallersOrderBinding05/PolicyTypes/WSSecurity</write>
         <readuntil>${ez.prompt.login}</readuntil>


         <!-- copy complete -->

         <write>cd</write> 
         <readuntil>${ez.prompt.home}</readuntil>
         <write>su</write> 
         <readuntil>${ez.prompt.home}</readuntil>
         <write>cd ${linux.base.profile.dir}/..</write> <!-- /WebSphere/Base/AppServer/profiles-->
         <readuntil>${ez.user.uid}:${linux.base.dir}</readuntil>
         <write>chmod -R 777 default</write> 
         <readuntil>${ez.user.uid}:${linux.base.dir}</readuntil>
         <write>cd ${linux.nd.appsrv.profile.dir}/..</write> <!-- /WebSphere/ND/AppServer/profiles-->
         <readuntil>${ez.user.uid}:</readuntil>
         <write>chmod -R 777 default</write> 
         <readuntil>${ez.user.uid}:</readuntil>
         <write>cd ${linux.nd.dmgr.profile.dir}</write> <!-- /WebSphere/ND/DeploymentManager/profiles-->
         <readuntil>${ez.user.uid}:</readuntil>
         <write>chmod -R 777 default</write> 
         <readuntil>${ez.user.uid}:</readuntil>
         <!-- remove all WAM temporary directories. Mkdir the diiectory first --> 
         <write>mkdir ${linux.staf.dir}/data</write> 
         <readuntil>${ez.user.uid}:</readuntil>
         <write>mkdir ${linux.staf.dir}/data/STAF</write> 
         <readuntil>${ez.user.uid}:</readuntil>
         <write>mkdir ${linux.staf.dir}/data/STAF/tmp</write> 
         <readuntil>${ez.user.uid}:</readuntil>
         <write>cd ${linux.staf.dir}/data/STAF/tmp</write> 
         <readuntil>${ez.user.uid}:${linux.staf.dir}/data/STAF/tmp</readuntil>
         <write>\rm -rf wam</write> 
         <readuntil>${ez.user.uid}:${linux.staf.dir}/data/STAF/tmp</readuntil>
         <!-- clean /tmp --> 
         <write>cd ${linux.tmp.dir}</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>\rm heapd*</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>\rm WebS*</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>\rm Snap*</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>\rm suin*</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <!-- this piece of code might cause troubles or just being dummy in LinuxBoxes-->
         <!-- clean WSSR1 home directories. Mk thr directory first --> 
         <write>mkdir /var</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>mkdir /var/WebSphere</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>mkdir /var/WebSphere/home</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>mkdir /var/WebSphere/home/WSSR1</write> 
         <readuntil>${ez.user.uid}:/</readuntil>
         <write>cd /var/WebSphere/home/WSSR1</write> 
         <readuntil>${ez.user.uid}:/var/WebSphere/home/WSSR1</readuntil>
         <write>\rm heapd*</write> 
         <readuntil>${ez.user.uid}:/var/WebSphere/home/WSSR1</readuntil>
         <write>\rm Snap*</write> 
         <readuntil>${ez.user.uid}:/var/WebSphere/home/WSSR1</readuntil>
         <write>\rm suin*</write> 
         <readuntil>${ez.user.uid}:/var/WebSphere/home/WSSR1</readuntil>
         <write>exit</write> 
         <readuntil>${ez.user.uid}</readuntil>
      </autotelnet>
  </target>

  <target name="spawnzstaf" unless="zstaf.running">
      <exec executable="cmd" spawn="true">
        <arg value="/c"/>
        <arg value="ant.bat"/>
        <arg value="-f"/>
        <arg value="${FVT.base}/${cmvc.fvt.base}/zos/eztest.xml"/>
        <arg value="telnetzstaf"/>
      </exec>
  </target>

  <target name="telnetzstaf" >

      <!-- Call STAF to exec the ant-->
      <!-- Start zOS STAFProc. If it's started, it's OK too start again. -->
      <autotelnet userid="${ez.user.id}" password="${ez.password}" server="${ez.tcpip}">
         <readuntil>${ez.prompt.login}</readuntil>
         <write>cd</write>
         <readuntil>${ez.prompt.home}</readuntil>
         <!-- start the "STAFProc in the background -->
         <write>STAFProc 2&gt;&amp;1 | tee ${linux.tmp.dir}/staf.log</write>
         <readuntil>${ez.prompt.fvt}/nosuch a respond</readuntil>
      </autotelnet>
  </target>

  <!-- Call telnet to run the FVT exec step
       1) cd to /u/USER144/FVT/ws/code/websvcs.fvt
       2) run bin/unix/unittest.sh FVT_HOME WAS_HOME ZOSC ZOSC exec
       -->
  <target name="zexec" depends="enableZosLTPA">
      <!-- Doing zOS exec -->
      <autotelnet userid="${ez.user.id}" password="${ez.password}" server="${ez.tcpip}">
         <readuntil>${ez.prompt.login}</readuntil>
         <write>cd ${ez.user.home}/${cmvc.fvt.dir}</write>
         <readuntil>${ez.prompt.fvt}</readuntil>
         <!--  this will call
               bin/unix/unittest.sh ${ez.user.home}
               ${ez.was.home} ZOSC ZOSC fvtBase 2&gt;&amp;1 | tee exec.log -->
         <write>zexec.sh</write>
         <readuntil wait="10">${endsignal}</readuntil>
         <readuntil wait="10">${ez.prompt.fvt}</readuntil>
      </autotelnet>
  </target>


  <!-- Call telnet to run the enabledSecurity if needed
       1) cd to /u/USER144/FVT/ws/code/websvcs.fvt/zos
       2) run enableSecurity.sh
       -->
  <target name="enableZosLTPA" if="IF.enable.zos.LTPA" >
      <!-- Doing zOS exec -->
      <autotelnet userid="${ez.user.id}" password="${ez.password}" server="${ez.tcpip}">
         <readuntil>${ez.prompt.login}</readuntil>
         <write>cd ${ez.user.home}/${cmvc.fvt.dir}/zos</write>
         <readuntil>${ez.user.uid}</readuntil>
         <write>enableSecurity.sh</write>
         <readuntil>${endsignal}</readuntil>
         <readuntil>${ez.user.uid}:${ez.user.home}</readuntil>
      </autotelnet>
  </target>


  <!-- Call telnet to run the FVT 
       jar up the test results
       one is logs.jar, the other is test-reports.jar
       -->
  <target name="getresults" >
      <!-- Doing zOS jar results -->
      <autotelnet userid="${ez.user.id}" password="${ez.password}" server="${ez.tcpip}">
         <readuntil wait="10">${ez.prompt.login}</readuntil>
         <write>cd ${ez.user.home}/${cmvc.fvt.dir}</write>
         <readuntil>${ez.prompt.fvt}</readuntil>
         <write>jarlogs.sh</write>
         <readuntil wait="10">${endsignal}</readuntil>
         <readuntil>${ez.prompt.fvt}</readuntil>
         <write>jartests.sh</write>
         <!-- jar -cvf test-reports.jar test-reports.WSFVT -->
         <readuntil wait="10">${endsignal}</readuntil>
         <readuntil>${ez.prompt.fvt}</readuntil>
      </autotelnet>
      <!-- Doing get backzOS jar results -->
     <antcall target="getbackresults"/>
  </target>

  <!-- Get back the test results to the local machine 
       under <FVT.base>/FVT/ws/code/websvcs.fvt
       -->
  <target name="getbackresults" >
      <ftp server="${ez.tcpip}" userid="${ez.user.id}" password="${ez.password}"
           binary="true" action="get" 
           remotedir="${ez.user.home}/${cmvc.fvt.dir}">
            <fileset dir="${FVT.base}/${cmvc.fvt.dir}">
               <include name="*.jar"/>
            </fileset>
      </ftp>
  </target>

  <target name="luninstall" if="IF.luninstall">
     <antcall target="doluninstall"/>
  </target>

  <target name="doluninstall">
     <tstamp/>
     <antcall target="trustWIOU"/>
     <echo message="Doing WIOU(CIS) Uninstall" />
     <exec executable="staf.exe" dir="${FVT.zos.dir}">
        <arg value="${WIOU.server}"/>
        <arg value="${WIOU.service}"/>
        <arg value="uninstall"/>
        <arg value="target"/>
        <arg value="${local.hostname}"/>
        <arg value="product"/>
        <arg value="${WIOU.product}"/>
        <arg value="version"/>
        <arg value="${WIOU.version}"/>
        <arg value="installroot"/>
        <arg value="${WAS.base.dir}"/>
     </exec>
     <antcall target="secureWIOU"/>
     <delete dir="${WAS.base.dir}"/>
     <mkdir  dir="${WAS.base.dir}"/>
  </target>

  <target name="trustWIOU">
     <echo message="trustWIOU" />
     <exec executable="staf.exe" dir="${FVT.zos.dir}">
        <arg value="local"/>
        <arg value="trust"/>
        <arg value="set"/>
        <arg value="default"/>
        <arg value="level"/>
        <arg value="5"/>
     </exec>
  </target>

  <target name="secureWIOU">
     <echo message="secureWIOU" />
     <exec executable="staf.exe" dir="${FVT.zos.dir}">
        <arg value="local"/>
        <arg value="trust"/>
        <arg value="set"/>
        <arg value="default"/>
        <arg value="level"/>
        <arg value="3"/>
     </exec>
  </target>

  <target name="printEnv">
     <echo message="-------------------------------------------"/>
     <echo message="        Construction Properties"/>
     <echo message="-------------------------------------------"/>
     <echo message="ANT.base.dir                 = '${ANT.base.dir}'"/> 
     <echo message="WAS.base.dir                 = '${WAS.base.dir}'"/> 
     <echo message="FVT.base                     = '${FVT.base}'"/> 
     <echo message="ez.system.raw                = '${ez.system.raw}'"/> 
     <echo message="ez.system                    = '${ez.system}'"/> 
     <echo message="ez.user.id                   = '${ez.user.id}'"/> 
     <echo message="ez.user.uid                  = '${ez.user.uid}'"/> 
     <echo message="ez.password                  = '${ez.password}'"/> 
     <echo message="ez.tcpip                     = '${ez.tcpip}'"/> 
     <echo message="ez.user.home                 = '${ez.user.home}'"/> 
     <echo message="do.preluninstall             = '${do.preluninstall}'"/> 
     <echo message="do.linstall                  = '${do.linstall}'"/> 
     <echo message="do.luninstall                = '${do.luninstall}'"/> 
     <echo message="ez.prompt.home               = '${ez.prompt.home}'"/> 
     <echo message="ez.prompt.fvt                = '${ez.prompt.fvt}'"/> 
     <echo message="ez.prompt.login              = '${ez.prompt.login}'"/> 
     <echo message="cmvc.fvt.base                = '${cmvc.fvt.base}'"/> 
     <echo message="cmvc.fvt.dir                 = '${cmvc.fvt.dir}'"/> 
     <echo message="endsignal                    = '${endsignal}'"/> 
     <echo message="WIOU.product                 = '${WIOU.product}'"/> 
     <echo message="WIOU.version                 = '${WIOU.version}'"/> 
     <echo message="WIOU.build.level             = '${WIOU.build.level}'"/> 
     <echo message="linux.tmp.dir                = '${linux.tmp.dir}'" /> 
     <echo message="linux.base.dir               = '${linux.base.dir}'" /> 
     <echo message="linux.base.profile.dir       = '${linux.base.profile.dir}'" /> 
     <echo message="linux.nd.dmgr.dir            = '${linux.nd.dmgr.dir}'" /> 
     <echo message="linux.nd.appsrv.dir          = '${linux.nd.appsrv.dir}'" /> 
     <echo message="linux.nd.dmgr.profile.dir    = '${linux.nd.dmgr.profile.dir}'" /> 
     <echo message="linux.nd.appsrv.profile.dir  = '${linux.nd.appsrv.profile.dir}'" /> 
     <echo message="linux.staf.dir               = '${linux.staf.dir}'" /> 
     <echo message="linux.nd.cell.name           = '${linux.nd.cell.name}'" /> 
     <echo message="linux.base.cell.name         = '${linux.base.cell.name}'" /> 
     <echo message="linux.encoding.4z            = '${linux.encoding.4z}'" /> 
  </target>
                                                                  
</project>
