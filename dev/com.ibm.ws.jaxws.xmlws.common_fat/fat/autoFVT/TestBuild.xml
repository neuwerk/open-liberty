<?xml version="1.0"?>
<project name="execute.websvcs.fvt" default="execute" basedir=".">

    <target name="execute" depends="setEnv, printEnv, run.jaxws_fat" />

    <target name="run.jaxws_fat" depends="setEnv, printEnv">
        <run_jaxws_fat targetname="liberty.runFvt"/>
    </target>

    <target name="compile.jaxws_fat" depends="setEnv, printEnv">
        <run_jaxws_fat targetname="liberty.compileFvt"/>
    </target>

	<condition property="unavailablebootstrappath" value="true">
	     <not>
	         <isset property="fat.bootstrap.path"/>
	     </not>
	</condition>
		
	<target name="updatebootstrap" unless="unavailablebootstrappath">  
	    <echo message="Copying ${fat.bootstrap.path}/${fat.bootstrap.name} to ${basedir}" />
	    <copy file="${fat.bootstrap.path}/${fat.bootstrap.name}" todir="${basedir}" overwrite="true"/>
	    <property file="${basedir}/bootstrapping.properties" />
	</target>
	
    <target name="setEnv">
        <!-- Start of setting common properties -->
        <property environment="env" />
        <exec executable="hostname" outputproperty="computer.hostname" />
        <dirname property="fvtBaseDir" file="${ant.file.execute.websvcs.fvt}" />
        <property name="fvttop" value="${fvtBaseDir}/.." />
        <!-- End of setting common properties -->

        <!-- Set jaxws_fat_server ports, a little bit complicated here to make sure 
		jaxws_fat testing has the same port settings between compilation phase and execution phase-->

        <!-- 1. Copy Liberty FAT default bootstrapping properties to jaxws_fat/autoFVT folder -->
    	<antcall target="updatebootstrap">
    	</antcall>
        <!-- 2. Echo the port settings defined by setPorts macro -->
        <echo message="Before applied testports.properties, http.Default.Port = ${http.Default.Port}" />
        <echo message="Before applied testports.properties, http.Default.Secure.Port = ${http.Default.Secure.Port}" />
        <echo message="Before applied testports.properties, bvt.prop.HTTP_default = ${bvt.prop.HTTP_default}" />
        <echo message="Before applied testports.properties, bvt.prop.HTTP_default.secure = ${bvt.prop.HTTP_default.secure}" />
        <property file="${fvtBaseDir}/testports.properties" />
        <echo message="After applied testports.properties, http.Default.Port = ${http.Default.Port}" />
        <echo message="After applied testports.properties, http.Default.Secure.Port = ${http.Default.Secure.Port}" />
        <echo message="After applied testports.properties, bvt.prop.HTTP_default = ${bvt.prop.HTTP_default}" />
        <echo message="After applied testports.properties, bvt.prop.HTTP_default.secure = ${bvt.prop.HTTP_default.secure}" />
        <property file="${fvtBaseDir}/bootstrapping.properties" />

        <!-- 3. Use jaxws_fat own property to set ports to avoid any execution env impact -->
        <property file="${fvtBaseDir}/jaxws_fat_testports.properties" />
        <echo message="jaxws_fat_server.HTTP_default=${jaxws_fat_server.HTTP_default}" />
        <echo message="jaxws_fat_server.HTTP_default.secure=${jaxws_fat_server.HTTP_default.secure}" />
        <echo message="jaxws_fat_server.IIOP=${jaxws_fat_server.IIOP}" />

    	<available file="${libertyInstallPath}" property="liberty.install.present1" />
    	<available file="./${libertyInstallPath}" property="liberty.install.present2" />

    	<if if="liberty.install.present1">
    	    <property name="liberty.path" value="${libertyInstallPath}" />
    	    <else>
    	         <if if="liberty.install.present2">
    	             <property name="liberty.path" value="${fvtBaseDir}/${libertyInstallPath}" />
    	         	 <propertyregex property="fvtBaseDir.replace" input="${fvtBaseDir}" regexp='\\' replace="/"/>
    	         	 <replace file="${fvtBaseDir}/bootstrapping.properties" token="libertyInstallPath=/wlp" value="libertyInstallPath=${fvtBaseDir.replace}${libertyInstallPath}"/>     				
    	                <else>
    	                    <echo message="Not found libertyInstallPath" />
    	                </else>
    	          </if>
    	     </else>
    	</if>
        	
        <!-- Update bootstrapping.properties -->
        <propertyfile file="${fvtBaseDir}/bootstrapping.properties">
            <!-- 4. use jaxws_fat own property to set ports to avoid any execution env impact -->
            <entry key="http.Default.Port" value="${jaxws_fat_server.HTTP_default}" />
            <entry key="http.Default.Secure.Port" value="${jaxws_fat_server.HTTP_default.secure}" />
            <entry key="iiop.Default.Port" value="${jaxws_fat_server.IIOP}" />

            <!-- liberty defined -->
            <entry key="ServerTopologyID" value="defaultServer" />
            <entry key="NonDefaultConsoleLogFileName" value="SERVER_NAME/messages.log" />
            <entry key="localhost.user" value="USER" />
            <entry key="localhost.password" value="PASSWORD" />

            <!-- tWAS websvcs.fvt required -->
            <entry key="was.cell.1.rootNodeHostname" value="${computer.hostname}" />
            <entry key="${computer.hostname}.alias" value="localhost" />
            <entry key="was.cell.1.connType" value="NONE" />
            <entry key="was.cell.1.connPort" value="2809" />
            <entry key="was.cell.1.WASPassword" value="admin" />
            <entry key="was.cell.1.WASUsername" value="admin" />
            <entry key="wasFEName" value="WAS85.FVT" />
            <entry key="wasBuildNumber" value="cf011231.01" />
            <entry key="localWASHome" value="${liberty.path}" />
            <entry key="was.cell.1.rootNodeProfilePath" value="${liberty.path}" />
        </propertyfile>

        <property file="${fvtBaseDir}/bootstrapping.properties" />
        <echo message="jaxws_fat_server shall use this port setting: http.Default.Port = ${http.Default.Port}" />
        <echo message="jaxws_fat_server shall use this port setting: http.Default.Secure.Port = ${http.Default.Secure.Port}" />

        <!-- tWAS websvcs.fvt required -->
        <property name="washome" value="${liberty.path}" />
        <property name="buildnumber" value="${wasBuildNumber}" />
        <property name="fename" value="${wasFEName}" />

        <!-- Ensure anthome is set -->
        <property name="anthome" value="${ant.home}" />
        <condition property="anthome" else="${env.ANT_HOME}">
            <isset property="anthome" />
        </condition>

        <available file="${java.home}/../lib/tools.jar" property="tools.jar.present1" />
        <available file="${java.home}/lib/tools.jar" property="tools.jar.present2" />
        <if if="tools.jar.present1">
            <property name="tools.jar.path" value="${java.home}/../lib/tools.jar" />
            <else>
                <if if="tools.jar.present2">
                    <property name="tools.jar.path" value="${java.home}/lib/tools.jar" />
                    <else>
                        <echo message="Not found tools.jar file based on ant process jvm property java.home" />
                    </else>
                </if>
            </else>
        </if>

        <antcall target="define-libertyFullFAT" />
    </target>

    <target name="printEnv">
        <echo message="hostname: ${computer.hostname}" />
        <echo message="fvttop: ${fvttop}" />
        <echo message="washome: ${washome}" />
        <echo message="buildnumber: ${buildnumber}" />
        <echo message="fename: ${fename}" />
        <echo message="anthome: ${anthome}" />
        <echo message="java.home: ${java.home}" />
        <echo message="tools.jar.path: ${tools.jar.path}" />
        <echo message="fvtBaseDir: ${fvtBaseDir}" />
        <echo message="libertyInstallPath: ${liberty.path}" />
        <echo message="fat.test.mode: ${fat.test.mode}" />
    </target>


    <macrodef name="run_jaxws_fat">
        <attribute name="targetname" />

        <sequential>
            <property name="groupingTarget" value="@{targetname}" />

            <iff if="max.permgen.size">
                <then>
                    <!-- Use the workspace properties definition if running on build engine -->
                    <property name="test.permgen" value="-XX:MaxPermSize=${max.permgen.size}" />
                </then>
                <else>
                    <!-- Ensure locally could run if using sunjdk -->
                    <property name="test.permgen" value="-XX:MaxPermSize=512M" />
                </else>
            </iff>
    	    <javac compiler="modern" srcdir="${fvtBaseDir}/anttaskpatch"
    	           destdir="${fvtBaseDir}/build/anttaskpatchclasses"
    	           target="1.8">
    	        <include name="com/**/*.java"/>
                <classpath>
                    <fileset dir="${ant.home}/lib">
                        <include name="*.jar"/>
                    </fileset>
           	    </classpath>


    	    </javac>

            <path id="launchclasspath">
                <pathelement location="${fvtBaseDir}/build/anttaskpatchclasses"/>
                <pathelement location="${fvtBaseDir}/common/jars/twas/urlprotocols.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/JSTAF.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/setenvtask.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/fattest.simplicity.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/public.api.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/provider.api.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/provider.wsadmin.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/provider.rxa.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/jiiws.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/jlanclient.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/remoteaccess.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/ssh.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/junit.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/jsse.jar" />
                <pathelement location="${fvtBaseDir}/common/jars/js.jar" />
                <fileset dir="${ant.home}/lib">
                    <include name="*.jar"/>
                </fileset>
                <!-- JDK tools jar -->
                <pathelement location="${tools.jar.path}" />
    <!--            <fileset dir="${washome}/bin/jaxws/tools">
                    <include name="ws-wsgen.jar"/>
                    <include name="ws-wsimport.jar"/>
                </fileset>
                <fileset dir="${washome}/lib">
                    <include name="com.ibm.ws.jaxws.tools.*.jar"/>
                    <include name="com.ibm.ws.jaxb.tools.*.jar"/> 
                </fileset>-->
                <fileset dir="${fvtBaseDir}/common/jars/twas">
                    <include name="*.jar"/>
                </fileset>
                <pathelement location="${fvtBaseDir}/common/jars/ibmjdk/xml.jar" />
            </path>
            <property name="ref.to.envclasspath" refid="launchclasspath" />
            <mkdir dir="${fvtBaseDir}/results" />
            <echo message="Save RTC build properties into file ${fvtBaseDir}/results/${groupingTarget}_build.properties" />
            <echoproperties destfile="${fvtBaseDir}/results/${groupingTarget}_build.properties" />
            <!--
        	<available file="${libertyInstallPath}" property="liberty.dir.present1" />
        	<available file="./${libertyInstallPath}" property="liberty.dir.present2" />
        			
        	<if>
        		<equals arg1="true" arg2="${liberty.dir.present1}" />
        	    <then>
        	        <echo message="use the default dir for libertyInstallPath: ${libertyInstallPath}" />
        		</then>
        	    <else>
        	        <if>
        				<equals arg1="true" arg2="${liberty.dir.present2}" />
        				<then>
        					<propertyregex property="fvtBaseDir.replace" input="${fvtBaseDir}" regexp='\\' replace="/"/>
        					<replace file="${fvtBaseDir}/bootstrapping.properties" token="libertyInstallPath=/wlp" value="libertyInstallPath=${fvtBaseDir.replace}${libertyInstallPath}"/>
        				</then>
        	            <else>
        	                 <echo message="Failed update libertyInstallPath" />
        	             </else>
        	         </if>
        	     </else>
        	 </if>
        	-->
        	<echo message="Launching java process to run jaxws_fat target=${groupingTarget}..." />
            <java classname="org.apache.tools.ant.launch.Launcher" classpathref="launchclasspath" dir="${fvtBaseDir}" fork="true" spawn="false" maxmemory="1024m" failonerror="false" taskname="migrated.tWAS.websvcs.fvt">
                <env key="JAVA_HOME" value="${java.home}/../" />
                <env key="JUNIT_HOME" value="${fvtBaseDir}/common/jars" />
                <env key="ANT_OPTS" value="-DFVT.base=${fvttop} -DWAS.base.dir=${washome} -Djava.endorsed.dirs=${fvtBaseDir}/common/jars/endorsed" />
                <env key="FVT_TOP" value="${fvttop}" />
                <env key="WAS_TOP" value="${washome}" />
                <env key="ANT_HOME" value="${ant.home}" />
                <env key="PATH" value="${ant.home}/bin${path.separator}${java.home}/bin${path.separator}${env.PATH}" />
                <env key="CLASSPATH" path="${ref.to.envclasspath}:${env.CLASSPATH}" />
                <jvmarg value="${test.permgen}" />
                <jvmarg value="-Xdebug" />
                <jvmarg value="-Xrunjdwp:transport=dt_socket,address=5006,server=y,suspend=n" />
                <jvmarg value="-Djava.endorsed.dirs=${fvtBaseDir}/common/jars/endorsed" />
                <sysproperty key="javax.xml.transform.TransformerFactory" value="org.apache.xalan.processor.TransformerFactoryImpl" />
            	<sysproperty key="javax.xml.accessExternalSchema" value="all" />
                <arg value="-Dfvt.top=${fvttop}" />
                <arg value="-Dbuild.number=${buildnumber}" />
                <arg value="-Dfe.name=${fename}" />
                <arg value="-DWAS.base.dir=${washome}" />
                <arg value="-DFVT.base.dir=${fvtBaseDir}" />
                <arg value="-DsimplicityConfigProps=${fvtBaseDir}/simplicityConfig.props" />
                <arg value="-DbootstrappingPropsFile=${fvtBaseDir}/bootstrapping.properties" />
                <arg value="-buildfile" />
                <arg file="${fvtBaseDir}/buildTest.xml" />
                <arg value="${groupingTarget}" />
                <arg value="-Dbasedir=${fvtBaseDir}" />
            	<arg value="-Dliberty.path=${liberty.path}" />
            </java>
        </sequential>
    </macrodef>

    <echo message="fat.test.mode=${fat.test.mode}" />
    <condition property="should.run.full.fat">
        <and>
            <isset property="fat.test.mode"/>
		 	<not>
				<equals arg1="${fat.test.mode}" arg2="lite" casesensitive="false" trim="true" />
			</not>
        </and>
    </condition>
    <echo message="should.run.full.fat=${should.run.full.fat}" />

    <!-- For Liberty FULL FAT-->
    <property name="liberty.happypath" value="annotations/bindingtype/checkdefaults/**,jaxb/types/**,jaxws/defaultpackage/**,jaxws/proxy/soap12/**,jaxws22/mimecontent/**" />

    <!-- If these are updated, the patternset values in build-test.xml will need to be updated
    to either make sure we actually have the files we care about, or to avoid shipping around 
    source we don't need -->
    <property name="liberty.runable" value="annotations/bindingtype/checkdefaults/**,jaxb/types/**,jaxws/defaultpackage/**,jaxws/proxy/soap12/**,jaxws22/mimecontent/**" />

    <property name="liberty.excluded" value="annotations/ammfilter/**,annotations/scanning/**,jaxws/exceptions/**,jaxws/osgiclient/**,wsdeploy/jython/**,jaxb/scripts/**,jaxws/threadcontext/**,jaxws/provider/string/**,jaxws/badproxy/**,jaxws/provider/omelementsoapfault/**,jaxws/provider/omelementmtom/**,jaxws/provider/omelement/**,jaxws/handlerextensions/**" />

    <!-- This list shall shrink gradually till empty once all mac related test defects are fixed -->
	<!-- 2013-04-10 results -->
    <property name="liberty.mac.remained.failures" value="annotations/jaxwstooling/**,annotations/oneway/**,annotations/reqrespwrappers/**,annotations/soapbinding/**,annotations/webendpoint/**,annotations/webmethod/**,annotations/webresult/**,annotations/webservice/**,mtom/**,mtom21/threshold/**,saaj/**" />

    <!-- This list shall shrink gradually till empty once all windows related test defects are fixed -->
	<!-- 2013-04-10 results -->
    <property name="liberty.windows.remained.failures" value="annotations/handlerchain/**,annotations/partialwsdl/**,annotations/resource/**,annotations/webparam/**,annotations/webresult_g2/**,annotations/webservice_g2/**,annotations/webserviceprovider/**,faultbean/**,jaxb/types/**,jaxws22/**,jaxws/badprovider/**,mtom/**,mtom21/**" />

    <target name="define-libertyFullFAT" if="should.run.full.fat">
        <!-- Set the slice.properties file -->
        <copy overwrite="yes" file="${fvtBaseDir}/common/files/slice.properties" tofile="${fvtBaseDir}/slice.properties">
            <filterset id="replace.filter.set1">
                <filter token="test.name.value" value="${liberty.runable}" />
                <filter token="excluded.test.name.value" value="${liberty.excluded}" />
                <filter token="not.excluded.value" value="" />
                <filter token="test.name.delimiter.value" value="," />
                <filter token="release.filter.value" value="**" />
                <filter token="server.setup.to.run.value" value="setupServer-basic" />
            </filterset>
        </copy>
        <echo message="slice.properties file has been updated for liberty Full FAT run" />
    </target>

</project>
