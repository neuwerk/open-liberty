<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml">
        <!ENTITY properties SYSTEM "../../xmls/properties.xml">
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml">
        <!ENTITY targets SYSTEM "../../xmls/targets.xml">
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml">
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
]>

<!--
     1.2, 7/26/10
    
    Change History:
    Date       UserId              Feature/Defect          Description
    ****************************************************************************
    11/18/09   jtnguyen            F743-17947-02           New file
    07/26/10   jtnguyen            658639.1                Add policy with all permission granted
-->


<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="jaxwsejb31Singleton/depdesc/wsfvt/test"/>
  <property name="verbose.output" value="false" />

     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
   --> 
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
    <dirset dir="${FVT.build.classes.dir}">
       <include name="jaxwsejb31Singleton/depdesc/wsfvt/client"/>            
    </dirset>
  </path>
  
  
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/jaxwsejb31Singleton"/>
    <delete file="${FVT.build.lib.dir}/jaxwsejb31Singleton-EjbDepdesc.war"/>
    <delete file="${FVT.build.installableApps.dir}/jaxwsejb31Singleton-EjbDepdesc.ear"/>
  </target>
  
                                                  
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/> 
  
             
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">

    <!-- all server classes and wsdl for packaging EAR file jaxwsejb31Singleton-EjbDepdesc.ear 
         are under ${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc
    -->
                                
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc"
           destdir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/server/*.java"/>
      
    </javac>
    
    <!-- copy server's source to classes directory for debugging -->
    <copy todir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/jaxwsejb31Singleton/depdesc/wsfvt/server">
          <fileset dir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc/wsfvt/server">
             <include name="*.java" />
          </fileset>
    </copy>
    
 
    <!-- wsgen - ="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc" -->
      
        <wsgen genwsdl="true"
               keep="true"
               verbose="true"
               destdir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc"
               resourcedestdir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc"
               sei="jaxwsejb31Singleton.depdesc.wsfvt.server.EjbDepdesc">
            <classpath>
                <pathelement location="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc" />
                <path refid="classpath" />
            </classpath>
        </wsgen>


        <mkdir dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/wsdl" />

    <!-- Move the wsdl and xsd  from FVT.build.classes.dir to wsdl directory-->
    
        <copy todir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/wsdl">
            <fileset dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </fileset>
        </copy>

        <delete file="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/EjbDepdescService.wsdl"/>
        <delete file="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/EjbDepdescService_schema1.xsd"/>

        <!-- Get the cells config info -->
        <readCellConfig prefix="server1"
                        key="defaultServer"
                        verbose="${verbose.output}" />

        <replace file="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/wsdl/EjbDepdescService.wsdl"
                 value="http://${server1.hostName}:${server1.WC_defaulthost}/jaxwsejb31Singleton-EjbDepdesc/EjbDepdescService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
        </replace>
        
    <!-- create JAR -->
     
        <jar jarfile="${FVT.build.lib.dir}/jaxwsejb31Singleton-EjbDepdesc.jar">
            <fileset dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc">
                <include name="**/*class" />
                <include name="**/*java" />
            </fileset>
            <zipfileset dir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc/etc/" prefix="META-INF/">
                <include name="ejb-jar.xml" />
            </zipfileset>
            <zipfileset dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/wsdl"
                        prefix="META-INF/wsdl">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </zipfileset>
        </jar>

    <!-- create  EAR  jwsejb30-depdesc-ejbjar-ejbrefchecker -->
    
        <ear earfile="${FVT.build.installableApps.dir}/jaxwsejb31Singleton-EjbDepdesc.ear"
             appxml="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc/etc/application.xml">
            <fileset dir="${FVT.build.lib.dir}">
                <include name="jaxwsejb31Singleton-EjbDepdesc.jar" />
            </fileset>
            <metainf dir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc/etc">
				<include name="was.policy" />
			</metainf>
        </ear>
      
  </target>
    
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->                               
  <target name="client" depends="setenv">
  
      
  </target>
                            
                            
  <!-- The tesst target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv, client">
  
     <!-- need  artifacts from wsdl for EjbDepdesService -->
     
    <mkdir dir="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/wsfvt/test"/>

    <!-- use wsdl from build location ${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/wsdl -->
    <wsimport                 
         wsdl="${FVT.build.classes.dir}/jaxwsejb31Singleton/depdesc/ejbdepdesc/wsdl/EjbDepdescService.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         verbose="true"                           
         package="jaxwsejb31Singleton.depdesc.wsfvt.test"  
         keep="true"
         sourcedestdir="${FVT.build.classes.dir}">     
    </wsimport>
                  

    <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="componentClasspath"/>
      <include name="**/test/*.java"/>
    </javac>
      
  </target>         
  
             
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
    <!--
		   we only need to run endpoint enabler, no need to run ejbdeploy tool for ejb 3.0+             
		 -->
    <target name="preinstall"
            depends="setenv"
            description=" performs endptenabler for the ear file">
            
        <!--<endpointenable earfile="${FVT.build.installableApps.dir}/jaxwsejb31Singleton-EjbDepdesc.ear" />-->
              
    </target>
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc/installTest.xml"
         dir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc/uninstallTest.xml"
         dir="${FVT.base.dir}/src/jaxwsejb31Singleton/depdesc">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
