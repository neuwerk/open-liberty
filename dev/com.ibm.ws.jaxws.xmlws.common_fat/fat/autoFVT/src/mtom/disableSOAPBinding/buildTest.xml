<?xml version="1.0"?>   
                  
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml"><!-- file:34 -->
        <!ENTITY properties SYSTEM "../../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml"><!-- file:31 -->
        <!ENTITY targets SYSTEM "../../xmls/targets.xml"><!-- file:33 -->
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml"><!-- file:34 -->
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml"><!-- file:47 -->
]>

<!--
   1.0   
 Change History:
 Date     UserId      Defect          Description
 09/25/06 jtnguyen    LIDB3402-07.01  New File
 11/21/06 jtnguyen    407277          Fixed to build on Linux
 01/22/07 jtnguyen    416083          Changed package names to lowercase in wsimport cmd
 02/02/07 jtnguyen    418353          Added -extension to wsimport for soap12 wsdl
 03/02/07 jtnguyen    423452          Changed port reference for cross-platform 
 06/27/07 jtnguyen    448549          Included only MTOM classes from org.test.mtom* into WAR
-->
<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="mtom/disableSOAPBinding/wsfvt/test"/>
  
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
    <dirset dir="${FVT.build.classes.dir}">
       <include name="mtom/disableSOAPBinding/wsfvt/client"/>            
    </dirset>
  </path>
    
  <!-- This path id is to include classpath & classes produced by wsimport tool -->    
  <path id="orgclasspath">
     <path refid="classpath"/>
     <dirset dir="${FVT.build.classes.dir}">
         <include name="mtom/disableSOAPBinding/wsfvt/server"/>
     </dirset>           
  </path>
 
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/mtom/disableSOAPBinding"/>
    <mkdir dir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"/>
    <mkdir dir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/client"/>
    <mkdir dir="${FVT.build.classes.dir}"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/mtom/disableSOAPBinding" quiet="true"/>
    <delete quiet="true">
      <fileset dir="${FVT.build.classes.dir}/org/test/mtom" includes="DisableSB*/*"/>
    </delete>
    
    <delete dir="${FVT.build.work.dir}/mtom/disableSOAPBinding" quiet="true"/>
    <delete file="${FVT.build.lib.dir}/DisableSB.war" quiet="true"/>
    <delete file="${FVT.build.installableApps.dir}/DisableSB.ear" quiet="true"/>
  </target>
  
                                                  
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/> 
  
             
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">

         
    <!-- each wsdl needs to have a separate wsimport since artifacts will specify the wsdl,service names -->
    <!-- all packages created from wsimport have prefix = org.test.mtom.disablesb -->
          
    <!-- wsimport for mime type = image/jpeg -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/JAXBImageJpeg.wsdl"            
         destdir="${FVT.build.classes.dir}"  
         sourcedestdir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"                                                          
         verbose="true" 
         package="org.test.mtom.disablesb_imagejpeg">     
    </wsimport>

    <!-- wsimport for mime type = image/jpeg, with SOAP12 -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/JAXBImageJpegSOAP12.wsdl"            
         destdir="${FVT.build.classes.dir}"                                       
         sourcedestdir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"                     
         verbose="true" 
         extension="true" 
         package="org.test.mtom.disablesb_imagejpegsoap12">
    </wsimport>
    
    <!-- wsimport for mime type = */* -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxy.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         sourcedestdir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"
         verbose="true" 
         package="org.test.mtom.disablesb_proxy"> 
    </wsimport>
    
    <!-- wsimport for mime type = */*, with SOAP12 -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxySOAP12.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         sourcedestdir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"
         verbose="true" 
         extension="true" 
         package="org.test.mtom.disablesb_proxysoap12">  
    </wsimport>
    
    <!-- wsimport for mime type = */*, with SOAP11 for DisableSBProxyDataHandlerService-->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxyDataHandler.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         sourcedestdir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"
         verbose="true" 
         package="org.test.mtom.disablesbproxy_datahandler">  
    </wsimport>
    
    <!-- wsimport for mime type = */*, with SOAP12 DisableSBProxyDataHandlerSOAP12Service-->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxyDataHandlerSOAP12.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         sourcedestdir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/server"
         verbose="true" 
         extension="true" 
         package="org.test.mtom.disablesbproxysoap12_datahandler">  
    </wsimport>

                                
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/mtom/disableSOAPBinding"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
 	       source="${build.tests.with.java.level}"
 	       target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/server/*.java"/>
      <exclude name="**/server/org/**/*.java"/>
    </javac>
      
    <war warfile="${FVT.build.lib.dir}/DisableSB.war"
         webxml="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/dd/web.xml">
            
      <webinf dir="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc">
        <include name="wsdl/*.wsdl"/>
        <include name="wsdl/*.xsd"/> 
      </webinf>
      
      <classes dir="${FVT.build.classes.dir}">
        <include name="mtom/disableSOAPBinding/wsfvt/server/**/*.class"/>
        <include name="org/test/mtom/disablesb*/*.class"/>
        <exclude name="org/test/mtom/disablesb*/*Service.class"/>

        
      </classes>
      
    </war>
    
    <ear earfile="${FVT.build.installableApps.dir}/DisableSB.ear" 
         appxml="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/dd/application.xml">
      <fileset dir="${FVT.build.lib.dir}" includes="DisableSB.war"/>
    </ear>
    
  </target>
    
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->                               
  <target name="client" depends="setenv">
 
     <echo message="Running wsimport"/>

    <!-- wsimport for mime type = image/jpeg -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/JAXBImageJpeg.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         package="org.test.mtom.disablesb_imagejpeg">
    </wsimport>
    
    <!-- wsimport for mime type = image/jpeg, with SOAP12 -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/JAXBImageJpegSOAP12.wsdl"            
         destdir="${FVT.build.classes.dir}"                                                            
         extension="true" 
         package="org.test.mtom.disablesb_imagejpegsoap12">
    </wsimport>

    <!-- wsimport for mime type = */* -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxy.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         package="org.test.mtom.disablesb_proxy">  
    </wsimport>

    <!-- wsimport for mime type = */*, with SOAP12 -->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxySOAP12.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         extension="true" 
         package="org.test.mtom.disablesb_proxysoap12">
    </wsimport>
    
         <!-- wsimport for mime type = */*, with SOAP11 for DisableSBProxyDataHandlerService-->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxyDataHandler.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         package="org.test.mtom.disablesbproxy_datahandler">  
    </wsimport>
    <!-- wsimport for mime type = */*, with SOAP12 DisableSBProxyDataHandlerSOAP12Service-->    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom/disableSOAPBinding/etc/wsdl/DisableSBProxyDataHandlerSOAP12.wsdl"            
         destdir="${FVT.build.classes.dir}"                                 
         extension="true" 
         package="org.test.mtom.disablesbproxysoap12_datahandler">  
    </wsimport>

    <!-- read Cell config -->
    <readCellConfig prefix="server1" key="defaultServer" verbose="false"/>

    <!-- <mkdir dir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/client"/>  -->
    <copy todir="${FVT.build.work.dir}/mtom/disableSOAPBinding/wsfvt/client" overwrite="yes" failonerror="false">
      <fileset dir="${FVT.base.dir}/src/mtom/disableSOAPBinding/wsfvt/client">
        <include name="*.java"/>
      </fileset>
   
      <filterset id="replace.filter.set1">
        <filter token="REPLACE_WITH_HOST_NAME" value="${server1.hostName}"/>
        <filter token="REPLACE_WITH_PORT_NUM"  value="${server1.WC_defaulthost}"/>
      </filterset>
    </copy>
         

    <!-- copy resource (xml, image, etc) files -->       
    <copy todir="${FVT.build.classes.dir}" overwrite="yes" failonerror="false">
      <fileset dir="${FVT.base.dir}/src/mtom/disableSOAPBinding/wsfvt/client">
         <include name="*.xml"/> 
         <include name="*.jpeg"/>  
         <include name="*.gif"/> 
         <include name="*.txt"/> 
         <include name="*.xsd"/>
      </fileset>

     </copy>
      
    <javac compiler="modern" srcdir="${FVT.build.work.dir}/mtom/disableSOAPBinding"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/client/*.java"/>
      <exclude name="**/client/org/**/*.java"/>

    </javac>
      
  </target>
                            
                            
  <!-- The client target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv, client">
  
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/mtom/disableSOAPBinding"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/test/*.java"/>
    </javac>
      
  </target>         
  
             
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
  <target name="preinstall" depends="setenv">
  </target>         
  
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/mtom/disableSOAPBinding/installTest.xml"
         dir="${FVT.base.dir}/src/mtom/disableSOAPBinding">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/mtom/disableSOAPBinding/uninstallTest.xml"
         dir="${FVT.base.dir}/src/mtom/disableSOAPBinding">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
