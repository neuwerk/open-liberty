<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml"><!-- file:34 -->
        <!ENTITY properties SYSTEM "../../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml"><!-- file:31 -->
        <!ENTITY targets SYSTEM "../../xmls/targets.xml"><!-- file:33 -->
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml"><!-- file:34 -->
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml"><!-- file:47 -->
]>

<!-- 1.1, 5/23/06

     Description: Build file for the WAS Integration Deploy test.
     
     Date        Author       Feature/Defect          Description
     05/23/2006  ulbricht     368616                  New File
     06/27/2011  btiffany     PM37820.FVT             update for new test
-->
<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="soap/test"/>
  
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>
     
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/soap/test"/>
    <mkdir dir="${FVT.build.classes.dir}/soap/test"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/soap/test"/>
    <delete dir="${FVT.build.work.dir}/soap/test"/>
  </target>
  
                                                  
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, compile, preinstall"/>  
     
  
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">
  </target>
    
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->                               
  <target name="client" depends="setenv">
  </target>
                            
                            
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->                               
  <target name="resource" depends="setenv">
		<!-- copy client resource files -->
  </target>
                            
                            
  <!-- The client target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="compile" depends="setenv, client, resource">
  
    <mkdir dir="${FVT.build.work.dir}/soap/test"/>
    <mkdir dir="${FVT.build.work.dir}/com/ibm/ws/saaj"/>

    <copy todir="${FVT.build.work.dir}/soap/test/" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/soap/test/">
        <include name="**/*.java"/> 
      </fileset>
      <filterset id="replace.filter.set1">
        <filter token="REPLACE_WITH_HOST_NAME" value="${new.default.host}"/>
        <filter token="REPLACE_WITH_PORT_NUM"  value="${new.wc.defaulthost}"/>
      </filterset>
    </copy>

    <copy todir="${FVT.build.work.dir}/com/ibm/ws/saaj" 
          overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/provider/com/ibm/ws/saaj">
        <include name="*.java"/> 
      </fileset>
    </copy>

    <copy todir="${FVT.build.work.dir}/saaj/client/util" 
          overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/client/util">
        <include name="*.java"/> 
      </fileset>
      <filterset id="replace.filter.set1">
        <filter token="REPLACE_WITH_HOST_NAME" value="${new.default.host}"/>
        <filter token="REPLACE_WITH_PORT_NUM"  value="${new.wc.defaulthost}"/>
      </filterset>
    </copy>
    
     <echo message="compile pm37820 test" /> 
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/soap/test/pm37820"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/*.java"/>      
    </javac>

    <echo message="compile soap/test *.java" />
    <javac compiler="modern" srcdir="${FVT.build.work.dir}/"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
      	   source="${build.tests.with.java.level}"
      	   target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="com/ibm/ws/saaj/*.java"/>
      <include name="saaj/client/**/*.java"/>
      <include name="soap/test/**/*.java"/>
    </javac>
    
   
  </target>         
  
             
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
  <target name="preinstall" depends="setenv">
  </target>         
  
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
	 <ant antfile="${FVT.base.dir}/src/soap/test/installTest.xml"
		 dir="${FVT.base.dir}/src/soap/test">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
	 <ant antfile="${FVT.base.dir}/src/soap/test/uninstallTest.xml"
		 dir="${FVT.base.dir}/src/soap/test">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
