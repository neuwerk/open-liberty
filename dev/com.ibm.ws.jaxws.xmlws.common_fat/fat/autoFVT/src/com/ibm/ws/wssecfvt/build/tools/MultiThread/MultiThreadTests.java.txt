/*
 *
 * %i%, 5/2/12, autoFVT/src/com/ibm/ws/wssecfvt/build/tools/MultiThread/MultiThreadTests.java.txt, WAS.wssecurity.fvt, WAS85.FVT, cf011231.01
 *
 * COMPONENT_NAME: WAS.webservices.fvt
 *
 * IBM Confidential OCO Source Material
 * 5639-D57, 5630-A36, 5630-A37, 5724-D18, 5724-J08 (C) COPYRIGHT International Business Machines Corp. 2011
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 *
 * Date      Fea/Def       Author     Description
 * --------  ---------     --------   ----------------------------------------------------------
 * 10/21/11               gkuo        created for testing MultiThread test
 */

package wssecfvt.main.xmlsig2.wssecfvt.test;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import com.ibm.ws.wssecfvt.build.tools.MultiThread.*;

/*
 * Testing MultiThreadTests
 *  This will take about 180 + 100 + 180 + 100 + (180 + 120 ) = 860 seconds (14 - 15 minutes)
 */
public class MultiThreadTests extends TestCase {
    
    /**
     * Class constructor requiring a String parameter
     * specifying the name of the test to run.
     * @param name Name of test to run.
     */
    public MultiThreadTests(String name) {
	  super(name);
    }

    /**
     * This method will run tests specified from the suite
     * method using the text user interface TestRunner.
     * @param args Command line arguments
     */
    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    /**
     * The suite method returns the tests to run from
     * this suite. The MainXmlSig2Tests class is specified
     * which means all methods starting with "test" will be
     * be run.
     * @return A Test object containing tests to be run
     */
    public static Test suite() {
        return new TestSuite(wssecfvt.main.xmlsig2.wssecfvt.test.MultiThreadTests.class); 
    }



    /**
     *  test 2 thread positive expect it complete successfully
     *  Testing time ought to be around 180 seconds
     */
    public void test_2ThreadPositive() {
        System.out.println( "*********************test_2ThreadPositive*******" );
        MultiThreadExecutor mte = new MultiThreadExecutor();
        mte.addTester( new PTester( "Positive Tester 1st" ));
        mte.addTester( new PTester( "Positive Tester 2nd" ));
        boolean bSucceeded = mte.executeTests(
                                                3,   // int iMaxErrors. terminate test if too many errors 
                                                180, // run 3 minutes (int iTestingSeconds) 
                                                120 // wait 2 more minute. If not completed consider it's hang (int iConsideredHangSeconds )
                                             );
        assertTrue( "Positive test do not passed", bSucceeded );
                                                       
	    return;

    }

    /**
     *  test 3 thread negative expect expecting Exception
     *  Testing time ought to be around 300 seconds (180 n+120)
     */
    public void test_3ThreadHang() {
        System.out.println( "*********************test_3ThreadHang*******" );
        MultiThreadExecutor mte = new MultiThreadExecutor();
        mte.addTester( new HangTester( "Hang Tester 1st" ));
        mte.addTester( new HangTester( "Hang Tester 2nd" ));
        mte.addTester( new HangTester( "Hang Tester 3rd" ));
        boolean bSucceeded = mte.executeTests(
                                                2,   // int iMaxErrors. terminate test if too many errors 
                                                180, // run 3 minutes (int iTestingSeconds) 
                                                120  // wait 2 more minute. If not completed consider it's hang (int iConsideredHangSeconds )
                                             );
        // Let's expect it failed
        assertTrue( "Hang test passed unexpectedly", !bSucceeded );
                                                       
	    return;

    }


    /**
     *  test 3 thread negative expect it failed and terminated earlier
     *  Testing time ought to be around 100 seconds
     */
    public void test_3ThreadNegative_Earlier() {
        System.out.println( "*********************test_3ThreadNegative_Earlier*******" );
        MultiThreadExecutor mte = new MultiThreadExecutor();
        mte.addTester( new NTester( "Negative Tester(1)1st" ));
        mte.addTester( new NTester( "Negative Tester(1)2nd" ));
        mte.addTester( new NTester( "Negative Tester(1)3rd" ));
        boolean bSucceeded = mte.executeTests(
                                                2,   // int iMaxErrors. terminate test if too many errors 
                                                180, // run 3 minutes (int iTestingSeconds) 
                                                120 // wait 2 more minute. If not completed consider it's hang (int iConsideredHangSeconds )
                                             );
        // Let's expect it failed
        assertTrue( "Negative test passed unexpectedly", !bSucceeded );
                                                       
	    return;

    }

    /**
     *  test 32 thread negative expect it failed and terminated after all test completed
     *  Testing time ought to be around 180 seconds
     */
    public void test_2ThreadNegative() {
        System.out.println( "*********************test_2ThreadNegative*******" );
        MultiThreadExecutor mte = new MultiThreadExecutor();
        mte.addTester( new NTester( "Negative Tester(2)1st" ));
        mte.addTester( new NTester( "Negative Tester(2)2nd" ));
        boolean bSucceeded = mte.executeTests(
                                                20,   // int iMaxErrors. terminate test if too many errors 
                                                180, // run 3 minutes (int iTestingSeconds) 
                                                120 // wait 2 more minute. If not completed consider it's hang (int iConsideredHangSeconds )
                                             );
        // Let's expect it failed
        assertTrue( "Negative tests passed unexpectedly", !bSucceeded );
                                                       
	    return;

    }

    /**
      *  test 3 thread negative expect expecting Exception
     *  Testing time ought to be around 100 seconds
     */
    public void test_3ThreadException() {
        System.out.println( "*********************test_3ThreadException*******" );
        MultiThreadExecutor mte = new MultiThreadExecutor();
        mte.addTester( new ETester( "Exception Tester 1st" ));
        mte.addTester( new ETester( "Exception Tester 2nd" ));
        mte.addTester( new ETester( "Exception Tester 3rd" ));
        boolean bSucceeded = mte.executeTests(
                                                2,   // int iMaxErrors. terminate test if too many errors 
                                                180, // run 3 minutes (int iTestingSeconds) 
                                                120  // wait 2 more minute. If not completed consider it's hang (int iConsideredHangSeconds )
                                             );
        // Let's expect it failed
        assertTrue( "Exception tests passed unexpectedly", !bSucceeded );
                                                       
	    return;

    }


    boolean sleep( long millionSeconds ) throws Exception{
        try{
            Thread.currentThread().sleep( millionSeconds );
        } catch( InterruptedException e ){
            // Do not block the interruotedExce[tion. Throw it again
            // Because it's very likely caused by the ThreadPoolExecuror.shutdownNow()
            System.out.println( "***Exception:" + e.getClass().getName() );
            throw e;
        } catch( Exception e ){
            System.out.println( "***Exception:" + e.getClass().getName() );
        }
        return true;
    }

    // Positive Tester
    class PTester extends MTTester {
        int iCount = 0;
        public PTester(String strID ){
            super( strID );
        }
        public boolean runTest() throws Exception{ 
            iCount ++;
            sleep( 1000 );
            System.out.println( getID() + " slept 1 second well (" + iCount + ")"); 
            return true;
        }
    }

    // Negative Tester -- will fail every 100 seconds
    class NTester extends MTTester {
        int iCount = 0;
        public NTester(String strID ){
            super( strID );
        }
        public boolean runTest() throws Exception{ 
            iCount++;
            sleep( 1000 );

            if( iCount % 100 == 0 ){
                System.out.println( "Assume error because count is " + iCount );
                return false;
            } else {
                System.out.println( getID() + " slept well (" + iCount + ")"); 
                return true;
            }
        }
    }

    // Exception Tester -- will throw exception every 100 seconds
    class ETester extends MTTester {
        int iCount = 0;
        public ETester(String strID ){
            super( strID );
        }
        public boolean runTest() throws Exception{ 
            iCount++;
            sleep( 1000 );

            if( iCount % 100 == 0 ){
                System.out.println( getID() + " throws Exception (" + iCount + ")" ); 
                throw new Exception("ETester encounter Exception");
            } else{
                System.out.println( getID() + "slept (" + iCount + ")" ); 
                return true;
            }
        }
    }


    // Hang Tester -- will hang at the 100th test
    class HangTester extends MTTester {
        int iCount = 0;
        public HangTester(String strID ){
            super( strID );
        }
        public boolean runTest() throws Exception{ 
            iCount++;
            sleep( 1000 );
            if( iCount < 100 ) {
                System.out.println( getID() + " slept (" + iCount + ")" ); 
                return true;
            }

            // Let's hang here
            int iHangCnt = 0;
            System.out.println( getID() + " Let's hang here (" + iCount + ")" ); 
            while( true ){
                if( !sleep( 4000 ) ) break; // If sleep() is interrupted (by mainMTEThread), then terminate the hang
                iCount ++;
                System.out.print( "Hang("  + iCount + ")");
                iHangCnt ++;
                if( iHangCnt > 4){
                    System.out.println();
                    iHangCnt = 0;
                }
            }
            return false;
        }
    }
}
