<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../instance.xml"><!-- file:34 -->
<!ENTITY properties SYSTEM "../xmls/properties.xml"><!-- file:28 -->
<!ENTITY paths SYSTEM "../xmls/path_refs.xml"><!-- file:23 -->
<!ENTITY targets SYSTEM "../xmls/targets.xml"><!-- file:25 -->
<!ENTITY taskdefs SYSTEM "../xmls/taskdefs.xml"><!-- file:26 -->
<!ENTITY taskdefs_post_compile SYSTEM "../xmls/taskdefs_post_compile.xml"><!-- file:39 -->
]>

<!-- 
  @(#) 1.5 WautoFVT/src/jaxws/jaxws-commons.xml, WAS.websvcs.fvt, WSFPB.WFVT 8/24/06 10:31:09 [9/1/06 10:58:18]

  Description: Commons file for jax-ws tests, place all common imports
               and reusable macros here
 
  Date        Author       Feature/Defect          Description
  05/31/06    sedov        LIDB3296.42             New File
  09/20/06    sedov        LIDB3296.42.04          Added wsdl hint to ear-single-file
  11/27/06    sedov        D406253                 Added mkdir to propertyReplace
-->

<project name="jaxws_commons">

	<!-- These are XML entity refs.  Basically these statements cause the
	     files declared in the DOCTYPE at the top of the file to be imported
	     into this build file.
	-->   
	&instance;
	&properties;
	&paths;
	&targets;
	&taskdefs;
	&taskdefs_post_compile;
		
	<!-- binding file that is used to supplement the web.xml -->
	<property name="vendor.binding.file" value="" />

	<!-- servlet class used for receiving requests -->
	<property name="WSServletClass" value="com.ibm.ws.websvcs.transport.http.WASAxis2Servlet" />

	<path id="jaxws.classpath">
		<path refid="thinclientclasspath" />
	</path>

        <readCellConfig prefix="server1" key="defaultServer" verbose="true"/> 
	<!--
		Task used for replacing tokens within one property
		and setting the result to a new property
	-->
	<macrodef name="propertyReplace">
		<attribute name="property" />
		<attribute name="value" />
		<attribute name="replace-what" />
		<attribute name="replace-with" />
		<sequential>
	        <mkdir dir="${test.work.dir}" />
			<echo message="tmp.prop=@{value}"
				  file="${test.work.dir}/@{property}.tmp" />
			<replace file="${test.work.dir}/@{property}.tmp"
	              token="@{replace-what}" value="@{replace-with}" />
			<property file="${test.work.dir}/@{property}.tmp" />
			<delete file="${test.work.dir}/@{property}.tmp" />

			<property name="@{property}" value="${tmp.prop}" />
		</sequential>
	</macrodef>

	<!--
		Task used for somplifying deployment of single-port endpoints
	-->
	<macrodef name="ear-single-file">

		<!-- base name used for the test (e.g., jaxws.provider) -->
		<attribute name="base-test-name" />

		<!-- name of the test (e.g., BadPort) -->
		<attribute name="test-name" />

		<!-- a hit as to which wsdl to pull in template-soap11-wsdl or template-soap12-wsdl -->
		<attribute name="wsdl-protocol" default="soap11" />		
		
		<!-- vendonr binding impl class (e.g., com.ibm.ServiceImpl) -->
		<attribute name="endpoint-impl-class" />

		<!-- filter used to select the impl class (${component.name}/**/ServiceImpl.class) -->
		<attribute name="endpoint-impl-class-filter" />

		<!-- base wsdl location (e.g., c:\...\MyWsdl_ the rest
	        is fileld in by test-name) -->
		<attribute name="base-wsdl-location" />

		<!-- port qname (http://example.com) -->
		<attribute name="namespace" />

		<!-- src dir for template-* xml files -->
		<attribute name="src-xml-dir" />

		<!-- working dir for template-* xml files -->
		<attribute name="dst-xml-dir" />		
		
		<!-- additional class filters-->
		<element name="extra-class-filters" optional="yes" />

		<sequential>
			<delete quiet="true">
				<fileset dir="@{dst-xml-dir}" includes="**/*" />
			</delete>

			<delete dir="@{dst-xml-dir}" quiet="true" />
			<mkdir dir="@{dst-xml-dir}" />

			<!-- copy template web.xml -->
			<copy file="@{src-xml-dir}/template-web.xml" tofile="@{dst-xml-dir}/web.xml" filtering="true">

				<filterset>
					<filter token="servlet-class" value="${WSServletClass}" />
					<filter token="endpoint-impl-class" value="@{endpoint-impl-class}" />
					<filter token="test-name" value="@{test-name}" />
					<filter token="base-test-name" value="@{base-test-name}" />
				</filterset>
			</copy>

			<!-- copy template application.xml file -->
			<copy file="@{src-xml-dir}/template-application.xml" tofile="@{dst-xml-dir}/application.xml" filtering="true">

				<filterset>
					<filter token="base-test-name" value="@{base-test-name}" />
					<filter token="test-name" value="@{test-name}" />
				</filterset>
			</copy>

                         
			<!-- copy template wsdl file -->
			<copy file="@{src-xml-dir}/template-@{wsdl-protocol}-wsdl.wsdl" tofile="@{dst-xml-dir}/@{test-name}.wsdl" filtering="true">

				<filterset>
					<filter token="test-name" value="@{test-name}" />
					<filter token="namespace" value="@{namespace}" />
					<filter token="HOST" value="${server1.hostName}" />
					<filter token="PORT" value="${server1.WC_defaulthost}" />
				</filterset>
			</copy>

			<!-- make the war file -->
			<echo message="CP=@{endpoint-impl-class-filter}" />
			<war destfile="${FVT.build.lib.dir}/@{base-test-name}.@{test-name}.war" webxml="@{dst-xml-dir}/web.xml">
				<webinf dir="@{dst-xml-dir}" includes="${vendor.binding.file}" />
				<zipfileset dir="@{dst-xml-dir}" includes="@{test-name}.wsdl" prefix="WEB-INF/wsdl" />
				<classes dir="${FVT.build.classes.dir}">
					<include name="@{endpoint-impl-class-filter}" />
					<extra-class-filters />
				</classes>
			</war>

			<!-- make the ear file -->
			<ear earfile="${FVT.build.installableApps.dir}/@{base-test-name}.@{test-name}App.ear" appxml="@{dst-xml-dir}/application.xml">
				<fileset dir="${FVT.build.lib.dir}" includes="@{base-test-name}.@{test-name}.war" />
			</ear>
		</sequential>
	</macrodef>

	<!-- The install target will install the server side piece of the test
	     into WebSphere.  This target calls the installTest.xml file for
	     the test.
	-->
	<target name="install" depends="setenv">
		<ant antfile="${FVT.base.dir}/src/${componentName}/installTest.xml" dir="${FVT.base.dir}/src/${componentName}">
			<property name="install.mode" value="${rt.install.mode}" />
		</ant>
	</target>


	<!-- The uninstall target will uninstall the server side piece of the test
	 	 from WebSphere.  This target calls the uninstallTest.xml file for
		 the test.
	-->
	<target name="uninstall" depends="setenv">
		<ant antfile="${FVT.base.dir}/src/${componentName}/uninstallTest.xml" dir="${FVT.base.dir}/src/${componentName}">
			<property name="uninstall.mode" value="${rt.uninstall.mode}" />
		</ant>
	</target>

</project>
