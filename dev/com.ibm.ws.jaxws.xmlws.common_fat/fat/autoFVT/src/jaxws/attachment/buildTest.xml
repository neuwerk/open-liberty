<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml">
        <!ENTITY properties SYSTEM "../../xmls/properties.xml">
        <!ENTITY targets SYSTEM "../../xmls/targets.xml">
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml"> 
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
        <!ENTITY path_refs SYSTEM "../../xmls/path_refs.xml">
]>

<project name="build" default="buildall" basedir=".">
	&instance;
	&properties;
	&path_refs;
	&targets;
	&taskdefs;
	&taskdefs_post_compile;
	
	<property name="componentName"  value="jaxws/attachment"/>
	<property name="componentPath"  value="jaxws/attachment" />
	<property name="basedir" 		value="${FVT.base.dir}/src/jaxws/attachment" />
	<property name ="workdir"       value="${FVT.build.work.dir}/jaxws/attachment/" />
	<property name="host_name"		value="${server1.hostname}" />
	<property name="port_number"	value="${server1.WC_defaulthost}" />

	<path id="componentClasspath">
		<path refid="thinclientclasspath"/>
	</path>
	
	<property name="jarloc" refid="componentClasspath" />

	<echo message="${workdir}" />

	<!-- need junit.jar explicitly in the path for setup to run -->
	<path id="setupClasspath">
		<pathelement location="${FVT.base.dir}/common/jars/junit.jar"/>
		<path refid="classpath"/>
	</path>
	
	<target name="buildall" depends="setenv, clean, init, server, client, test" />
	
		<!-- The clean target will clean any files, classes, or directories
	       so that a new copy of the test can be built and run.
		-->                       
	 <target name="clean" depends="setenv">
	    <delete dir="${FVT.build.classes.dir}/jaxws/attachment"/>
		<delete file="${workdir}/**"/>
		<delete dir="${workdir}"/>
	    <delete file="${FVT.build.lib.dir}/**"/>
		<delete file="${FVT.build.installableApps.dir}/NullAttachApp.ear"/>
	</target>
	
	<target name="init" depends="setenv">
		<!-- component-init comes from targets.xml and makes the main directories	used by all tests.	-->
		<antcall target="component-init"/>
		<mkdir dir="${FVT.build.work.dir}/jaxws/attachment"/>
		<mkdir dir="${FVT.build.work.dir}/jaxws/attachment/server"/>
		<mkdir dir="${workdir}" />
		<mkdir dir="${FVT.build.lib.dir}/jaxws/attachment"/>
	</target>
	
	<target name="server" depends="setenv">
		<echo message="jaxws.attachment Building Server..." />
		
		<readCellConfig prefix="server1" key="defaultServer" verbose="true"/>
		
		<!-- copy server/common files -->
		<copy todir="${workdir}" overwrite="yes">
			<fileset dir="${basedir}/etc">
				<include name="*.wsdl" />
				<include name="*.xsd" />			
			</fileset>
		
			<fileset dir="${FVT.base.dir}/src">
				<include name="${componentName}/**/common/*.java" />
			<!--	<include name="${componentName}/**/server/*.java" /> -->
			</fileset>		
		</copy>
		
		<copy todir="${workdir}/server" overwrite="yes">
			<fileset dir="${basedir}/server">
				<include name="CheckAttachmentImpl.java" />	
				<include name="Get*.java" />
			</fileset>
		</copy>
		
		<replace file="${workdir}/CheckAttachmentService.wsdl" token="REPLACE_WITH_HOST_NAME" value="${server1.hostName}" />
		<replace file="${workdir}/CheckAttachmentService.wsdl" token="REPLACE_WITH_PORT_NUMBER" value="${server1.WC_defaulthost}" />		
		
		<wsimport debug="${debug}" fork="true"
			      destdir="${FVT.build.work.dir}"
				  sourcedestdir="${FVT.build.work.dir}"
			      wsdl="${workdir}/CheckAttachmentService.wsdl"
				  verbose="true" >
                  <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
		</wsimport>		

		<!-- the wsimport makes the attachment a Holder<byte[]> so it needs to be changed to Holder<DataHandler> and the proper import needs added -->
			<replace file="${FVT.build.work.dir}/jaxws/attachment/server/CheckAttachmentPortType.java" token="Holder&lt;byte[]&gt;" value="Holder&lt;DataHandler&gt;" />
			<replace file="${FVT.build.work.dir}/jaxws/attachment/server/CheckAttachmentPortType.java" token="import javax.xml.ws.Holder;" value="import javax.xml.ws.Holder;${line.separator}import javax.activation.DataHandler;" />
			
		<replace file="${workdir}/server/CheckAttachmentImpl.java" token="REPLACE_WITH_HOST_NAME" value="${server1.hostName}" />
		<replace file="${workdir}/server/CheckAttachmentImpl.java" token="REPLACE_WITH_PORT_NUMBER" value="${server1.WC_defaulthost}" />
		
		<!-- build server/common files -->
        <javac compiler="modern"
            fork="true"
            debug="${debug}"
            srcdir="${workdir}"
            destdir="${FVT.build.classes.dir}"
            includes="**/server/*.java,**/common/*.java"
            source="${build.tests.with.java.level}"
            target="${build.tests.with.java.level}"
            verbose="true">            
            <classpath >
                <path refid="componentClasspath"/>
            </classpath>
            <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
        </javac>

		<!-- generate web.xml -->
		<web-xml displayName="checkAttachmentService" version="current"
				 file="${FVT.build.work.dir}/jaxws/attachment/web.xml">
			<servlet servletClass="jaxws.attachment.server.CheckAttachmentImpl"
				     urlPattern="/CheckAttachmentImpl" />										
		</web-xml>		
		
		<!-- create a WAR file for regular tests  -->
		<war destfile="${FVT.build.lib.dir}/jaxws/attachment/attachment.war"
			  webxml="${FVT.build.work.dir}/jaxws/attachment/web.xml">
			
			<zipfileset dir="${basedir}/etc"
				includes="*.wsdl, *.xsd"
				prefix="WEB-INF/wsdl" />
			
			<!-- include server Impl source -->
			<zipfileset dir="${workdir}"
				includes="**/server/*PortImpl.java, **/common/*.java"
				prefix="WEB-INF/src" />		
			
			<!-- include server Impl classes -->
			<classes dir="${FVT.build.classes.dir}">
				<!-- only deploy the classes from server and common packages -->
				<include name="${componentName}/**/common/**/*.class" />
				<include name="${componentName}/**/server/**/*.class" />
				<!-- Service class is only useful to the client, it should be
					 excluded from the server deployment
				 -->
<!--				<exclude name="${componentName}/**/server/*Service.class" />				
-->			</classes>
		</war>
		
		<!-- generate application.xml -->
		<app-xml displayName="attachment" version="current"
			file="${workdir}/application.xml">	
			<webModule war="attachment.war" contextRoot="/attachment" />
		</app-xml>		
		
		<!-- package everything together -->
		<ear earfile="${FVT.build.installableApps.dir}/AttachCheckApp.ear"
		     appxml="${workdir}/application.xml">
			<fileset dir="${FVT.build.lib.dir}/jaxws/attachment" includes="attachment.war" />
			<metainf dir="${basedir}/etc">
				<include name="was.policy" />
			</metainf>
		</ear>		
	</target>
	
	<target name="client" depends="setenv">
		<copy todir="${workdir}/client" overwrite="yes">
			<fileset dir="${basedir}/client">
				<include name="*.java" />	
			</fileset>
		</copy>
		
		<replace file="${workdir}/client/NullAttachmentTestCaseClient.java" token="REPLACE_WITH_HOST_NAME" value="${server1.hostName}" />
		<replace file="${workdir}/client/NullAttachmentTestCaseClient.java" token="REPLACE_WITH_PORT_NUMBER" value="${server1.WC_defaulthost}" />
	
      <javac compiler="modern" srcdir="${workdir}/client/"
             destdir="${FVT.build.classes.dir}"
             deprecation="${deprecation}"
             debug="${debug}"
			 source="${build.tests.with.java.level}"
			 target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="NullAttachmentTestCaseClient.java" />
      </javac>
  </target>
  
  <target name="test" depends="setenv">
	<javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxws/attachment" 
		   destdir="${FVT.build.classes.dir}" 
		   deprecation="${deprecation}" 
		   debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
		   failonerror="${failonerror}"> 
		<classpath refid="classpath"/> 
		<include name="**/test/*.java"/> 
	</javac>
  </target>
  
  <target name="preinstall" depends="setenv">
  </target>
  
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxws/attachment/installTest.xml"
         dir="${FVT.base.dir}/src/jaxws/attachment">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxws/attachment/uninstallTest.xml"
         dir="${FVT.base.dir}/src/jaxws/attachment">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
</project>