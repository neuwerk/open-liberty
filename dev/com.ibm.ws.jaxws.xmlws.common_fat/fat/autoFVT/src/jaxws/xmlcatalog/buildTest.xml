<?xml version="1.0"?>

<!--
    %I, 6/30/09
    
    Change History:
    Date       UserId              Feature/Defect          Description
    ****************************************************************************
    06/29/2009 samerrel            552420                  New File
    
-->

<project default="buildall" basedir=".">
    <import file="../../xmls/common_imports.xml" />

    <!--
        This property should match the package name of the test class.  The
        property is used in the targets.xml file when running any of the
        component-run* targets for running a single test case class.
    -->
    <property name="componentName" value="jaxws/xmlcatalog/wsfvt/test" />

    <!-- 
        This path id is used in the targets.xml file when running any of
        the component-run* targets.  This allows setting the classpath 
        for an individual test.
    -->
    <path id="componentClasspath">
        <path refid="thinclientclasspath" />
    </path>

    <!-- 
        MY PROPERTIES
    -->
    <property name="subpath" value="jaxws/xmlcatalog" />
    <property name="src.dir" value="${FVT.base.dir}/src/${subpath}" />
    <property name="work.dir" value="${FVT.build.work.dir}/${subpath}" />

    <property name="hellowar" value="xmlcatalog-hellowar" />
    <property name="hellowar.work.dir" value="${work.dir}/hellowar" />
    <property name="helloejb" value="xmlcatalog-helloejb" />
    <property name="helloejb.work.dir" value="${work.dir}/helloejb" />

    <property name="hellowarclient" value="xmlcatalog-hellowarclient" />
    <property name="hellowarclient.work.dir" value="${work.dir}/hellowarclient" />
    <property name="helloejbclient" value="xmlcatalog-helloejbclient" />
    <property name="helloejbclient.work.dir" value="${work.dir}/helloejbclient" />


    <!-- =================================
          target: init
         ================================= -->
    <target name="init"
            depends="setenv"
            description="--> Creates initial directories needed for tests">
        <antcall target="component-init" />
        <mkdir dir="${work.dir}" />
        <mkdir dir="${hellowar.work.dir}" />
        <mkdir dir="${helloejb.work.dir}" />
        <mkdir dir="${hellowarclient.work.dir}" />
        <mkdir dir="${helloejbclient.work.dir}" />

        <readCellConfig prefix="server1" key="defaultServer" verbose="${verbose}" />
    </target>

    <!-- ================================= 
          target: clean
         ================================= -->
    <target name="clean"
            description="--> clean any files, classes, or directories
                           so that a new copy of the test can be built and run">
        <delete dir="${work.dir}" />
        <delete dir="${FVT.build.classes.dir}/jaxws/xmlcatalog" />
        <delete file="${FVT.build.lib.dir}/${hellowar}.war" />
        <delete file="${FVT.build.installableApps.dir}/${hellowar}.ear" />
        <delete file="${FVT.build.lib.dir}/${helloejb}.jar" />
        <delete file="${FVT.build.installableApps.dir}/${helloejb}.ear" />
        <delete file="${FVT.build.lib.dir}/${hellowarclient}.war" />
        <delete file="${FVT.build.installableApps.dir}/${hellowarclient}.ear" />
        <delete file="${FVT.build.lib.dir}/${helloejbclient}.ear" />
        <delete file="${FVT.build.installableApps.dir}/${helloejbclient}.ear" />
    </target>

    <!-- =================================
          target: buildall
         ================================= -->
    <target name="buildall" depends="clean, init, server, client, test, preinstall" />

    <!-- ================================= 
          target: server
         
          The server target will build anything necessary for the server
          piece of the test.  Typically this target builds the server side
          EAR.
         ================================= -->
    <target name="server" depends="setenv" description="--> Build servers">
        <javac compiler="modern" srcdir="${src.dir}/wsfvt/service"
               destdir="${hellowar.work.dir}"
               deprecation="${deprecation}"
               debug="${debug}"
               verbose="${verbose}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <classpath refid="classpath" />
            <include name="HelloWar.java" />
        </javac>
        <wsgen genwsdl="true"
               keep="keep"
               verbose="${verbose}"
               destdir="${hellowar.work.dir}"
               resourcedestdir="${hellowar.work.dir}"
               sei="jaxws.xmlcatalog.wsfvt.service.HelloWar">
            <classpath>
                <pathelement path="${hellowar.work.dir}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
        <copy todir="${hellowar.work.dir}/wsdl">
            <fileset dir="${src.dir}/etc/hellowar" includes="*.wsdl,*.xsd" />
        </copy>
        <replace file="${hellowar.work.dir}/wsdl/HelloWarService.wsdl"
                 value="http://${server1.hostName}:${server1.WC_defaulthost}/xmlcatalog/hellowar/HelloWarService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
        </replace>
        <war destfile="${FVT.build.lib.dir}/${hellowar}.war"
             webxml="${src.dir}/etc/hellowar/web.xml">
            <classes dir="${hellowar.work.dir}" excludes="**/*.xsd,**/*.wsdl" />
            <zipfileset dir="${src.dir}/etc/hellowar"
                        prefix="WEB-INF/wsdl"
                        includes="*.xsd,*.wsdl" />
            <zipfileset dir="${src.dir}/etc/hellowar/"
                        prefix="WEB-INF/"
                        includes="jax-ws-catalog.xml" />
        </war>
        <ear destfile="${FVT.build.installableApps.dir}/${hellowar}.ear"
             appxml="${src.dir}/etc/hellowar/application.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="${hellowar}.war" />
        </ear>

        <javac compiler="modern" srcdir="${src.dir}/wsfvt/service"
               destdir="${helloejb.work.dir}"
               deprecation="${deprecation}"
               debug="${debug}"
               verbose="${verbose}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <classpath refid="classpath" />
            <include name="HelloEjb.java" />
        </javac>
        <wsgen genwsdl="true"
               keep="keep"
               verbose="${verbose}"
               destdir="${helloejb.work.dir}"
               resourcedestdir="${helloejb.work.dir}"
               sei="jaxws.xmlcatalog.wsfvt.service.HelloEjb">
            <classpath>
                <pathelement path="${helloejb.work.dir}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
        <copy todir="${helloejb.work.dir}/wsdl">
            <fileset dir="${src.dir}/etc/helloejb" includes="*.wsdl,*.xsd" />
        </copy>
        <replace file="${helloejb.work.dir}/wsdl/HelloEjbService.wsdl"
                 value="http://${server1.hostName}:${server1.WC_defaulthost}/xmlcatalog-helloejb/HelloEjbService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
        </replace>
        <jar destfile="${FVT.build.lib.dir}/${helloejb}.jar">
            <fileset dir="${helloejb.work.dir}"
                     includes="**/*.class,**/*.java"
                     excludes="**/*.xsd,**/*.wsdl" />
            <zipfileset dir="${helloejb.work.dir}/wsdl"
                        prefix="META-INF/wsdl"
                        includes="*.wsdl,*.xsd" />
            <zipfileset dir="${src.dir}/etc/helloejb" prefix="META-INF">
                <include name="ejb-jar.xml" />
                <include name="jax-ws-catalog.xml" />
            </zipfileset>
        </jar>
        <ear destfile="${FVT.build.installableApps.dir}/${helloejb}.ear"
             appxml="${src.dir}/etc/helloejb/application.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="${helloejb}.jar" />
        </ear>
    </target>

    <!-- ================================= 
          target: client
          
          The client target will build anything necessary for the client
          piece of the test.  This could just be compiling the client class
          or in the case of a managed client, building a client side EAR
          file.
         ================================= -->
    <target name="client" depends="setenv" description="--> Build clients">
        <wsimport keep="keep"
                  verbose="${verbose}"
                  extension="true"
                  catalog="${src.dir}/etc/hellowar/jax-ws-catalog.xml"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${hellowar.work.dir}/HelloWarService.wsdl">
        </wsimport>
        <wsimport keep="keep"
                  verbose="${verbose}"
                  extension="true"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${helloejb.work.dir}/HelloEjbService.wsdl">
        </wsimport>
        <javac compiler="modern" srcdir="${src.dir}/wsfvt/client"
               destdir="${hellowarclient.work.dir}"
               deprecation="${deprecation}"
               debug="${debug}"
               verbose="${verbose}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <classpath refid="classpath" />
            <classpath location="${work.dir}" />
            <include name="HelloWarClient.java" />
        </javac>
        <wsgen genwsdl="true"
               keep="keep"
               verbose="${verbose}"
               destdir="${hellowarclient.work.dir}"
               resourcedestdir="${hellowarclient.work.dir}"
               sei="jaxws.xmlcatalog.wsfvt.client.HelloWarClient">
            <classpath>
                <pathelement path="${hellowarclient.work.dir}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
        <war destfile="${FVT.build.lib.dir}/${hellowarclient}.war"
             webxml="${src.dir}/etc/hellowarclient/web.xml">
            <classes dir="${hellowarclient.work.dir}" excludes="**/*.wsdl,**/*.xsd" />
            <classes dir="${FVT.build.classes.dir}"
                     includes="jaxws/xmlcatalog/wsfvt/service/*.class" />
            <zipfileset dir="${hellowarclient.work.dir}"
                        prefix="WEB-INF/wsdl"
                        includes="*.wsdl,*.xsd" />
            <zipfileset dir="${hellowar.work.dir}/wsdl"
                        prefix="WEB-INF/wsdl"
                        includes="**/*.wsdl,**/*.xsd" />
            <zipfileset dir="${helloejb.work.dir}/wsdl"
                        prefix="WEB-INF/wsdl"
                        includes="**/*.wsdl,**/*.xsd" />
            <zipfileset dir="${src.dir}/etc/hellowarclient/" prefix="WEB-INF/">
                <include name="jax-ws-catalog.xml" />
            </zipfileset>
        </war>
        <ear destfile="${FVT.build.installableApps.dir}/${hellowarclient}.ear"
             appxml="${src.dir}/etc/hellowarclient/application.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="${hellowarclient}.war" />
        </ear>
        <javac compiler="modern" srcdir="${src.dir}/wsfvt/client"
               destdir="${helloejbclient.work.dir}"
               deprecation="${deprecation}"
               debug="${debug}"
               verbose="${verbose}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <classpath refid="classpath" />
            <classpath location="${work.dir}" />
            <include name="HelloEjbClient.java" />
        </javac>
        <wsgen genwsdl="true"
               keep="keep"
               verbose="${verbose}"
               destdir="${helloejbclient.work.dir}"
               resourcedestdir="${helloejbclient.work.dir}"
               sei="jaxws.xmlcatalog.wsfvt.client.HelloEjbClient">
            <classpath>
                <pathelement path="${helloejbclient.work.dir}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
        <jar destfile="${FVT.build.lib.dir}/${helloejbclient}.jar">
            <fileset dir="${helloejbclient.work.dir}"
                     excludes="**/*.xsd,**/*.wsdl"
                     includes="**/*.java,**/*.class" />
            <fileset dir="${FVT.build.classes.dir}">
                <include name="jaxws/xmlcatalog/wsfvt/service/*.class" />
            </fileset>
            <zipfileset dir="${helloejbclient.work.dir}"
                        prefix="META-INF/wsdl"
                        includes="**/*.xsd,**/*.wsdl" />
            <zipfileset dir="${hellowar.work.dir}/wsdl"
                        prefix="META-INF/wsdl"
                        includes="**/*.xsd,**/*.wsdl" />
            <zipfileset dir="${helloejb.work.dir}/wsdl"
                        prefix="META-INF/wsdl"
                        includes="**/*.xsd,**/*.wsdl" />
            <zipfileset dir="${src.dir}/etc/helloejbclient" prefix="META-INF">
                <include name="ejb-jar.xml" />
                <include name="jax-ws-catalog.xml" />
            </zipfileset>
        </jar>
        <ear destfile="${FVT.build.installableApps.dir}/${helloejbclient}.ear"
             appxml="${src.dir}/etc/helloejbclient/application.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="${helloejbclient}.jar" />
        </ear>
    </target>

    <!-- ================================= 
          target: test
              
          The test target will build anything necessary for the test
          piece of the test.  Often this will just include compiling the
          the JUnit test case file.
         ================================= -->
    <target name="test" depends="setenv" description="--> Build tests">
        <wsimport keep="keep"
                  verbose="${verbose}"
                  extension="true"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${hellowarclient.work.dir}/HelloWarClientService.wsdl">
        </wsimport>
        <wsimport keep="keep"
                  verbose="${verbose}"
                  extension="true"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${helloejbclient.work.dir}/HelloEjbClientService.wsdl">
        </wsimport>
        <javac compiler="modern" srcdir="${src.dir}/wsfvt/client"
               destdir="${FVT.build.classes.dir}"
               deprecation="${deprecation}"
               debug="${debug}"
               verbose="${verbose}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <classpath refid="classpath" />
            <include name="WSClient.java" />
        </javac>
        <javac compiler="modern" srcdir="${src.dir}/wsfvt/test"
               destdir="${FVT.build.classes.dir}"
               deprecation="${deprecation}"
               debug="${debug}"
               verbose="${verbose}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <classpath refid="classpath" />
            <include name="*.java" />
        </javac>
        <jar destfile="${FVT.build.lib.dir}/xmlcatalog-client.jar"
             basedir="${FVT.build.classes.dir}"
             includes="jaxws/xmlcatalog/**/*.class">

        </jar>
    </target>

    <!-- ================================= 
          target: preinstall
          
          The preinstall target will perform any tasks necessary before the
          application is installed into WebSphere.  This could include running
          ejbdeploy or endptenabler for an EAR that contains an EJB.
         ================================= -->
    <target name="preinstall"
            depends="setenv"
            description="--> Runs EJB deploy and/or Endpointenabler">
        <!--<endpointenable earfile="${FVT.build.installableApps.dir}/${helloejb}.ear" />
        <ejbdeploy inputEar="${FVT.build.installableApps.dir}/${helloejb}.ear"
                   workDir="${FVT.build.work.dir}"
                   outputEar="${FVT.build.installableApps.dir}/${helloejb}.temp.ear">
        </ejbdeploy>
        <move file="${FVT.build.installableApps.dir}/${helloejb}.temp.ear"
              tofile="${FVT.build.installableApps.dir}/${helloejb}.ear"
              overwrite="yes" />
        <endpointenable earfile="${FVT.build.installableApps.dir}/${helloejbclient}.ear" />
        <ejbdeploy inputEar="${FVT.build.installableApps.dir}/${helloejbclient}.ear"
                   workDir="${FVT.build.work.dir}"
                   outputEar="${FVT.build.installableApps.dir}/${helloejbclient}.temp.ear">
        </ejbdeploy>
        <move file="${FVT.build.installableApps.dir}/${helloejbclient}.temp.ear"
              tofile="${FVT.build.installableApps.dir}/${helloejbclient}.ear"
              overwrite="yes" />-->
    </target>

    <!-- ================================= 
          target: install
          
          The install target will install the server side piece of the test
          into WebSphere.  This target calls the installTest.xml file for
          the test.
         ================================= -->
    <target name="install" depends="setenv, preinstall" description="--> Installs the App">
        <ant antfile="${src.dir}/installTest.xml" dir="${src.dir}">
            <property name="install.mode" value="${rt.install.mode}" />
        </ant>
    </target>

    <!-- ================================= 
          target: uninstall 
          
          The uninstall target will uninstall the server side piece of the test
          from WebSphere.  This target calls the uninstallTest.xml file for
          the test.
             ================================= -->
    <target name="uninstall" depends="setenv" description="--> Uninstalls the App">
        <ant antfile="${src.dir}/uninstallTest.xml" dir="${src.dir}">
            <property name="uninstall.mode" value="${rt.uninstall.mode}" />
        </ant>
    </target>

</project>
