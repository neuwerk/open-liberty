<project name="jaxws.badproxy.macros" basedir=".">

         <readCellConfig prefix="server1" key="defaultServer" verbose="true"/> 	
	<!-- Macro used for tests that are single-wsdl/impl and require wsdl compile every time -->
	<macrodef name="ear-with-wsimport"> 		
		
	   <!-- base name used for the test (e.g., jaxws/badProvider/wsfvt) -->	   
	   <attribute name="base-test-dir" />		
		
	   <!-- base name used for the test (e.g., jaxws.badProvider.wsfvt) -->	   
	   <attribute name="base-test-package" />

	   <!-- base name used for the test (e.g., wsfvt.badProvider.jaxws) -->	   
	   <attribute name="base-test-namespace" />		

       <!-- name of the test (e.g., jaxws.badProxy) -->	   
	   <attribute name="base-test-name" />		
		
       <!-- name of the test (e.g., BadPort) -->	   
	   <attribute name="test-name" />	
		
	   <!-- src dir for template-* xml files -->
	   <attribute name="src-xml-dir" />

	 <!-- absolute path to the test's work directory (e.g., ${FVT.build.work.dir}/jaxws.dispatch -->
	   <attribute name="dst-xml-dir" />
	   
	   <!-- additional class filters-->
	   <element name="extra-class-filters" optional="yes"/>

	   <!-- additional things to include in the web-inf/wsdl dir -->
	   <element name="webinf-wsdl-includes" optional="yes"/>		

	   <!-- binding files to pass to wsimport -->
	   <element name="wsimport-bindings" optional="yes"/>			
		
	   <sequential>
	   	
	   		<echo message="Running ear-with-wsimport for @{test-name} test" />
	        <mkdir dir="@{dst-xml-dir}/@{test-name}"/>
		  
	   		<!-- copy template web.xml -->
		    <copy file="@{src-xml-dir}/template-web.xml"
				tofile="@{dst-xml-dir}/@{test-name}/web.xml"
				filtering="true">
				
			    <filterset>
			        <filter token="endpoint-impl-class" value="@{base-test-package}.server.@{test-name}BadPortImpl"/>
				    <filter token="test-name" value="@{test-name}"/>
				    <filter token="base-test-name" value="@{base-test-name}"/>
			    </filterset>				
		    </copy>
	   	
		   	<!-- copy template application.xml file -->
		    <copy file="@{src-xml-dir}/template-application.xml"
				tofile="@{dst-xml-dir}/@{test-name}/application.xml"
				filtering="true">
				
			    <filterset>
					<filter token="base-test-name" value="@{base-test-name}"/>					  
			    	<filter token="test-name" value="@{test-name}"/>
			    </filterset>				
		    </copy>
	   	
		   	<!-- copy template wsdl file -->
		    <copy todir="@{dst-xml-dir}/@{test-name}" filtering="true">
				
		    	<fileset dir="@{src-xml-dir}/">
		    		<include name="@{test-name}.wsdl" />
		    		<include name="@{test-name}.xml" />
		    		<include name="*.xsd" />
		    	</fileset>
		    
			    <filterset>
			    	<filter token="base-test-name" value="@{base-test-name}"/>
				    <filter token="test-name" value="@{test-name}"/>
					<filter token="namespace" value="http://@{test-name}.common.@{base-test-namespace}/"/>
					<filter token="HOST" value="${server1.hostName}" />
					<filter token="PORT" value="${server1.WC_defaulthost}" />
			    </filterset>				
		    </copy>		   	
	   	
	   		<!-- build the wsdl file with optional bindings -->
	   		<echo message="wsimport: @{dst-xml-dir}/@{test-name}/@{test-name}.wsdl" />
			<wsimport xendorsed="true" fork="true" verbose="${wsimport.verbose}"
				      keep="false"
		              extension="true"
				      destdir="${FVT.build.classes.dir}"
				      wsdl="@{dst-xml-dir}/@{test-name}/@{test-name}.wsdl">
				<wsimport-bindings />
                <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
			</wsimport>	
	   	
		   	<echo message="@{dst-xml-dir}" />
	   	
	        <javac compiler="modern"
	            fork="true"
	        	debug="${debug}"
	            srcdir="@{dst-xml-dir}"
	            destdir="${FVT.build.classes.dir}"
	            source="${build.tests.with.java.level}"
	            target="${build.tests.with.java.level}"
	            includes="**/server/**/@{test-name}*.java">
	            <classpath refid="componentClasspath"/>
                <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
	        </javac>
	   	
			<!-- make the war file -->
			<war destfile="${FVT.build.lib.dir}/@{base-test-name}.@{test-name}.war"
				 webxml="@{dst-xml-dir}/@{test-name}/web.xml">
				
				<!-- Include src files -->
				<zipfileset
					dir="@{dst-xml-dir}"
					prefix="WEB-INF/src">			 
					<include name="**/common/**/*.java" />
					<include name="**/server/@{test-name}BadPortImpl.java" />
				</zipfileset>
				
				<!-- include the wsdl file -->
				<zipfileset
					dir="@{dst-xml-dir}/@{test-name}"
					prefix="WEB-INF/wsdl">			 
					<include name="@{test-name}.wsdl" />
					<include name="*.xsd" />
					<webinf-wsdl-includes />
				</zipfileset>				
				
				<!-- pull in the right classes -->
				<classes dir="${FVT.build.classes.dir}">
					<include name="@{base-test-dir}/server/@{test-name}*.class" />
					<include name="@{base-test-dir}/common/*.class" />
					<include name="@{base-test-dir}/common/**/@{test-name}*.class" />
					<exclude name="@{base-test-dir}/common/**/*Service.class" />
					<extra-class-filters />
				</classes>
			</war>

			<!-- make the ear file -->
			<ear earfile="${FVT.build.installableApps.dir}/@{base-test-name}.@{test-name}App.ear"
			     appxml="@{dst-xml-dir}/@{test-name}/application.xml">
				<fileset dir="${FVT.build.lib.dir}" includes="@{base-test-name}.@{test-name}.war" />
			</ear>
	   	
	   		<echo message="" />
	    </sequential>
	</macrodef> 

	<macrodef name="wsimport-with-wsdlloc"> 
	
       <!-- name of the test (e.g., BadPort) -->	   
		<attribute name="test-name" />	
		<attribute name="src-xml-dir" />	
		<attribute name="dst-xml-dir" default="${FVT.build.work.dir}/jaxws.badproxy"/>			
		<attribute name="base-test-name" default="jaxws.badproxy" />	
		<attribute name="base-address" />
		<sequential>
			<echo message="Running wsimport-with-wsdlloc for  @{test-name} test" />
			
		   	<!-- copy template wsdl file -->
		    <copy todir="@{dst-xml-dir}" filtering="true">
				
		    	<fileset dir="@{src-xml-dir}/">
		    		<include name="@{test-name}.wsdl" />
		    		<include name="*.xsd" />
		    	</fileset>
		    	
			    <filterset>
			    	<filter token="base-test-name" value="@{base-test-name}"/>
				    <filter token="test-name" value="@{test-name}"/>
					<filter token="HOST" value="${server1.hostName}" />
					<filter token="PORT" value="${server1.WC_defaulthost}" />
			    </filterset>				
		    </copy>				
			
	   		<!-- build the wsdl file with optional bindings -->
			<wsimport xendorsed="true" keep="true" fork="true"
		              extension="true"
				      destdir="${FVT.build.classes.dir}"
				      wsdl="${test.work.dir}/@{test-name}.wsdl"
				      wsdllocation="@{base-address}.@{test-name}/services/@{test-name}Service?wsdl">
                <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
			</wsimport>	
			
			<echo message="" />
		</sequential>
	</macrodef>
	
	<macrodef name="wsimport-noWsdlLoc"> 
	
       <!-- name of the test (e.g., BadPort) -->	   
		<attribute name="test-name" />	
		<attribute name="src-xml-dir" />	
		<attribute name="dst-xml-dir" default="${FVT.build.work.dir}/jaxws.badproxy"/>			
		<attribute name="base-test-name" default="jaxws.badproxy" />	
		<attribute name="base-address" />
		<sequential>
			
		   	<!-- copy template wsdl file -->
		    <copy todir="@{dst-xml-dir}" filtering="true">
				
		    	<fileset dir="@{src-xml-dir}/">
		    		<include name="@{test-name}.wsdl" />
		    		<include name="*.xsd" />
		    	</fileset>
		    	
			    <filterset>
			    	<filter token="base-test-name" value="@{base-test-name}"/>
				    <filter token="test-name" value="@{test-name}"/>
					<filter token="HOST" value="${server1.hostName}" />
					<filter token="PORT" value="${server1.WC_defaulthost}" />
			    </filterset>				
		    </copy>				
			
	   		<!-- build the wsdl file with optional bindings -->
			<wsimport xendorsed="true" keep="true" fork="true"
		              extension="true"
				      destdir="${FVT.build.classes.dir}"
				      wsdl="${test.work.dir}/@{test-name}.wsdl">
                <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
			</wsimport>			
		</sequential>
	</macrodef>	
	
</project>
