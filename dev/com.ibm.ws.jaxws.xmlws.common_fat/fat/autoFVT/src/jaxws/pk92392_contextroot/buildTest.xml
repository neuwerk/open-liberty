<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
    <!ENTITY instance SYSTEM "../../../instance.xml">
<!-- file:30 -->
<!ENTITY properties SYSTEM "../../xmls/properties.xml">
<!-- file:28 -->
<!ENTITY paths SYSTEM "../../xmls/path_refs.xml">
<!-- file:23 -->
<!ENTITY targets SYSTEM "../../xmls/targets.xml">
<!-- file:25 -->
<!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml">
<!-- file:26 -->
<!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
<!-- file:39 -->
]>

<!--    1.2, 10/5/10
   
   Change History:
	Date        Author       Feature/Defect          Description
	08/13/2010  jtnguyen     PK92392.fvt             new File                       
	10/04/2010  jtnguyen     PK92392.FVT.2           added endorsed directory to javac compile cmd
-->

<project name="build" default="buildall" basedir=".">


	<!-- These are XML entity refs.  Basically these statements cause the
                files declared in the DOCTYPE at the top of the file to be imported
                into this build file. -->
          &instance;
          &properties;
          &paths;
          &targets;
          &taskdefs;
          &taskdefs_post_compile;

        <!-- This property should match the package name of the test class.  The
                property is used in the targets.xml file when running any of the
                component-run* targets for running a single test case class. -->
        <property name="componentName" value="jaxws/pk92392_contextroot/wsfvt/test" />
        
        <!-- This path id is used in the targets.xml file when running any of
                the component-run* targets.  This allows setting the classpath
                for an individual test. -->
		<path id="componentClasspath">
			<path refid="thinclientclasspath" />
		</path>
		
		<!-- The buildall target will execute all of the targets necessary
                before installing the test into WebSphere. -->
		<target name="buildall" depends="setenv, clean, init, server, client, test, preinstall" />
		
		<!-- The clean target will clean any files, classes, or directories
                so that a new copy of the test can be built and run. -->
		<target name="clean" depends="setenv">
			<delete dir="${FVT.build.classes.dir}/jaxws/pk92392_contextroot" />
			<delete dir="${FVT.build.work.dir}/jaxws/pk92392_contextroot" />
			<!-- installables -->
			<delete file="${FVT.build.installableApps.dir}/CalculatorSingleWSDL.ear" />            
			<delete file="${FVT.build.installableApps.dir}/CalculatorImportWSDL.ear" />
			<delete file="${FVT.build.installableApps.dir}/CalculatorNoWSDL.ear" />
		</target>
		
		<!-- The init target will initialize any directories, properties, etc.
                that are needed for the test. -->
		<target name="init" depends="setenv">
			<antcall target="component-init" />
			<mkdir dir="${FVT.build.work.dir}/jaxws/pk92392_contextroot" />
			<mkdir dir="${FVT.build.work.dir}/jaxws/pk92392_contextroot/wsfvt/server" />
			<mkdir dir="${FVT.build.work.dir}/jaxws/pk92392_contextroot/wsfvt/client" />
			<mkdir dir="${FVT.build.work.dir}/jaxws/pk92392_contextroot/wsfvt/proxyClient" />
		</target>
		
		<!-- The server target will build anything necessary for the server
                piece of the test.  Typically this target builds the server side
                EAR. -->
		<target name="server" depends="setenv">
		
			<readCellConfig prefix="server1" key="defaultServer" verbose="false" />
			
			<javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxws/pk92392_contextroot" destdir="${FVT.build.classes.dir}" 
				deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
				<compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
				<classpath refid="thinclientclasspath" />
				<include name="**/*server/*.java" />
			</javac>
			
    <!-- we need to run it once.  After we save the wsdl and xsd  
         to the src tree (jaxws\pk92392_contextroot\wsfvt\server\etc\wsdl), we don't need to run it.
  	-->
    <!--
        <echo message="wsgen..." />
     <wsgen
             destdir="${FVT.build.classes.dir}"
             resourcedestdir="${FVT.build.classes.dir}"
             sourcedestdir="${FVT.build.classes.dir}"
	     	 genwsdl="true"
             sei="jaxws.pk92392_contextroot.wsfvt.server.CalculatorImportWSDL"
             >
             <classpath>
                     <pathelement path="${FVT.build.classes.dir}"/>                  
             </classpath>
     </wsgen>
     
     <wsgen
             destdir="${FVT.build.classes.dir}"
             resourcedestdir="${FVT.build.classes.dir}"
             sourcedestdir="${FVT.build.classes.dir}"
	     	 genwsdl="true"
             sei="jaxws.pk92392_contextroot.wsfvt.server.CalculatorNoWSDL"
             >
             <classpath>
                     <pathelement path="${FVT.build.classes.dir}"/>                  
             </classpath>
     </wsgen>
     
     <wsgen
             destdir="${FVT.build.classes.dir}"
             resourcedestdir="${FVT.build.classes.dir}"
             sourcedestdir="${FVT.build.classes.dir}"
	     	 genwsdl="true"
             sei="jaxws.pk92392_contextroot.wsfvt.server.CalculatorSingleWSDL"
             >
             <classpath>
                     <pathelement path="${FVT.build.classes.dir}"/>                  
             </classpath>
     </wsgen>
                  
        -->
            <!-- build CalculatorSingleWSDL.ear jaxws\pk92392_contextroot\wsfvt\server -->
             
			<war destfile="${FVT.build.lib.dir}/CalculatorSingleWSDL.war" 
            webxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/web_CalculatorSingleWSDL.xml">
				<!-- get the impl -->
				<classes dir="${FVT.build.classes.dir}">
					<include name="jaxws/pk92392_contextroot/wsfvt/server/CalculatorSingleWSDL.class" />                    
				</classes>		                		
				<classes dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server">
					<include name="CalculatorSingleWSDL.java" />
				</classes>				
				<zipfileset dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/wsdl"
					        includes="CalculatorSingleWSDLService.wsdl"
					        prefix="WEB-INF/wsdl"/> 				
			</war>

			<ear destfile="${FVT.build.installableApps.dir}/CalculatorSingleWSDL.ear" 
                   appxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/application_CalculatorSingleWSDL.xml">
				<fileset dir="${FVT.build.lib.dir}">
					<include name="CalculatorSingleWSDL.war" />
				</fileset>
			</ear>


		
             <!-- build CalculatorImportWSDL.ear jaxws\pk92392_contextroot\wsfvt\server 
             webxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/web.xml"--> 			

			<war destfile="${FVT.build.lib.dir}/CalculatorImportWSDL.war"
            webxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/web_CalculatorImportWSDL.xml">
				<!-- get the impl -->
				<classes dir="${FVT.build.classes.dir}">
					<include name="jaxws/pk92392_contextroot/wsfvt/server/CalculatorImportWSDL.class" />                    
				</classes>		                		
				<classes dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server">
					<include name="CalculatorImportWSDL.java" />
				</classes>				
				<zipfileset dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/wsdl"
					        includes="CalculatorImportWSDLService.wsdl"                            
					        prefix="WEB-INF/wsdl"/>    
                             			
				<zipfileset dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/wsdl"
					        includes="CalculatorImportWSDLService*.xsd"
					        prefix="WEB-INF/wsdl"/> 				
			</war>

			<ear destfile="${FVT.build.installableApps.dir}/CalculatorImportWSDL.ear" 
            appxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/application_CalculatorImportWSDL.xml">
				<fileset dir="${FVT.build.lib.dir}">
					<include name="CalculatorImportWSDL.war" />
				</fileset>
			</ear>
            
                   
            <!-- build CalculatorNoWSDL.ear jaxws\pk92392_contextroot\wsfvt\server --> 			
			<war destfile="${FVT.build.lib.dir}/CalculatorNoWSDL.war" 
            webxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/web_CalculatorNoWSDL.xml">
				<!-- get the impl -->
				<classes dir="${FVT.build.classes.dir}">
					<include name="jaxws/pk92392_contextroot/wsfvt/server/CalculatorNoWSDL.class" />                    
				</classes>		                		
				<classes dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server">
					<include name="CalculatorNoWSDL.java" />
				</classes>				
			</war>

			<ear destfile="${FVT.build.installableApps.dir}/CalculatorNoWSDL.ear" 
            appxml="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/dd/application_CalculatorNoWSDL.xml">
				<fileset dir="${FVT.build.lib.dir}">
					<include name="CalculatorNoWSDL.war" />
				</fileset>
			</ear>
              
            
		</target>
		
		<target name="client" depends="setenv">

			<!-- this task injects all the topologyProps.props data into Ant properites beginning with "prefix."... -->
			<!-- then we'll use them to adjust the host and port -->
			<readCellConfig prefix="server1" key="defaultServer" verbose="false" />

			<wsimport keep="true" verbose="true" destdir="${FVT.build.classes.dir}" 
				wsdl="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/wsdl/CalculatorSingleWSDLService.wsdl"
				wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/CalculatorSingleWSDLService?wsdl"
                package="jaxws.pk92392_contextroot.wsfvt.CalculatorSingleWSDLClient">
			</wsimport>
			
			<wsimport keep="true" verbose="true" destdir="${FVT.build.classes.dir}" 
				wsdl="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/wsdl/CalculatorImportWSDLService.wsdl"
				wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/CalculatorImportWSDLService?wsdl"
                package="jaxws.pk92392_contextroot.wsfvt.CalculatorImportWSDLClient">
			</wsimport>


			<wsimport keep="true" verbose="true" destdir="${FVT.build.classes.dir}" 
				wsdl="${FVT.base.dir}/src/jaxws/pk92392_contextroot/wsfvt/server/etc/wsdl/CalculatorNoWSDLService.wsdl"
				wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/CalculatorNoWSDLService?wsdl"
                package="jaxws.pk92392_contextroot.wsfvt.CalculatorNoWSDLClient">
			</wsimport>
            
			<javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxws/pk92392_contextroot"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
                        source="${build.tests.with.java.level}"
                        target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
				<compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
				<classpath refid="thinclientclasspath" />
				<include name="**/*client/*.java" />
			</javac>
		</target>

	<!--
		The client target will build anything necessary for the test piece of
		the test. Often this will just include compiling the the JUnit test
		case file.
	-->
	<target name="test" depends="setenv">
		<javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxws/pk92392_contextroot"
			destdir="${FVT.build.classes.dir}" deprecation="${deprecation}"
			debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
			<compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
			<classpath refid="thinclientclasspath" />
			<include name="**/test/*.java" />
		</javac>
	</target>


	<!--
		The preinstall target will perform any tasks necessary before the
		application is installed into WebSphere. This could include running
		ejbdeploy or endptenabler for an EAR that contains an EJB.
	-->
	<target name="preinstall" depends="setenv">
	</target>


	<!--
		The install target will install the server side piece of the test into
		WebSphere. This target calls the installTest.xml file for the test.
	-->
	<target name="install" depends="setenv">
		<ant
			antfile="${FVT.base.dir}/src/jaxws/pk92392_contextroot/installTest.xml"
			dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot">
			<property name="install.mode" value="${rt.install.mode}" />
		</ant>
	</target>


	<!--
		The uninstall target will uninstall the server side piece of the test
		from WebSphere. This target calls the uninstallTest.xml file for the
		test.
	-->
	<target name="uninstall" depends="setenv">
		<ant
			antfile="${FVT.base.dir}/src/jaxws/pk92392_contextroot/uninstallTest.xml"
			dir="${FVT.base.dir}/src/jaxws/pk92392_contextroot">
			<property name="uninstall.mode" value="${rt.uninstall.mode}" />
		</ant>
	</target>
	
</project>
	
	