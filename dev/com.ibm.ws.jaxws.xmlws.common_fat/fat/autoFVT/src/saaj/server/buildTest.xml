<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml"><!-- file:34 -->
        <!ENTITY properties SYSTEM "../../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml"><!-- file:31 -->
        <!ENTITY targets SYSTEM "../../xmls/targets.xml"><!-- file:33 -->
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml"><!-- file:34 -->
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml"><!-- file:47 -->
]>

<!-- 1.11, 3/23/10

     Description: Build file for the WAS Integration services test.  This
     test includes a JAX-WS type of application and a JAX-RPC type of
     application in the same WAR file.
     
     Date        Author       Feature/Defect          Description
     05/23/2006  ulbricht     LIDB4401-28.01          New File
     ...
     03/23/2010  jtnguyen     643133                  Added encoding to javac task
-->
<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
  <property name="WSServletClass" value="com.ibm.ws.websvcs.transport.http.WASAxis2Servlet" />
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="saaj/server/provider"/>
  
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>
     
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/saaj/server/provider"/>
    <mkdir dir="${FVT.build.work.dir}/saaj/server/etc/dd"/>
    <mkdir dir="${FVT.build.work.dir}/saaj/server/etc/dds"/>
    <mkdir dir="${FVT.build.classes.dir}/saaj/server"/>
    <mkdir dir="${FVT.build.classes.dir}/wssaaj"/>
    <mkdir dir="${FVT.build.classes.dir}/wssaaj/com/ibm/ws/saaj"/>
    <mkdir dir="${FVT.build.classes.dir}/wssaaj/com/ibm/ws/websvcs/jaxwsserver/response"/>
    <mkdir dir="${FVT.build.classes.dir}/wssaaj/saaj/provider"/>
    <mkdir dir="${FVT.build.work.dir}/wssaaj"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/saaj/server"/>
    <delete dir="${FVT.build.work.dir}/saaj/server"/>
    <delete file="${FVT.build.lib.dir}/saaj_service.war"/>
    <delete file="${FVT.build.installableApps.dir}/WASSaaj.ear"/>
    <delete file="${FVT.build.installableApps.dir}/WSSaaj.ear"/>
    <delete dir="${FVT.build.classes.dir}/wssaaj"/>
  </target>
  
                                                  
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/>  
     
  
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">
    <antcall target="WASSaaj"/>
    <antcall target="WSSaaj"/>
  </target>
    
  <target name="WASSaaj">
     
    <!-- wsdl2javaj2ee url="${FVT.base.dir}/src/saaj/server/etc/wsdl/SAAJService.wsdl"
                   output="${FVT.build.work.dir}"
                   role="develop-server"
                   container="Bean"
                   verbose="false">
      <mapping namespace="http://ws.apache.org/saaj"
               package="saaj.server.provider"/>
    </wsdl2javaj2ee>
    
    <replace file="${FVT.build.work.dir}/WEB-INF/webservices.xml"
             token="??SET THIS TO servlet-name ELEMENT OF web.xml??"
             value="SAAJServices"/ -->
       
    <copy todir="${FVT.build.work.dir}/saaj/server/provider" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/provider">
        <include name="String*.java"/> 
      </fileset>
    </copy>
  	
  	<copy todir="${FVT.build.work.dir}/saaj/com" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/provider/com">
        <include name="**/*.java"/> 
      </fileset>
    </copy>
      
    <javac compiler="modern" srcdir="${FVT.build.work.dir}/saaj"
           destdir="${FVT.build.classes.dir}/saaj"
           encoding="Cp1252"
           deprecation="${deprecation}"
           debug="${debug}"
           nowarn="true"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/*.java"/>
    </javac>
     
    <copy todir="${FVT.build.work.dir}/saaj/server/etc/dd" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/etc/dd">
        <include name="web.xml"/> 
      </fileset>
      <filterset>
          <filter token="SERVLET_CLASS"  value="${WSServletClass}" />
          <!--filter token="HOST" value="${new.default.host}" /-->
          <!--filter token="PORT" value="${new.wc.defaulthost}" /-->
          <!--filter token="WSDL_LOCATION" value="${wsdl_location}" /-->
      </filterset>            
    </copy>
      
    <war warfile="${FVT.build.lib.dir}/saaj_service.war"
         webxml="${FVT.build.work.dir}/saaj/server/etc/dd/web.xml">
      <!--webinf dir="${FVT.base.dir}/src/saaj/server/etc/dd" >
        <include name="ibmservices.xml"/>
      </webinf -->
      <webinf dir="${FVT.base.dir}/src/saaj/server/etc">
        <include name="wsdl/SAAJService*.wsdl"/>
      </webinf>
      <classes dir="${FVT.build.classes.dir}/saaj">
        <include name="**/*.class"/>
      </classes>
    </war>

    <!-- Both the JAX-WS WAR and JAX-RPC WAR will be in the WIJAXwsrpc.ear
    -->   
    <ear earfile="${FVT.build.installableApps.dir}/WASSaaj.ear" 
         appxml="${FVT.base.dir}/src/saaj/server/etc/dd/application.xml">
      <fileset dir="${FVT.build.lib.dir}">
        <include name="saaj_service.war"/>
      </fileset>
      <metainf dir="${FVT.base.dir}/src/saaj/server/etc">
           <include name="was.policy"/>
      </metainf>
    </ear>
    
  </target>
    
  <target name="WSSaaj">
     
    <copy todir="${FVT.build.work.dir}/wssaaj/saaj/server/provider" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/provider">
        <include name="SOAPMessage*.java"/> 
      </fileset>
    </copy>
      
    <copy todir="${FVT.build.work.dir}/wssaaj/com" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/provider/com">
        <include name="**/*.java"/> 
      </fileset>
    </copy>
      
      
    <javac compiler="modern" srcdir="${FVT.build.work.dir}/wssaaj"
           destdir="${FVT.build.classes.dir}/wssaaj"
           encoding="Cp1252"
           deprecation="${deprecation}"
           debug="${debug}"
           nowarn="true"
     	   source="${build.tests.with.java.level}"
     	   target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/*.java"/>
    </javac>
     
    <copy todir="${FVT.build.work.dir}/saaj/server/etc/dds" overwrite="yes" encoding="Big5">
      <fileset dir="${FVT.base.dir}/src/saaj/server/etc/dds">
        <include name="web.xml"/> 
      </fileset>
      <filterset>
          <filter token="SERVLET_CLASS"  value="${WSServletClass}" />
          <!--filter token="HOST" value="${new.default.host}" /-->
          <!--filter token="PORT" value="${new.wc.defaulthost}" /-->
          <!--filter token="WSDL_LOCATION" value="${wsdl_location}" /-->
      </filterset>            
    </copy>
      
    <war warfile="${FVT.build.lib.dir}/soapmessage_service.war"
         webxml="${FVT.build.work.dir}/saaj/server/etc/dds/web.xml">
      <!--webinf dir="${FVT.base.dir}/src/saaj/server/etc/dd" >
        <include name="ibmservices.xml"/>
      </webinf -->
      <webinf dir="${FVT.base.dir}/src/saaj/server/etc">
        <include name="wsdl/SOAPMessage*.wsdl"/>
      </webinf>
      <classes dir="${FVT.build.classes.dir}/wssaaj">
        <include name="**/*.class"/>
      </classes>
    </war>

    <!-- Both the JAX-WS WAR and JAX-RPC WAR will be in the WIJAXwsrpc.ear
    -->   
    <ear earfile="${FVT.build.installableApps.dir}/WSSaaj.ear" 
         appxml="${FVT.base.dir}/src/saaj/server/etc/dds/application.xml">
      <fileset dir="${FVT.build.lib.dir}">
        <include name="soapmessage_service.war"/>
      </fileset>
      <metainf dir="${FVT.base.dir}/src/saaj/server/etc">
           <include name="was.policy"/>
      </metainf>
    </ear>
    
  </target>
    
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->                               
  <target name="client" depends="setenv">
    <!-- classpath /-->
  </target>
                            
                            
  <!-- The client target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv, client">
  </target>         
  
             
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
  <target name="preinstall" depends="setenv">
  </target>         
  
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
  </target>
 
</project>
