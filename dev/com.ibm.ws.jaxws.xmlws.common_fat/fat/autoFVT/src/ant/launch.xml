<project name="standard.launch.tasks">

	<import file="../../../../ant_build/public_imports/internal_imports/buildtasks.xml"/>
	<path id="buildtasks">
		<fileset dir="${basedir}/common/jars/">
		    <patternset refid="buildtasks.jars" />
		</fileset>
	</path>
	<taskdef resource="com/ibm/aries/buildtasks/buildtasks.properties" classpathref="buildtasks" />

    <target name="initProperties">
        <property name="bootstrapping.properties" value="${dir.component.root}/bootstrapping.properties"/>
        <property name="configuration.properties" value="${dir.component.root}/configuration.properties"/>
        <property name="logging.properties"       value="${dir.component.root}/logging.properties"/>
    	<property name="gen.logging.properties"   value="${dir.log}/logging.properties"/>
        <property name="local.properties"         value="${dir.component.root}/local.properties"/>
        <property name="simplicity.properties"    value="${dir.component.root}/simplicity.properties"/>
        <property name="wsadminlib.py" value="${dir.src}/jython/wsadminlib.py" />
    	<if if="zos.environment">
    			<!--  used for running on z/os -->
    			<property name="ascii.file.encoding" value="iso8859-1" />
    			<else>
    				<property name="ascii.file.encoding" value="ISO8859_1" />
    			</else>
    		</if>    	
    </target>
    
    <!-- Properties used: configuration.properties, local.properties, bootstrapping.properties, topology.properties, acute.properties, dir.log, dir.log.tmp -->
    <target name="translateProperties" description="Uses bootstrapping properties to generate property files needed by the test bucket" depends="initProperties">
        <!-- ACUTE caches information in its topology properties file, so if the state of your server changed since your last invocation, ACUTE won't know about it unless you refresh the file -->
        <echo>Deleting existing properties files</echo>
        <delete file="${local.properties}" quiet="true"/>
        <delete file="${simplicity.properties}" quiet="true"/>

        <echo>Generating a local properties file that contains all the properties from Ant and configuration.properties</echo>
        <property file="${configuration.properties}"/>
        <property file="${bootstrapping.properties}"/>
    	<property name="buckets.dir" value="${FVT.base.dir}"/>
        <setPorts/>
        <echoproperties destfile="${local.properties}"/>
        <echo>Created ${local.properties}</echo>

        <echo>Generating the Simplicity config.props file based on configuration.properties</echo>
        <propertyfile file="${simplicity.properties}" comment="Simplicity Configuration file">
            <entry key="webSphereOperationsProvider" value="${simplicity.webSphereOperationsProvider}"/>
            <entry key="commandLineProvider"         value="${simplicity.commandLineProvider}"/>
            <entry key="bootstrappingPropsFile"      value="${bootstrapping.properties}"/>
            <entry key="useTopologyCaching"          value="${simplicity.useTopologyCaching}"/>
            <entry key="jiiwsPort"                   value="${simplicity.jiiwsPort}"/>
            <entry key="jiiwsInactivityTimeout"      value="${simplicity.jiiwsInactivityTimeout}"/>
            <entry key="preferJIIWSWsAdmin"          value="${simplicity.preferJIIWSWsAdmin}"/>
        </propertyfile>
        <echo message="Start of printing the content of file ${bootstrapping.properties}"/>
            <concat>
                <fileset file="${bootstrapping.properties}"/>
            </concat>
        <echo message="End of printing the content of file ${bootstrapping.properties}"/>
        
        <echo message="Start of printing the content of file ${local.properties}"/>
            <concat>
                <fileset file="${local.properties}"/>
            </concat>
        <echo message="End of printing the content of file ${local.properties}"/>
    </target>
    
    <!-- tWAS websvcs.fvt does not use this target to run testing -->
    <!-- Properties used: test.bucket.name, dir.log, dir.log.xml, dir.log.tmp, local.properties, logging.properties, acute.properties, test.bucket.path, test.bucket.class -->
    <target name="runTests" description="Runs the specified suite, setup, test, or phase in a test bucket.  Runs full regression test suite by default.  Generates XML report." depends="initProperties">
        <echo>Initializing the classpath for ${test.bucket.name}</echo>
        <property file="${bootstrapping.properties}"/>
        <!-- override if not set -->
        <property name="local.sharedLib" value="${dir.lib}" />
        <path id="test.bucket.path">
            <path refid="local.binaries.class.path"/>
            <fileset dir="${dir.build.lib}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
            <fileset dir="${dir.build.jars}">
                <include name="${test.bucket.jar}"/>
            </fileset>
            <fileset dir="${local.sharedLib}">
        	<!-- Include JARs from the Moonstone shared library diectory defined in bootstrapping.properties -->
        	<include name="**/*.jar"/>
            </fileset>
        </path>
    	<echo>Classpath:</echo>
    	<echo message="${toString:test.bucket.path}"/>
    	
		<!-- Set up the correct ports for the test to use -->
		<setPorts />
    	
        <echo>Initializing JRE logging</echo>
        <delete dir="${dir.log}" quiet="true"/>
        <mkdir  dir="${dir.log.xml}"/>
        <mkdir  dir="${dir.log.tmp}"/>
        <copy file="${logging.properties}" tofile="${gen.logging.properties}"/>
		<propertyfile file="${gen.logging.properties}" comment="Logging file used by ${test.bucket.name}">
			<entry key="java.util.logging.FileHandler.pattern" value="${dir.log}/output.txt"/>
		</propertyfile>
        <echo>Running ${test.bucket.name}</echo>
		<if if="debug.framework">
		    <!-- if we are debugging then set these values to be passed to the JVM -->
		    <property name="framework.debug.jvmarg1" value="-Xdebug"/>
		    <!-- this is the debugging port for the FAT/simplicity JVM -->
		    <property name="framework.debug.jvmarg2" value="-agentlib:jdwp=transport=dt_socket,address=6666,server=y,suspend=y"/>
		    <else>
		        <!-- if we are not debugging make sure the values are empty strings to have no JVM effect-->
		        <property name="framework.debug.jvmarg1" value="-Dignore=ignore"/>
		        <property name="framework.debug.jvmarg2" value="-Dignore=ignore"/>
		    </else>
		</if>
        <if if="debug.server">
            <!-- this is the debugging port for the liberty server that will be launched by the tests -->
            <property name="server.debug.sysprop.value" value="7777"/>
            <else>
                <property name="server.debug.sysprop.value" value="false"/>
            </else>
        </if>	
        <junit printsummary="withOutAndErr" fork="yes">        	  	
            <!-- Tell jUnit where the main property file is -->
            <sysproperty key="local.properties" value="${local.properties}"/>
            <!-- Tell jUnit which logging properties to use -->
            <sysproperty key="java.util.logging.config.file" value="${gen.logging.properties}"/>
            <!-- Tell ACUTE where to find its configuration file -->
            <sysproperty key="simplicityConfigProps" value="${simplicity.properties}"/>
            <!-- set the temp directory -->
            <sysproperty key="java.io.tmpdir" value="${build.tmp.dir}" />
        	<!-- Add the bvt properties as JVM args so the tests can look them up -->
            <syspropertyset>
                <propertyref prefix="bvt.prop." />
                <mapper type="glob" from="bvt.prop.*" to="*" />
            </syspropertyset>
            <!-- show junit where the test case is located-->
            <classpath refid="test.bucket.path"/>
            <!-- report will be generated as xml -->
            <formatter type="xml"/>
            <!-- Invoke JUnit TestSuite -->
            <test todir="${dir.log.xml}" name="${test.bucket.class}"/>
            <!-- jvmarg value="-Xdebug"/>
        	<jvmarg value="-agentlib:jdwp=transport=dt_socket,address=7777,server=y,suspend=y"/ -->
		    <!-- debug conditionals-->
		    <jvmarg value="${framework.debug.jvmarg1}"/>
		    <jvmarg value="${framework.debug.jvmarg2}"/>
        	<jvmarg value="-Dfile.encoding=${ascii.file.encoding}"/>
        	
		    <sysproperty key="debugging.port" value="${server.debug.sysprop.value}"/>

        </junit>
        <echo>Finished running ${test.bucket.name}</echo>
        <echo>XML report is available at ${dir.log.xml}</echo>
    </target>
	
    <!-- Properties used: dir.log.html, dir.log.xml; Calls Ant as a sub process to work around IBM JRE 6 bug with the default TransformerFactoryImpl -->
    <target name="generateReports" description="Generates an HTML report based on the existing XML report" depends="initProperties, reallyGenerateReports">
      <!--
        <java classname="org.apache.tools.ant.launch.Launcher" fork="true" failonerror="true" taskname="startAnt">
            <classpath>
                <pathelement location="${ant.home}/lib/ant-launcher.jar"/>
            </classpath>
            <sysproperty key="javax.xml.transform.TransformerFactoryIGNOREDPROPERTY" value="org.apache.xalan.processor.TransformerFactoryImpl"/>
            <arg value="-buildfile"/>
            <arg file="${ant.file.standard.launch.tasks}"/>
            <arg value="reallyGenerateReports"/>
            <arg value="-Dbasedir=${basedir}"/>
            <arg value="-Ddir.log.html=${dir.log.html}"/>
            <arg value="-Ddir.log.xml=${dir.log.xml}"/>
        </java>
        -->
    </target>
    
    <!-- Properties used: dir.log.html, dir.log.xml -->
    <target name="reallyGenerateReports">
        <echo>Generating an HTML report based on the existing XML report</echo>
        <delete dir="${dir.log.html}" quiet="true"/>
        <mkdir  dir="${dir.log.html}"/>
        <junitreport todir="${dir.log.xml}">
            <fileset dir="${dir.log.xml}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${dir.log.html}" />
        </junitreport>
        <echo>HTML report is available at ${dir.log.html}</echo>
    </target>
    
    <!-- Properties used: dir.log -->
    <target name="archiveReports" description="Archives the existing XML and HTML reports (if they exist) in a unique directory and ZIP file" depends="initProperties">
      <!--
        <echo>Archiving results in a unique directory and ZIP file</echo>
        <tstamp>
            Unique, file-name safe, String representation of the time that this script is invoked  (year-month-day-hour-minute-second-millisecond)
            <format property="current.time" pattern="yyyy-MM-dd-HH-mm-ss-SSS" locale="en"/>
        </tstamp>
        <property name="dir.archive"         location="${dir.log}.archive"/>
        <property name="dir.archive.current" location="${dir.archive}/${current.time}"/>
        <property name="file.archive.zip"    location="${dir.archive.current}.zip"/>
        <mkdir  dir="${dir.archive.current}"/>
        <copy todir="${dir.archive.current}">
            <fileset dir="${dir.log}"/>
        </copy>
        <echo>Results have been archived in the following directory: ${dir.archive.current}</echo>
        <zip destfile="${file.archive.zip}" basedir="${dir.archive.current}" />
        <echo>Results have been archived in the following ZIP: ${file.archive.zip}</echo>
        -->
    </target>

	<!-- Used to set up the ports for us for Liberty to use, and the client to use -->
	<macrodef name="setPorts">
		<sequential>
			<property name="testports.properties" value="testports.properties" />
			<property name="ports.xml" value="fatTestPorts.xml" />
	        <if if="zos.environment">
				<property name="liberty.dir" value="${basedir}/../../${install.name}"/>
			</if>
			<echo>Base dir is:  ${basedir}</echo>
			<echo>Liberty dir is:  ${liberty.dir}</echo>
			<echo>libertyInstallPath is:  ${libertyInstallPath}</echo>
			
			<condition property="liberty.location" value="${liberty.dir}" else="${libertyInstallPath}">
				<isset property="liberty.dir" />
			</condition>
			<echo>liberty.location is:  ${liberty.location}</echo>			
			
			<condition property="install.location" value="${basedir}/autoFVT/" else="${basedir}/">
				<available file="${basedir}/autoFVT/" />
			</condition>
			<echo>install.location is:  ${install.location}</echo>	
				
				
			<condition property="testports.location" value="${basedir}/../image/output/${install.name}/usr/servers/${testports.properties}" else="${liberty.location}/usr/servers/${testports.properties}">
				<available file="${basedir}/../image/output/${install.name}/usr/servers" />
			</condition>
			<condition property="portsxml.location" value="${basedir}/../image/output/${install.name}/usr/servers/${ports.xml}" else="${liberty.location}/usr/servers/${ports.xml}">
				<available file="${basedir}/../image/output/${install.name}/usr/servers" />
			</condition>
			<condition property="portscommonxml.location" value="${basedir}/../image/output/${install.name}/usr/servers/fatTestCommon.xml" else="${liberty.location}/usr/servers/fatTestCommon.xml">
				<available file="${basedir}/../image/output/${install.name}/usr/servers" />
			</condition>
			<property name="liberty.server.dir" value="${basedir}/../image/output/${install.name}/usr/servers" />
			<!-- We only want to run the port selector once -->
			<copy file="${install.location}/${testports.properties}" toFile="${testports.location}" overwrite="true" />
			<copy file="${install.location}/${ports.xml}" toFile="${portsxml.location}" overwrite="true" />
			<copy file="${install.location}/fatTestCommon.xml" toFile="${portscommonxml.location}" overwrite="true" />
			<!--<echo level="verbose"> Check ports are available </echo>
			<portSelector engineName="${build.engine.name}" location="${testports.location}" jvmarg="ports.jvmarg" />-->
			<property file="${testports.location}" />
		</sequential>
	</macrodef>

</project>
