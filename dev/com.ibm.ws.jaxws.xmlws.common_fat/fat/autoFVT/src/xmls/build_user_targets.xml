<project name="build.user.targets" basedir="." xmlns:mantis="antlib:com.ibm.mantis">

  <dirname property="fvttop" file="${ant.file.build.user.targets}/../../.."/>
  <property name="FVT.base.dir" value="${fvttop}/autoFVT"/>
  <property name="auto.fvt.zip.dir" value="${FVT.base.dir}/build/buckets"/>
  <property name="auto.fvt.zip" value="autoFVT.zip"/>
  <property name="common.jars.dir" value="${FVT.base.dir}/common/jars"/>
  <property name="framework.dirs" value="com/**,common/**,jacls/**,jython/**,keys/**,PolicySets/**,xmls/**,xsls/**,build.xml"/>
  <property name="build.dirs" value="bin/**,build/**,common/**,doc/**,results/**,zos/**"/>

  <!-- Import test_groupings.xml which contains the grouping targets -->
  <import file="${FVT.base.dir}/src/xmls/test_groupings.xml"/>

  <target name="printEnv">
    <echo message="ant.file.build.user.targets: ${ant.file.build.user.targets}"/>
    <echo message="fvttop: ${fvttop}"/>
    <echo message="FVT.base.dir: ${FVT.base.dir}"/>
    <echo message="auto.fvt.zip.dir: ${auto.fvt.zip.dir}"/>
    <echo message="auto.fvt.zip: ${auto.fvt.zip}"/>
    <echo message="common.jars.dir: ${common.jars.dir}"/>
  </target>

  <target name="clean" description="Removes all built artifacts">
    <delete file="${auto.fvt.zip.dir}"/>
  </target>

  <target name="development" 
          description="Perform a typical developer's build"
          depends="printEnv, package"/>

  <target name="production"
          description="Perform a full production build"
          depends="printEnv, javadoc, package"/>

  <target name="package" description="Create the autoFVT.zip files" depends="printEnv">
    <!-- Collect JUnit -->
    <antcall target="collect_cmvc_dependency">
      <param name="dependency" value="prereq.junit"/>
      <param name="groupList" value="default"/>
      <param name="destination.dir" value="${common.jars.dir}"/>
    </antcall>

    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml"
        tofile="${FVT.base.dir}/TestBuild.xml.temp1">
    </copy>
    <copy overwrite="yes"
          file="${FVT.base.dir}/common/files/meta-data.txt"
          tofile="${FVT.base.dir}/meta-data.txt">
      <filterset id="replace.filter.set1">
        <filter token="owner" value="syed"/>
      	<filter token="component" value="WAS.wssecurity.fvt"/>
      </filterset>
    </copy>
    <!-- Create wssecurity.core grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurityCore"/>
        <filter token="grouping.target.rapid" value="runWssecurityCoreRapid"/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-core"/>
        <filter token="zGroupingDef.rapid" value="define-wssecurity-core-rapid"/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.core"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.core"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create wssecurity.secconv grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecuritySecconv"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-secconv"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.secconv"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.secconv"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create wssecurity.wstrust grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurityTrust"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-wstrust"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.wstrust"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.wstrust"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create wssecurity.wspolicy grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurityWspolicy"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-wspolicy"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.wspolicy"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.wspolicy"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create wssecurity.misc grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurityMisc"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-misc"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.misc"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.misc"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>


    <!-- Create wssecurity.audit grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurityAudit"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-audit"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.audit"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.audit"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create wssecurity.glmFisFats grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurityGlm"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wssecurity-glmFisFats"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wssecurity.glmFisFats"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity.glmFisFats"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create wss.mixedcell grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWSSMixedcell"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-wss-mixedcell"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wss.mixedcell"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wss.mixedcell"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall>

    <!-- Create samlFisFats grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runSamlFisFats"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-samlFisFats"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/samlFisFats"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="samlFisFats"/>
      <param name="bucket.packaging" value="${saml.FisFats.packaging}"/>
    </antcall>


    <!-- Create samlWebSSO grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runSamlWebSSO"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-samlWebSSO"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/samlWebSSO"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="samlWebSSO"/>
      <param name="bucket.packaging" value="${saml.WebSSO.packaging}"/>
    </antcall>

    <!-- Create OAuth20 grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runOAuth20"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-OAuth20"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/OAuth20"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="OAuth20"/>
      <param name="bucket.packaging" value="${oauth20.packaging}"/>
    </antcall>

    <!-- Create wssecurity grouping autoFVT.zip
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWssecurity"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zRapidRegressionDef" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/wssecurity"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="wssecurity"/>
      <param name="bucket.packaging" value="${wssecurity.packaging}"/>
    </antcall> -->

    <copy overwrite="yes"
          file="${FVT.base.dir}/common/files/meta-data.txt"
          tofile="${FVT.base.dir}/meta-data.txt">
      <filterset id="replace.filter.set1">
        <filter token="owner" value="juliam"/>
      	<filter token="component" value="WAS.websvcs.fvt.admin"/>
      </filterset>
    </copy>
    <!-- Create admin.core grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runAdminCore"/>
        <filter token="grouping.target.rapid" value="runAdminCoreRapid"/>
        <filter token="zGroupingDef.daily" value="define-admin-core"/>
        <filter token="zGroupingDef.rapid" value="define-admin-core-rapid"/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/admin.core"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="admin.core"/>
      <param name="bucket.packaging" value="${admin.packaging}"/>
    </antcall>

    <!-- Create admin.policyset grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runAdminPolicyset"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-admin-policyset"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/admin.policyset"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="admin.policyset"/>
      <param name="bucket.packaging" value="${admin.packaging}"/>
    </antcall>

    <!-- Create admin.Enhancement grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runAdminEnhancement"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-admin-Enhancement"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/admin.Enhancement"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="admin.Enhancement"/>
      <param name="bucket.packaging" value="${admin.packaging}"/>
    </antcall>


    <!-- Create admin.Integration grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runAdminIntegration"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-admin-Integration"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/admin.Integration"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="admin.Integration"/>
      <param name="bucket.packaging" value="${admin.packaging}"/>
    </antcall>

    <copy overwrite="yes"
          file="${FVT.base.dir}/common/files/meta-data.txt"
          tofile="${FVT.base.dir}/meta-data.txt">
      <filterset id="replace.filter.set1">
        <filter token="owner" value="jtnguyen"/>
      	<filter token="component" value="WAS.websvcs.fvt.engine"/>
      </filterset>
    </copy>

    <!-- Create ws.engine grouping autoFVT.zip -->
    <!-- we're rewriting testbuild.xml and inserting the desired target names
         to be used for each bucket. Those are in test_groupings.xml.
         
         The Z groupings are only used for z platforms and wind up 
         being used to rewrite slice.properties. 
    -->     
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWsEngine"/>
        <filter token="grouping.target.rapid" value="runWsEngineRapid"/>
        <filter token="zGroupingDef.daily" value="define-ws-engine-zos"/>
        <filter token="zGroupingDef.rapid" value="define-ws-engine-rapid"/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>
    <mkdir dir="${auto.fvt.zip.dir}/ws.engine"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="ws.engine"/>
      <param name="bucket.packaging" value="${ws.packaging}"/>
    </antcall>

    <!-- Create ws.transport grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWsTransport"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-ws-transport"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/ws.transport"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="ws.transport"/>
      <param name="bucket.packaging" value="${ws.packaging}"/>
    </antcall>

    <!-- Create ws.integ1 grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWsInteg1"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-ws-integ1"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/ws.integ1"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="ws.integ1"/>
      <param name="bucket.packaging" value="${ws.packaging}"/>
    </antcall>

    <!-- Create ws.integ2 grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWsInteg2"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-ws-integ2"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/ws.integ2"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="ws.integ2"/>
      <param name="bucket.packaging" value="${ws.packaging}"/>
    </antcall>

    <!-- Create jms grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runJms"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-jms"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>    
    <mkdir dir="${auto.fvt.zip.dir}/ws.jms"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="ws.jms"/>
      <param name="bucket.packaging" value="${jms.packaging}"/>
    </antcall>

    <!-- Create mixedcell grouping autoFVT.zip -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runMixedCell"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-mixedcell"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>

    <mkdir dir="${auto.fvt.zip.dir}/mixedcell"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="mixedcell"/>
      <param name="bucket.packaging" value="${mixedcell.packaging}"/>
    </antcall>

    <!-- Create ws.mixedcell grouping autoFVT.zip for core team -->
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp1"
        tofile="${FVT.base.dir}/TestBuild.xml.temp2">
      <filterset id="replace.filter.set1">
        <filter token="grouping.target" value="runWsMixedcell"/>
        <filter token="grouping.target.rapid" value=""/>
        <filter token="zGroupingDef.daily" value="define-ws-mixedcell"/>
        <filter token="zGroupingDef.rapid" value=""/>
      </filterset>
    </copy>
    <copy overwrite="yes"
        file="${FVT.base.dir}/TestBuild.xml.temp2"
        tofile="${FVT.base.dir}/TestBuild.xml"/>

    <mkdir dir="${auto.fvt.zip.dir}/ws.mixedcell"/>
    <antcall target="create_auto_fvt_zip">
      <param name="bucket" value="ws.mixedcell"/>
      <param name="bucket.packaging" value="${ws.mixedcell.packaging}"/>
    </antcall>

  </target>

  <target name="collect_cmvc_dependency">
    <echo message="Collecting ${dependency} dependency."/>
    <mantis:collector componentName="${dependency}"
                      verbose="true"
                      groupList="${groupList}"
                      usePreferredInstallLocation="false"
                      todir="${destination.dir}"/>
  </target>

  <target name="javadoc"/>

  <target name="create_auto_fvt_zip" description="This target packages the autoFVT.zip file">
      <zip destfile="${auto.fvt.zip.dir}/${bucket}/${auto.fvt.zip}"
         duplicate="add">
      <zipfileset dir="${FVT.base.dir}" 
                  prefix="autoFVT"
                  includes="*,${build.dirs}"
                  excludes="build/buckets/**"/>
      <zipfileset dir="${FVT.base.dir}/src" 
                  prefix="autoFVT/FVT/ws/code/websvcs.fvt/src"
                  includes="${framework.dirs},${bucket.packaging}"/>
      <zipfileset dir="${FVT.base.dir}" prefix="autoFVT">
        <include name="TestBuild.xml"/>
        <include name="bootstrapping.properties"/>
        <include name="simplicityConfig.props"/>
        <include name="meta-data.txt"/>
      </zipfileset>
    </zip> 
  </target>

</project>
