<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../instance.xml">
<!-- file:34 -->
<!ENTITY properties SYSTEM "../xmls/properties.xml">
<!-- file:36 -->
<!ENTITY paths SYSTEM "../xmls/path_refs.xml">
<!-- file:31 -->
<!ENTITY targets SYSTEM "../xmls/targets.xml">
<!-- file:33 -->
<!ENTITY taskdefs SYSTEM "../xmls/taskdefs.xml">
<!-- file:34 -->
<!ENTITY taskdefs_post_compile SYSTEM "../xmls/taskdefs_post_compile.xml">
<!-- file:47 -->
]>
<project name="build" default="buildall" basedir=".">


	<!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
	<property name="componentName" value="soapendpoint/wsfvt/test" />

	<!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
	<path id="componentClasspath">
		<path refid="thinclientclasspath" />
	</path>

	<!--
		The buildall target will execute all of the targets necessary 
		before installing the test into WebSphere.
	-->
	<target name="buildall" depends="setenv, clean, init, server, client, test, preinstall" />

	<!--
		The clean target will clean any files, classes, or directories
		so that a new copy of the test can be built and run.
	-->
	<target name="clean" depends="setenv">
		<delete dir="${FVT.build.classes.dir}/soapendpoint" />
		<delete dir="${FVT.build.work.dir}/soapendpoint" />

		<delete file="${FVT.build.lib.dir}/SoapEndpoint.war" />
		<delete file="${FVT.build.installableApps.dir}/SoapEndpoint.ear" />
	</target>

	<!--
		The init target will initialize any directories, properties, etc. 
		that are needed for the test.
	-->
	<target name="init" depends="setenv">
		<antcall target="component-init" />
	</target>

	<!--
		The server target will build anything necessary for the server
		piece of the test.  Typically this target builds the server side
		EAR.
	-->
	<target name="server" depends="setenv">
		<mkdir dir="${FVT.build.work.dir}/soapendpoint" />
		<mkdir dir="${FVT.build.classes.dir}/soapendpoint" />
		<mkdir dir="${FVT.build.work.dir}/soapendpoint/wsfvt/server"/>

		<javac compiler="modern" srcdir="${FVT.base.dir}" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
			<classpath refid="thinclientclasspath" />
			<include name="src/soapendpoint/wsfvt/server/*.java" />
			<include name="src/soapendpoint/wsfvt/server/errorsei/*.java" />
			<include name="src/soapendpoint/wsfvt/server/jaxb/*.java" />
		</javac>

		<wsgen genwsdl="false" keep="true" verbose="false" destdir="${FVT.build.classes.dir}" resourcedestdir="${FVT.build.work.dir}/soapendpoint/wsfvt/server" sei="soapendpoint.wsfvt.server.errorsei.CompareServiceImpl" classpath="${FVT.build.classes.dir}">
			<classpath refid="classpath" />
		</wsgen>

		<!--
			Generate the Java EE 5 DD Echo service application.
		-->
		<war warfile="${FVT.build.lib.dir}/SoapEndpoint.war" webxml="${FVT.base.dir}/src/soapendpoint/etc/dd/web-2.5.xml">
			<zipfileset dir="${FVT.base.dir}/src/soapendpoint/etc/dd" prefix="WEB-INF/wsdl">
				<include name="*.wsdl" />
				<include name="*.xsd" />
			</zipfileset>
			<zipfileset dir="${FVT.base.dir}/src" prefix="WEB-INF/classes">
				<include name="soapendpoint/wsfvt/server/*.java" />
			</zipfileset>
			<classes dir="${FVT.build.classes.dir}">
				<include name="soapendpoint/wsfvt/server/*.class" />
				<include name="soapendpoint/wsfvt/server/*.java" />
				<include name="soapendpoint/wsfvt/server/jaxb/*.class" />
				<include name="soapendpoint/wsfvt/server/jaxb/*.java" />
				<exclude name="soapendpoint/wsfvt/server/errorsei/**/*"/>
			</classes>
		</war>

		<ear earfile="${FVT.build.installableApps.dir}/SoapEndpoint.ear" appxml="${FVT.base.dir}/src/soapendpoint/etc/dd/application-ee50.xml">
			<fileset dir="${FVT.build.lib.dir}" includes="SoapEndpoint.war" />

			<metainf dir="${FVT.base.dir}/src/soapendpoint/etc/dd">
				<include name="was.policy" />
			</metainf>
		</ear>

		<war warfile="${FVT.build.lib.dir}/SoapEndpointInstallError.war" webxml="${FVT.base.dir}/src/soapendpoint/etc/dd/web-2.5.xml">
			<zipfileset dir="${FVT.base.dir}/src/soapendpoint/etc/dd" prefix="WEB-INF/wsdl">
				<include name="*.wsdl" />
				<include name="*.xsd" />
			</zipfileset>
			<zipfileset dir="${FVT.base.dir}/src" prefix="WEB-INF/classes">
				<include name="soapendpoint/wsfvt/server/errorsei/*.java" />
			</zipfileset>
			<classes dir="${FVT.build.classes.dir}">
				<include name="soapendpoint/wsfvt/server/errorsei/**/*.class" />
				<include name="soapendpoint/wsfvt/server/erorrsei/**/*.java" />
			</classes>
		</war>

		<ear earfile="${FVT.build.installableApps.dir}/SoapEndpointInstallError.ear" appxml="${FVT.base.dir}/src/soapendpoint/etc/dd/application-ee50-installerror.xml">
			<fileset dir="${FVT.build.lib.dir}" includes="SoapEndpointInstallError.war" />
		</ear>
	</target>

	<!--
		The client target will build anything necessary for the client
		piece of the test.  This could just be compiling the client class
		or in the case of a managed client, building a client side EAR
		file.
	-->
	<target name="client" depends="setenv" />

	<!--
		The client target will build anything necessary for the test
		piece of the test.  Often this will just include compiling the
		the JUnit test case file.
	-->
	<target name="test" depends="setenv">
		<javac compiler="modern" srcdir="${FVT.base.dir}/src/soapendpoint/wsfvt/test" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
			<classpath refid="classpath" />
			<include name="*.java" />
		</javac>
	</target>

	<!-- 
		The preinstall target will perform any tasks necessary before the
		application is installed into WebSphere.  This could include running
		ejbdeploy or endptenabler for an EAR that contains an EJB.
	-->
	<target name="preinstall" depends="setenv" />

	<!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
	<target name="install" depends="setenv">
		<ant antfile="${FVT.base.dir}/src/soapendpoint/installTest.xml" dir="${FVT.base.dir}/src/soapendpoint">
			<property name="install.mode" value="${rt.install.mode}" />
		</ant>
	</target>


	<!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
	<target name="uninstall" depends="setenv">
		<ant antfile="${FVT.base.dir}/src/soapendpoint/uninstallTest.xml" dir="${FVT.base.dir}/src/soapendpoint">
			<property name="uninstall.mode" value="${rt.uninstall.mode}" />
		</ant>
	</target>

</project>
