<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml">
        <!ENTITY properties SYSTEM "../../xmls/properties.xml">
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml">
        <!ENTITY targets SYSTEM "../../xmls/targets.xml">
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml">
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
]>

<!--   1.1, 10/12/10
      
    Change History:
    Date       UserId              Feature/Defect          Description
    
    09/23/10   jtnguyen            672049                  New file
-->


<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="jaxws22/xmlelement/wsfvt/test"/>
  <property name="verbose.output" value="false" />

     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>

     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.classes.dir}/jaxws22/xmlelement"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/jaxws22/xmlelement"/>
  </target>
  
                                                  
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test"/> 
  
             
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">      
  
  
     <readCellConfig prefix="server1" key="defaultServer" verbose="false" />

     <javac compiler="modern" fork="true" srcdir="${FVT.base.dir}/src/jaxws22/xmlelement" destdir="${FVT.build.classes.dir}" 
          deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
          <classpath refid="thinclientclasspath" />
          <include name="**/*server/*.java" />
          <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
     </javac>

    
     <echo message="wsgen..." />
     <wsgen 
             destdir="${FVT.build.classes.dir}"
             resourcedestdir="${FVT.build.classes.dir}"
             sourcedestdir="${FVT.build.classes.dir}"
             genwsdl="true"
             verbose="true"
             sei="jaxws22.xmlelement.wsfvt.server.Echo"
             >
        <classpath>
            <pathelement location="${FVT.build.classes.dir}" />
            <path refid="classpath" />
        </classpath>
     </wsgen>
          
     <wsimport fork="true"                
         wsdl="${FVT.build.classes.dir}/EchoService.wsdl"    
         wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/jaxws22/xmlelement/EchoService?wsdl"       
         destdir="${FVT.build.classes.dir}"                                 
         verbose="true"                           
         package="jaxws22.xmlelement.wsfvt.client"  
         keep="true"
         sourcedestdir="${FVT.build.classes.dir}">     
         <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
     </wsimport>
           
     <!-- build XmlElementEcho.ear -->        
             
     <war destfile="${FVT.build.lib.dir}/XmlElementEcho.war" 
            webxml="${FVT.base.dir}/src/jaxws22/xmlelement/etc/dd/web.xml">
        <!-- get the impl -->
        <classes dir="${FVT.build.classes.dir}">
          <include name="jaxws22/xmlelement/wsfvt/server/*.class" />      
              
        </classes>
        <classes dir="${FVT.base.dir}/src/jaxws22/xmlelement/wsfvt/server">
          <include name="*.java" />
        </classes>
        
     </war>   
                
      <ear destfile="${FVT.build.installableApps.dir}/XmlElementEcho.ear" 
                   appxml="${FVT.base.dir}/src/jaxws22/xmlelement/etc/dd/application.xml">
        <fileset dir="${FVT.build.lib.dir}">
          <include name="XmlElementEcho.war"/>
        </fileset>
      </ear>
 
  </target>
    
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
       jaxws22.xmlelement.wsfvt.client.jaxws
  -->                               
  <target name="client" depends="setenv">         
  
      <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxws22/xmlelement"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
      	                source="${build.tests.with.java.level}"
      	                target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
          <!--compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/-->
          <classpath refid="thinclientclasspath" />
          <include name="wsfvt/client/*.java" />
      </javac>


  </target>
                            
                            
  <!-- The tesst target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv">
     <mkdir dir="${FVT.build.classes.dir}/jaxws22/xmlelement" />
     <property name="classroot" value="${FVT.build.classes.dir}/jaxws22/xmlelement"/>
    
          <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxws22/xmlelement"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
	                    source="${build.tests.with.java.level}"
	                    target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
          <!--compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/-->
          <classpath refid="thinclientclasspath" />
          <include name="wsfvt/test/*.java" />
      </javac>
      
  </target>         
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxws22/xmlelement/installTest.xml"
         dir="${FVT.base.dir}/src/jaxws22/xmlelement">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxws22/xmlelement/uninstallTest.xml"
         dir="${FVT.base.dir}/src/jaxws22/xmlelement">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
