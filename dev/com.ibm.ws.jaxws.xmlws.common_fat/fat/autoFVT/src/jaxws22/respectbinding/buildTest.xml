<?xml version="1.0" encoding="UTF-8"?>
<!--

   Description:  Test JAXWS 2.2 Respect Binding V3 changes 
   
   Date        UserId      Defect          Description
   03/30/2010  nthaker                    new file
-->
<project basedir="." default="buildall" name="jaxws22_RespectBinding">

	<property name="componentName" value="jaxws22/respectbinding" />
	<property name="baseName" value="jaxws22" />
	<property name="test.name.rb" value="RespectBindingFAT" />
	<property name="test.name.rb_req_ext" value="RespectBindingFAT_with_required_extensibility_element" />

	<!-- use import instead of entity refs -->   
    <import file="../../xmls/common_imports.xml"/>

	<property name="test.base.dir" value="${FVT.base.dir}/src/${componentName}" />
	<property name="test.work.dir" value="${FVT.build.work.dir}/${componentName}" />

<!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
    <!-- the factory methods test requires the wsdl validator plugin to be on the classpath -->
    <!-- not a likely customer scenario, but dev. wanted this code path covered -->
	<path id="componentClasspath">
        <path refid="thinclientclasspath"/>  
        <pathelement location="${FVT.build.lib.dir}/com.ibm.wsfvt.wsdlvalidator.jar" />
		
	</path>
    
   <target name="printcp" >
      <property name="classpathasprop" refid="componentClasspath"/>
      <echo message="componentClasspath is ${classpathasprop}" />

    </target>

	<target name="buildall" depends="clean, init, server, client, managedclient, plugin, test, preinstall" />

	<target name="init" depends="setenv">
		<echo message="${test.name} Initializing..." />
		<antcall target="component-init" />
		
		<mkdir dir="${FVT.build.work.dir}/${componentName}"/>
		<mkdir dir="${FVT.build.classes.dir}/${componentName}"/>
	</target>

	<target name="clean">
		<echo message="${test.name} Cleaning..." />
		<delete dir="${FVT.build.classes.dir}/${componentName}"/>
		<delete dir="${FVT.build.work.dir}/${componentName}"/>
	</target>
	
	<target name="plugin">  <!-- build the extension point plugin we have to install for testing -->
	   <delete dir="${test.work.dir}/plugin" />
	   <mkdir  dir="${test.work.dir}/plugin" />
	   <javac compiler="modern" srcdir="${test.base.dir}/plugin/src"
			   destdir="${test.work.dir}/plugin"
			   includes="**/*java"
			   deprecation="${deprecation}"
			   debug="${debug}"
			   source="${build.tests.with.java.level}"
			   target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
		
		<copy  todir="${test.work.dir}/plugin">
		  <fileset dir="${test.base.dir}/plugin/src">
	        <include name="**/*java"/>		       
	      </fileset>  
		</copy>
		
		<delete file="${FVT.build.lib.dir}/com.ibm.wsfvt.wsdlvalidator.jar" />
	    <jar destfile="${FVT.build.lib.dir}/com.ibm.wsfvt.wsdlvalidator.jar"
	        manifest="${test.base.dir}/plugin/src/META-INF/MANIFEST.MF"
	    >	    
		  <fileset dir="${test.work.dir}/plugin">
	        <include name="**/*.class"/>	
	        <include name="**/*.java"/>		       
	      </fileset>  
     	  <fileset dir="${test.base.dir}/plugin/src">
	        <include name="plugin.xml"/>		       
	      </fileset>  
	   
      </jar>    
	
	</target>
    


	<!-- Build server artifacts -->
	<target name="server" depends="setenv">
	    <!-- for each folder, call subserver to build the ear -->
    	<property name="server.work.dir" value="${FVT.build.work.dir}/${componentName}/server" />
    	<property name="server.src.dir" value="${FVT.base.dir}/src/${componentName}/server" />
	<antcall target="subserver">
           <param name="folder" value="validRequiredAnnoTrue"/>
        </antcall>		
	<antcall target="subserver">
           <param name="folder" value="validRequiredDDTrue"/>
        </antcall>		
	<antcall target="subserver">
           <param name="folder" value="validRequiredAnnoTrueDDFalse"/>
        </antcall>		
	<antcall target="subserver">
           <param name="folder" value="validRequiredNoFeature"/>
        </antcall>		
	<antcall target="subserver">
           <param name="folder" value="invalidRequiredNoFeature"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredAnnoTrue"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredAnnoTrueOnInput"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredAnnoTrueOnOutput"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredDDTrue"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredDDTrueOnOperation"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredDDTrueOnFault"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredDDFalse"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredAnnoFalse"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredAnnoFalseDDTrue"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidRequiredAnnoTrueDDFalse"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="validNotRequiredNoFeature"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="validNotRequiredAnnoTrue"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidNotRequiredNoFeature"/>
        </antcall>		
        <antcall target="subserver">
           <param name="folder" value="invalidNotRequiredDDTrue"/>
        </antcall>		
	</target>
	
	<!-- called by server for each ear --> 
	<target name="subserver" depends="setenv">  <!-- paramaters: folder -->
	    <echo message="Processing folder: ${folder} "/>
	    <delete dir="${server.work.dir}/${folder}"/>
	    <mkdir dir="${server.work.dir}/${folder}"/>
	    <!-- compile the impl and jaxws beans -->
	    <javac compiler="modern" srcdir="${server.src.dir}/${folder}"
			   destdir="${server.work.dir}/${folder}"
			   includes="*java"
			   deprecation="${deprecation}"
			   debug="${debug}"
			   source="${build.tests.with.java.level}"
			   target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	   	<javac compiler="modern" srcdir="${server.src.dir}/common"
			   destdir="${server.work.dir}/${folder}"
			   includes="**/*java"
			   deprecation="${deprecation}"
			   debug="${debug}"
		       source="${build.tests.with.java.level}"
		       target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
		
		<mkdir dir="${FVT.build.lib.dir}/${componentName}" />
	    <delete file="${FVT.build.lib.dir}/${componentName}/${folder}.war" />
     	<war destfile="${FVT.build.lib.dir}/${componentName}/${folder}.war"
			  webxml="${FVT.base.dir}/src/jaxws22/respectbinding/server/${folder}/web.xml">
			
			<zipfileset dir="${server.src.dir}/common"
				includes="*.xsd"
				prefix="WEB-INF/wsdl" />
		    
			<zipfileset dir="${server.src.dir}/${folder}"
				includes="*.wsdl, *.xsd"
				prefix="WEB-INF/wsdl" />	
			
			<!-- this was used to test that all the urls in the testcase were coded correctly.
			<zipfileset dir="${server.src.dir}/validRequiredNoFeature"
				includes="*.wsdl, *.xsd"
				prefix="WEB-INF/wsdl" />	
			-->	
     		<!-- add the extensions.xml in the WEB-INF folder 
			<zipfileset dir="${server.src.dir}/common"
				includes="extensions.xml"
				prefix="META-INF" />	
     		-->
     		
			<zipfileset dir="${server.src.dir}/${folder}"
				includes="webservices.xml"
				prefix="WEB-INF" />		
			
			<zipfileset dir="${server.src.dir}/${folder}"
				includes="**/*.java"
				prefix="WEB-INF/src" />		
			
			
			<classes dir="${server.work.dir}/${folder}">			
				<include name="**/*.class" />			
			</classes>
		</war>
		
		<delete file="${FVT.build.installableApps.dir}/jaxws22rb_${folder}.ear"/>
		<ear earfile="${FVT.build.installableApps.dir}/jaxws22rb_${folder}.ear"
		     appxml="${FVT.base.dir}/src/jaxws22/respectbinding/server/${folder}/application.xml">
			<fileset dir="${FVT.build.lib.dir}/${componentName}" includes="${folder}.war" />		
		</ear>		    
	</target>  <!-- end subserver --> 

	<target name="client" >	
	   <!-- gen the classes needed to run the FactoryMethods test -->
		<wsimport debug="${debug}"
				 verbose="true"
			      keep="true"
			      destdir="${FVT.build.classes.dir}"			    
			      wsdl="${FVT.base.dir}/src/jaxws22/respectbinding/client/wsdl/NoExtension.wsdl"
		 />	
 	   	<javac compiler="modern" srcdir="${test.base.dir}/client" fork="true"
			   destdir="${FVT.build.classes.dir}"
			   includes="**/*java"
			   deprecation="${deprecation}"
			   debug="${debug}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
			<classpath>
				<path refid="classpath" />
			</classpath>
            <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
		</javac>   	   
	</target>
	
	 <target name="managedclient" depends="setenv">  
       <delete file="${FVT.build.lib.dir}/jaxws22rbclient.jar" />
	   <jar destfile="${FVT.build.lib.dir}/jaxws22rbclient.jar"
	        manifest="${FVT.base.dir}/src/jaxws22/respectbinding/client/MANIFEST.MF"
	    >
		  <fileset dir="${FVT.build.classes.dir}">
	        <include name="jaxws22/respectbinding/server/*.class"/>	
	        <include name="jaxws22/respectbinding/client/*.class"/>	
	      </fileset>  
	        
         <!-- pick up application-client.xml and manifest.mf -->
         <zipfileset dir="${FVT.base.dir}/src/jaxws22/respectbinding/client"
            prefix="META-INF">          	
           <exclude name="**/application.xml" />
           <exclude name="**/*.java" />
         </zipfileset> 
      </jar>    
      
      <delete file="${FVT.build.installableApps.dir}/jaxws22rbclient.ear" />
      <ear earfile="${FVT.build.installableApps.dir}/jaxws22rbclient.ear"       
         appxml="${FVT.base.dir}/src/jaxws22/respectbinding/client/application.xml">	
	      <fileset dir="${FVT.build.lib.dir}" includes="jaxws22rbclient.jar"/>
      </ear>
  </target>
	
	<!-- Build test artifacts -->
	<target name="test" depends="setenv" >
		<echo message="${test.name} building TestCases..." />
					      	
		<!-- compile test classes -->
		<javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentName}"
			   destdir="${FVT.build.classes.dir}"
			   includes="**/test/**/*.java"
			   deprecation="${deprecation}"
			   debug="${debug}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>	
		
	</target>
	
	<!-- run the factory test in managed environment until we can get unmanaged working --> 
	<!-- depends on test.  -->
	<target name="factorymanagedclient" depends="setenv">  
       <delete file="${FVT.build.lib.dir}/jaxws22rbfclient.jar" />
	   <jar destfile="${FVT.build.lib.dir}/jaxws22rbfclient.jar"
	        manifest="${FVT.base.dir}/src/jaxws22/respectbinding/test/fachack/MANIFEST.MF"
	    >
		  <fileset dir="${FVT.build.classes.dir}">
	        <include name="jaxws22/respectbinding/client/*.class"/>	
	         <include name="jaxws22/respectbinding/server/*.class"/>	
	         <include name="jaxws22/respectbinding/test/*.class"/>	
	      </fileset>  
	        
         <!-- pick up application-client.xml and manifest.mf -->
         <zipfileset dir="${FVT.base.dir}/src/jaxws22/respectbinding/test/fachack"
            prefix="META-INF">          	
           <exclude name="**/application.xml" />
           <exclude name="**/*.java" />
         </zipfileset> 
         
           <zipfileset dir="${FVT.base.dir}/src/jaxws22/respectbinding/client/wsdl"
            prefix="META-INF/wsdl">          	
            <include name="*" />
         </zipfileset> 
      </jar>    
      
      <delete file="${FVT.build.installableApps.dir}/jaxws22rbfclient.ear" />
      <ear earfile="${FVT.build.installableApps.dir}/jaxws22rbfclient.ear"       
         appxml="${FVT.base.dir}/src/jaxws22/respectbinding/test/fachack/application.xml">	
	      <fileset dir="${FVT.build.lib.dir}" includes="jaxws22rbfclient.jar"/>
	      
          <zipfileset dir="${FVT.base.dir}/src/jaxws22/respectbinding/client/wsdl"
            prefix="META-INF/wsdl">          	
            <include name="*" />
         </zipfileset> 
      </ear>
  </target>

	<target name="preinstall" />
	
	<target name="install" depends="setenv">
		<ant antfile="${FVT.base.dir}/src/${componentName}/installTest.xml"
			 dir="${FVT.base.dir}/src/${componentName}">
			<property name="install.mode" value="${rt.install.mode}"/>
		</ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/${componentName}/uninstallTest.xml"
         dir="${FVT.base.dir}/src/${componentName}">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
</project>
