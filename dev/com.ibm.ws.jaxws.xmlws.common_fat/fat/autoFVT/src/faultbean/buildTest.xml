<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../instance.xml"><!-- file:34 -->
        <!ENTITY properties SYSTEM "../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../xmls/path_refs.xml"><!-- file:31 -->
        <!ENTITY targets SYSTEM "../xmls/targets.xml"><!-- file:33 -->
        <!ENTITY taskdefs SYSTEM "../xmls/taskdefs.xml"><!-- file:34 -->
        <!ENTITY taskdefs_post_compile SYSTEM "../xmls/taskdefs_post_compile.xml"><!-- file:47 -->
]>

<!--
   1.5, 9/28/10
   Date       UserId      Defect          Description
   06/18/2010 jtnguyen    657385          New File
   07/08/2010 jtnguyen    657385.1        Removed dashes line
   07/12/2010 jtnguyen    66036           Removed dashes
   08/27/2010 jtnguyen    667709.1        Added wsdllocation in wsimport to run on Z
   09/28/2010 jtnguyen    671978          Added test for story 13354 cust. fault name via binding
-->

<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="faultbean/wsfvt/test"/>
  
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
    <dirset dir="${FVT.build.classes.dir}">
       <include name="faultbean/wsfvt/test"/> 
       <include name="faultbean/wsfvt/server"/>           
    </dirset>
  </path>
     
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.classes.dir}"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/faultbean"/>
    <delete file="${FVT.build.lib.dir}/AddNumbers.war"/>
    <delete file="${FVT.build.installableApps.dir}/AddNumbers.ear"/>
  </target>
  
                                                  
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/> 
  
             
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">

    <!-- compile and override the AddNumbers class -->
    
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/faultbean"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/server/*.java"/>
    </javac>
    
    <!-- comment this out since wsgen command in tWAS  has problems, using the one generated by CXF runtime. --> 
    <!-- generate wsdl     
        <wsgen genwsdl="true" fork="true"
               keep="true"
               verbose="true"
               destdir="${FVT.build.classes.dir}"
               resourcedestdir="${FVT.build.classes.dir}"
               sei="faultbean.wsfvt.server.AddNumbers">
            <classpath>
                <pathelement location="${FVT.build.classes.dir}" />
                <path refid="classpath" />
            </classpath>
            <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
        </wsgen>

  	--> 
        <mkdir dir="${FVT.build.classes.dir}/faultbean/wsdl" />
        <copy todir="${FVT.build.classes.dir}/faultbean/wsdl">
            <fileset dir="${FVT.base.dir}/src/faultbean/etc/wsdl">
                <include name="AddNumbers.wsdl" />
                <include name="AddNumbers*.xsd" />
            </fileset>        
        </copy>
   
   
        
    <!-- Get the cells config info -->
    
    <readCellConfig prefix="server1"
                        key="defaultServer"                                                
                        verbose="${verbose.output}" />
             
                                                                   
    <replace file="${FVT.build.classes.dir}/faultbean/wsdl/AddNumbers.wsdl"
            value="http://${server1.hostName}:${server1.WC_defaulthost}/FaultBean/AddNumbersService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
    </replace>
    
        
         
    <!-- only package the service, without the wsdl or any artifacts -->
    <war warfile="${FVT.build.lib.dir}/AddNumbers.war"
         webxml="${FVT.base.dir}/src/faultbean/etc/dd/web.xml">
      
      
      <classes dir="${FVT.build.classes.dir}">
        <include name="faultbean/wsfvt/server/*.class"/>               
      </classes>
      
      
      <!-- also copy the AddNumbers.java for debug -->
      <classes dir="${FVT.base.dir}/src">
        <include name="faultbean/wsfvt/server/*.java"/>       
      </classes>
      
    </war>
    
    <ear earfile="${FVT.build.installableApps.dir}/AddNumbers.ear" 
         appxml="${FVT.base.dir}/src/faultbean/etc/dd/application.xml">
      <fileset dir="${FVT.build.lib.dir}" includes="AddNumbers.war"/>
    </ear>
    
  </target>
    
               
   <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->    
  
  <target name="client" depends="setenv">      
  </target>         
 
                             
  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv">
        
    <!-- Get the cells config info -->
    <readCellConfig prefix="server1"
                        key="defaultServer"                                                
                        verbose="${verbose.output}" />
             
   <!-- generate artifacts -->
    <wsimport          
         wsdl="${FVT.build.classes.dir}/faultbean/wsdl/AddNumbers.wsdl"   
         wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/FaultBean/AddNumbers?wsdl"         
         destdir="${FVT.build.classes.dir}"   
         verbose="true"
         keep="true">  
    </wsimport>
   
    <!-- generate artifact using wsdl and a client custom binding file, package="faultbean.binding.clienttest"   -->
    
    <wsimport fork="true"           
    
         wsdl="${FVT.base.dir}/src/faultbean/etc/wsdl/AddNumbers.wsdl"   
         binding="${FVT.base.dir}/src/faultbean/etc/wsdl/AddNumbersBinding.xml"   
         wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/FaultBean/AddNumbers?wsdl"         
         destdir="${FVT.build.classes.dir}"   
         package="faultbean.binding.clienttest"
         verbose="true"
         keep="true">  
         <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
    </wsimport>
      

                           
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/faultbean" fork="true"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/test/*.java"/>
        <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
    </javac>
      
  </target>
                            
                            
             
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
  <target name="preinstall" depends="setenv">
  </target>         
  
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/faultbean/installTest.xml"
         dir="${FVT.base.dir}/src/faultbean">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/faultbean/uninstallTest.xml"
         dir="${FVT.base.dir}/src/faultbean">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
