<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml">
        <!ENTITY properties SYSTEM "../../xmls/properties.xml">
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml">
        <!ENTITY targets SYSTEM "../../xmls/targets.xml">
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml">
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
]>

<!-- 
 1.1, 4/15/08
 Change History:
 Date     UserId      Defect          Description
 03/10/08 jramos      LIDB4418-12.01  New File
-->

<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="mtom21/threshold/wsfvt/test"/>
  
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>
   
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/mtom21/threshold"/>
    <mkdir dir="${FVT.build.work.dir}/mtom21/threshold/wsfvt/server"/>
    <mkdir dir="${FVT.build.work.dir}/mtom21/threshold/wsfvt/client"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/mtom21/threshold" quiet="true"/>
    <delete dir="${FVT.build.work.dir}/mtom21/threshold" quiet="true"/>
    <delete file="${FVT.build.lib.dir}/MTOMThreshold21.war" quiet="true"/>
    <delete file="${FVT.build.installableApps.dir}/MTOMThreshold21.ear" quiet="true"/>
  </target>
                                                    
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/> 
  
             
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">
 
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom21/threshold/etc/wsdl/VerifyMTOMProxyServer.wsdl"            
         destdir="${FVT.build.classes.dir}"
         package="mtom21.threshold.wsfvt.server.proxy">
    </wsimport>
     
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/mtom21/threshold"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/server/*.java"/>
    </javac> 

    <war warfile="${FVT.build.lib.dir}/MTOMThreshold21.war"
         webxml="${FVT.base.dir}/src/mtom21/threshold/etc/dd/web.xml">
      
      <webinf dir="${FVT.base.dir}/src/mtom21/threshold/etc">
        <include name="wsdl/*.wsdl"/>
        <include name="wsdl/*.xsd"/>
      </webinf>

      <classes dir="${FVT.build.classes.dir}">
        <include name="mtom21/threshold/wsfvt/server/**/*.class"/>
        <exclude name="mtom21/threshold/wsfvt/server/**/*Service.class"/>
      </classes>
    </war>
    
    <ear earfile="${FVT.build.installableApps.dir}/MTOMThreshold21.ear" 
         appxml="${FVT.base.dir}/src/mtom21/threshold/etc/dd/application.xml">
      <fileset dir="${FVT.build.lib.dir}" includes="MTOMThreshold21.war"/>
    </ear>
     
  </target>

  <target name="client" depends="setenv">
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom21/threshold/etc/wsdl/VerifyMTOMDispatch.wsdl"            
         destdir="${FVT.build.classes.dir}"
         package="mtom21.threshold.wsfvt.client.dispatch">
    </wsimport>
   
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom21/threshold/etc/wsdl/VerifyMTOMProxyDataHandler.wsdl"            
         destdir="${FVT.build.classes.dir}"
         package="mtom21.threshold.wsfvt.client.proxydatahandler">
    </wsimport>
   
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom21/threshold/etc/wsdl/VerifyMTOMProxy.wsdl"            
         destdir="${FVT.build.classes.dir}"
         package="mtom21.threshold.wsfvt.client.proxy">
    </wsimport>
    
    <wsimport                 
         wsdl="${FVT.base.dir}/src/mtom21/threshold/etc/wsdl/VerifyMTOMTextPlain.wsdl"            
         destdir="${FVT.build.classes.dir}"
         package="mtom21.threshold.wsfvt.client.textplain">
    </wsimport>
     
    <readCellConfig prefix="server1" key="defaultServer"/>

    <copy todir="${FVT.build.work.dir}/mtom21/threshold/wsfvt/client" overwrite="yes">
      <fileset dir="${FVT.base.dir}/src/mtom21/threshold/wsfvt/client">
        <include name="*.java"/>
      </fileset>
      
      <filterset id="replace.filter.set1">
        <filter token="REPLACE_WITH_HOST_NAME" value="${server1.hostName}"/>
        <filter token="REPLACE_WITH_PORT_NUM"  value="${server1.WC_defaulthost}"/>
      </filterset>
    </copy>
 
    <javac compiler="modern" srcdir="${FVT.build.work.dir}/mtom21/threshold"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>  
      <include name="**/client/*.java"/>
    </javac>
  </target> 

  <target name="test" depends="setenv, client">
  
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/mtom21/threshold"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/test/*.java"/>
    </javac>
      
  </target>         
       
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
  <target name="preinstall" depends="setenv">
  </target>         
  
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/mtom21/threshold/installTest.xml"
         dir="${FVT.base.dir}/src/mtom21/threshold">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/mtom21/threshold/uninstallTest.xml"
         dir="${FVT.base.dir}/src/mtom21/threshold">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
  
</project>
