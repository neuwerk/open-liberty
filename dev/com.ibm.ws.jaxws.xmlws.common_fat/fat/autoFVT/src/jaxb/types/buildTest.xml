<?xml version="1.0"?>                     
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml">
        <!ENTITY properties SYSTEM "../../xmls/properties.xml">
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml">
        <!ENTITY targets SYSTEM "../../xmls/targets.xml">
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml">
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
]>

<!-- 
  @(#) 1.8 autoFVT/src/jaxb/types/buildTest.xml, WAS.websvcs.fvt, WAS85.FVT, cf011231.01 3/13/10 18:10:16 [8/8/12 06:56:20]
     Description: Build file for the WAS jaxb types test.
     
     Date        Author       Feature/Defect          Description
     11/02/2006  ulbricht     420151                  New File
     02/11/2007  ulbricht     450943                  Add attachments scenario
     01/29/2008  ulbricht     290938                  Add amazon WSDL test
     04/15/09    btiffany    PK71347.fvt              add apar tset
  03/13/10    lizet        D643070                 2.2 RI upgrade
-->
<project name="build" default="buildall" basedir=".">

     
  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->   
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;
  
     
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="jaxb/types/wsfvt/test"/>
  
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <pathelement location="${FVT.base.dir}/build/work/jaxb/pk71347"/>
    <path refid="thinclientclasspath"/>    
  </path>
  
    <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/>  
     
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/jaxb/types"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/jaxb/types"/>
    <delete dir="${FVT.build.classes.dir}/net/wachovia"/>
    <delete dir="${FVT.build.classes.dir}/swatest"/>
    <delete dir="${FVT.build.work.dir}/jaxb/types"/>
    <delete file="${FVT.build.lib.dir}/WIJaxbTypes1.war"/>
    <delete file="${FVT.build.lib.dir}/WIJaxbTypes2.war"/>
    <delete file="${FVT.build.lib.dir}/WIJaxbTypes3.war"/>
    <delete file="${FVT.build.installableApps.dir}/WIJaxbTypes.ear"/>
  </target>     
  
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="setenv">
                                     
    <readCellConfig prefix="server1" key="defaultServer" verbose="false"/>
    
<!--	<wsimport debug="${debug}"
              verbose="false"
              keep="true"
              destdir="${FVT.build.classes.dir}"
              wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes/MathService_V1X0?wsdl"
              wsdl="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war1/wsdl/MathV1.0.wsdl">
    </wsimport>-->
	<java classname="com.sun.tools.ws.WsImport" classpathref="WsimportJavaClasspath" dir="${basedir}" fork="true" spawn="false" maxmemory="1024m" failonerror="true" taskname="run.wsimport" >
		<arg value="-d" />
		<arg value="${FVT.build.classes.dir}" />
		<arg value="-verbose" />
		<arg value="-keep" />
		<arg value="-J-source"/>
		<arg value="-J1.6"/>
		<arg value="-J-target"/>
		<arg value="-J1.6"/>			
		<arg value="-wsdllocation" />
		<arg value="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes/MathService_V1X0?wsdl" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war1/wsdl/MathV1.0.wsdl" />
	</java>     			
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxb/types"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/server/Math*.java"/>
    </javac>
      
    <war warfile="${FVT.build.lib.dir}/WIJaxbTypes1.war"
         webxml="${FVT.base.dir}/src/jaxb/types/etc/dd/war1/web.xml">
      <webinf dir="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war1">
        <include name="wsdl/*.wsdl"/>
        <include name="wsdl/*.xsd"/>
      </webinf>
      <classes dir="${FVT.build.classes.dir}">
        <exclude name="jaxb/types/wsfvt/server/AWSE*.class"/>
        <include name="jaxb/types/wsfvt/server/*.class"/>
        <include name="net/wachovia/**/*.class"/>
      </classes>
    </war>
    
<!--	<wsimport debug="${debug}"
              verbose="false"
              keep="true"
              destdir="${FVT.build.classes.dir}"
              wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes2/SwaTestService?wsdl"
              binding="${FVT.base.dir}/src/jaxb/types/etc/bnd/customfile-server.xml"
              wsdl="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war2/wsdl/SwaTestService.wsdl">
    </wsimport>-->
	<java classname="com.sun.tools.ws.WsImport" classpathref="WsimportJavaClasspath" dir="${basedir}" fork="true" spawn="false" maxmemory="1024m" failonerror="true" taskname="run.wsimport" >
		<sysproperty key="javax.xml.accessExternalSchema" value="all" />
		<arg value="-d" />
		<arg value="${FVT.build.classes.dir}" />
		<arg value="-b" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/bnd/customfile-server.xml" />
		<arg value="-verbose" />
		<arg value="-keep" />
		<arg value="-J-source"/>
		<arg value="-J1.6"/>
		<arg value="-J-target"/>
		<arg value="-J1.6"/>			
		<arg value="-wsdllocation" />
		<arg value="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes2/SwaTestService?wsdl" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war2/wsdl/SwaTestService.wsdl" />
	</java>       
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxb/types"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/server/Swa*.java"/>
    </javac>
      
    <war warfile="${FVT.build.lib.dir}/WIJaxbTypes2.war"
         webxml="${FVT.base.dir}/src/jaxb/types/etc/dd/war2/web.xml">
      <webinf dir="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war2">
        <include name="wsdl/*.wsdl"/>
        <include name="wsdl/*.xsd"/>
      </webinf>
      <classes dir="${FVT.build.classes.dir}">
        <include name="swatest/server/**/*.class"/>
      </classes>
	  <zipfileset dir="${FVT.base.dir}/src/jaxb/types/etc/content" includes="*.*"/>
    </war>
    			
<!--	<wsimport debug="${debug}"
              verbose="false"
              keep="true"
              destdir="${FVT.build.classes.dir}"
              package="jaxb.types.wsfvt.server.amazon"
              wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes3/AWSECommerceService?wsdl"
              wsdl="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war3/wsdl/AWSECommerceService.wsdl">
    </wsimport>	-->		
	<java classname="com.sun.tools.ws.WsImport" classpathref="WsimportJavaClasspath" dir="${basedir}" fork="true" spawn="false" maxmemory="1024m" failonerror="true" taskname="run.wsimport" >
		<sysproperty key="javax.xml.accessExternalSchema" value="all" />
		<arg value="-d" />
		<arg value="${FVT.build.classes.dir}" />
		<arg value="-p" />
		<arg value="jaxb.types.wsfvt.server.amazon" />
		<arg value="-verbose" />
		<arg value="-keep" />
		<arg value="-J-source"/>
		<arg value="-J1.6"/>
		<arg value="-J-target"/>
		<arg value="-J1.6"/>			
		<arg value="-wsdllocation" />
		<arg value="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes3/AWSECommerceService?wsdl" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war3/wsdl/AWSECommerceService.wsdl" />
	</java>                      
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxb/types"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/server/AWSE*.java"/>
    </javac>
    
    <war warfile="${FVT.build.lib.dir}/WIJaxbTypes3.war"
         webxml="${FVT.base.dir}/src/jaxb/types/etc/dd/war3/web.xml">
      <webinf dir="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war3">
        <include name="wsdl/*.wsdl"/>
        <include name="wsdl/*.xsd"/>
      </webinf>
      <classes dir="${FVT.build.classes.dir}">
        <include name="jaxb/types/wsfvt/server/amazon/**/*.class"/>
        <include name="jaxb/types/wsfvt/server/**/AWSE*.class"/>
      </classes>
    </war>
                     
    <ear earfile="${FVT.build.installableApps.dir}/WIJaxbTypes.ear" 
         appxml="${FVT.base.dir}/src/jaxb/types/etc/dd/application.xml">
      <fileset dir="${FVT.build.lib.dir}" includes="WIJaxbTypes1.war"/>
      <fileset dir="${FVT.build.lib.dir}" includes="WIJaxbTypes2.war"/>
      <fileset dir="${FVT.build.lib.dir}" includes="WIJaxbTypes3.war"/>
    </ear>
    
  </target>
    
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->                               
  <target name="client" depends="setenv">
  
    <readCellConfig prefix="server1" key="defaultServer" verbose="false"/>
    
    <mkdir dir="${FVT.build.work.dir}/jaxb/types/wsfvt/client"/>
    <copy todir="${FVT.build.work.dir}/jaxb/types/wsfvt/client" overwrite="yes">
      <fileset dir="${FVT.base.dir}/src/jaxb/types/wsfvt/client">
        <include name="*Client.java"/> 
      </fileset>
      <filterset id="replace.filter.set1">
        <filter token="REPLACE_WITH_HOST_NAME" value="${server1.hostName}"/>
        <filter token="REPLACE_WITH_PORT_NUM"  value="${server1.WC_defaulthost}"/>
      </filterset>
    </copy>

<!--	<wsimport debug="${debug}"
              verbose="false"
              keep="true"
              destdir="${FVT.build.classes.dir}"
              wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes2/SwaTestService?wsdl"
              binding="${FVT.base.dir}/src/jaxb/types/etc/bnd/customfile-client.xml"
              wsdl="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war2/wsdl/SwaTestService.wsdl">
    </wsimport>-->
	<java classname="com.sun.tools.ws.WsImport" classpathref="WsimportJavaClasspath" dir="${basedir}" fork="true" spawn="false" maxmemory="1024m" failonerror="true" taskname="run.wsimport" >
		<sysproperty key="javax.xml.accessExternalSchema" value="all" />
		<arg value="-d" />
		<arg value="${FVT.build.classes.dir}" />
		<arg value="-b" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/bnd/customfile-client.xml" />
		<arg value="-verbose" />
		<arg value="-keep" />
		<arg value="-J-source"/>
		<arg value="-J1.6"/>
		<arg value="-J-target"/>
		<arg value="-J1.6"/>			
		<arg value="-wsdllocation" />
		<arg value="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes2/SwaTestService?wsdl" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war2/wsdl/SwaTestService.wsdl" />
	</java>      
<!--	<wsimport debug="${debug}"
              verbose="false"
              keep="true"
              destdir="${FVT.build.classes.dir}"
              package="jaxb.types.wsfvt.server.amazon"
              wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes3/AWSECommerceService?wsdl"
              wsdl="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war3/wsdl/AWSECommerceService.wsdl">
    </wsimport>-->			
	<java classname="com.sun.tools.ws.WsImport" classpathref="WsimportJavaClasspath" dir="${basedir}" fork="true" spawn="false" maxmemory="1024m" failonerror="true" taskname="run.wsimport" >
		<sysproperty key="javax.xml.accessExternalSchema" value="all" />
		<arg value="-d" />
		<arg value="${FVT.build.classes.dir}" />
		<arg value="-p" />
		<arg value="jaxb.types.wsfvt.server.amazon" />
		<arg value="-verbose" />
		<arg value="-keep" />
		<arg value="-J-source"/>
		<arg value="-J1.6"/>
		<arg value="-J-target"/>
		<arg value="-J1.6"/>			
		<arg value="-wsdllocation" />
		<arg value="http://${server1.hostName}:${server1.WC_defaulthost}/wijaxbtypes3/AWSECommerceService?wsdl" />
		<arg value="${FVT.base.dir}/src/jaxb/types/etc/wsdl/war3/wsdl/AWSECommerceService.wsdl" />
	</java>                     
    <javac compiler="modern" srcdir="${FVT.build.work.dir}/jaxb/types"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/client/*.java"/>
    </javac>
      
  </target>
                            
                            
  <!-- The client target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv">
  
      <delete dir="${FVT.base.dir}/build/work/jaxb/pk71347" />
      <mkdir dir="${FVT.base.dir}/build/work/jaxb/pk71347" />
      <xjc schema="${FVT.base.dir}/src/jaxb/types/wsfvt/test/pk71347.xsd" 
         destdir="${FVT.base.dir}/build/work/jaxb/pk71347"/>    
	  
   <javac compiler="modern" srcdir="${FVT.base.dir}/build/work/jaxb/pk71347"
           destdir="${FVT.base.dir}/build/work/jaxb/pk71347"
           deprecation="${deprecation}"
           debug="${debug}"
     	   source="${build.tests.with.java.level}"
     	   target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/*.java"/>
    </javac>   
      
  
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/jaxb/types"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"         
      />
      <classpath location="${FVT.base.dir}/build/work/jaxb/pk71347" />
      <include name="**/test/*.java"/>
      <include name="wsfvt/test/books/*.java"/>
    </javac>

  </target>         
  
             
  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->                               
  <target name="preinstall" depends="setenv">
  </target>         
  
  
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxb/types/installTest.xml"
         dir="${FVT.base.dir}/src/jaxb/types">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/jaxb/types/uninstallTest.xml"
         dir="${FVT.base.dir}/src/jaxb/types">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
