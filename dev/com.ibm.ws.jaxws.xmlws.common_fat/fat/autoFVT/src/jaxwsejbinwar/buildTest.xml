<?xml version="1.0"?>                     
<!--

   Description:  Test JAXWS ejb in war 
   
   Date        UserId      Defect          Description
   07/10/2010  btiffany    F743-31413      new file
   08/03/2010  btiffany    F743-31533      added client ref tests
-->

<project name="build" default="buildall" basedir=".">

  <!-- use import instead of entity refs -->   
  <import file="../xmls/common_imports.xml"/>
  
  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->                     
  <property name="componentName" value="jaxwsejbinwar"/>
  
  <property name="workdir" value="${FVT.build.work.dir}/${componentName}" />
  <property name="workdir2" value="${FVT.build.work.dir}/${componentName}2" />
  <property name="workdir3" value="${FVT.build.work.dir}/${componentName}3" />
  <property name="workdir4" value="${FVT.build.work.dir}/${componentName}4" />
  <property name="workdir5" value="${FVT.build.work.dir}/${componentName}5" />
  <property name="srcdir" value="${basedir}" />
     
  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath 
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>     
     
  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->    
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${workdir}"/>
    <mkdir dir="${workdir2}"/>
    <mkdir dir="${workdir3}"/>
    <mkdir dir="${workdir4}"/>
     <mkdir dir="${workdir5}"/>
  </target>                       
  
     
  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->                       
  <target name="clean" depends="setenv">
    <delete dir="${workdir}" />
    <delete dir="${workdir2}" />
    <delete dir="${workdir3}" />
    <delete dir="${workdir4}" />
    <delete dir="${workdir5}" />
    <delete dir="${FVT.build.classes.dir}/${componentName}"/>    
  </target>
  
   
  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->                                                                                      
  <target name="buildall" depends="setenv, clean, init, server,  client, test, preinstall"/>  
  
  <!-- only used during development. Since the services call each other, we need these
      wsdls to build the clients before we can compile the impls.
      These had to be generated before the impls had any client refs in them that would
      break compilation. 
  -->     
  <target name="gensrcwsdls" depends="setenv, clean, init" >
       <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir}"
           deprecation="${deprecation}"
           debug="${debug}"
  	       source="${build.tests.with.java.level}"
  	       target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*.java"/> 
          <exclude name="**/server/CommonClient.java" />          
      </javac>
        <wsgen genwsdl="true" keep="true" verbose="false"
                    destdir="${workdir}"
                    resourcedestdir="${workdir}"
                    sourcedestdir="${workdir}"
                    sei="jaxwsejbinwar.server.EjbInWarClassesHello"
                    >
                  <classpath>
                        <pathelement path="${workdir}"/>    
                        <path refid="classpath"/>                        
                  </classpath>
         </wsgen> 
       <wsgen genwsdl="true" keep="true" verbose="false"
                    destdir="${workdir}"
                    resourcedestdir="${workdir}"
                    sourcedestdir="${workdir}"
                    sei="jaxwsejbinwar.server.EjbInJarHello"
                    >
                  <classpath>
                        <pathelement path="${workdir}"/>    
                        <path refid="classpath"/>                        
                  </classpath>
        </wsgen>
        <wsgen genwsdl="true" keep="true" verbose="false"
                    destdir="${workdir}"
                    resourcedestdir="${workdir}"
                    sourcedestdir="${workdir}"
                    sei="jaxwsejbinwar.server.EjbInWarLibHello"
                    >
                  <classpath>
                        <pathelement path="${workdir}"/>    
                        <path refid="classpath"/>                        
                  </classpath>
         </wsgen>  
        <wsgen genwsdl="true" keep="true" verbose="false"
                    destdir="${workdir}"
                    resourcedestdir="${workdir}"
                    sourcedestdir="${workdir}"
                    sei="jaxwsejbinwar.server.ServletInWarClassesHello"
                    >
                  <classpath>
                        <pathelement path="${workdir}"/>    
                        <path refid="classpath"/>                        
                  </classpath>
         </wsgen> 
         <wsgen genwsdl="true" keep="true" verbose="false"
                    destdir="${workdir}"
                    resourcedestdir="${workdir}"
                    sourcedestdir="${workdir}"
                    sei="jaxwsejbinwar.server.ServletInWarLibHello"
                    >
                  <classpath>
                        <pathelement path="${workdir}"/>    
                        <path refid="classpath"/>                        
                  </classpath>
         </wsgen>                                                            
  </target>
  
  
 
  
  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->                               
  <target name="server" depends="init, genclient">
      <!-- genclient put all the client artifacts in workdir4, copy to classes dir.  -->
      <copy todir="${FVT.build.classes.dir}">
          <fileset dir="${workdir4}"/>
     </copy>          
      
      <!-- compile a  fake client class to get around compile dependency until
           we have the generated artifacts built from the impls, then can generate the real one -->
      <!--
	  <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*DummyClient.java"/>          
      </javac>  
      --> 
	  <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir2}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*CommonClient.java"/>          
      </javac>      
      <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*CommonClient.java"/>          
      </javac>        
       <!-- compile impls for the web-inf classes dir -->
      <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*WarClassesHello.java"/>          
      </javac>  
      
       <!-- compile impls for the jar file -->
       <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir2}"
           deprecation="${deprecation}"
           debug="${debug}"
       	   source="${build.tests.with.java.level}"
       	   target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*LibHello.java"/>
      </javac>
      
        <!-- compile impls that are going into a traditional ejb jar file  --> 
        <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir5}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath>
                <pathelement path="${workdir5}"/>    
                <path refid="classpath"/>                        
          </classpath>         
          <include name="**/server/EjbInJarHello.java"/>
           <include name="**/server/CommonClient.java"/>
      </javac> 
      
      <!-- we'd like the services to also contain clients so we can
          call other services and make sure that works.  In order
          to do that we need to generate client artifacts before
          we compile the actual client impl code -->
       <!-- <antcall target="genclient"/> -->
       <copy todir="${workdir}">
                <fileset dir="${workdir4}"/>
       </copy>
       <copy todir="${workdir5}">
                <fileset dir="${workdir4}"/>
       </copy>

       
       <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*CommonClient.java"/>
      </javac>  
      <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir5}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server/*CommonClient.java"/>
      </javac>  
         
      <!-- this jar file is going into the war --> 
      <delete file="${FVT.build.lib.dir}/ejbinwar.jar" />
      <jar destfile="${FVT.build.lib.dir}/ejbinwar.jar"  
          basedir="${workdir2}"
          includes="**/*">
          
           <zipfileset dir="${srcdir}/server/dd_jar_in_war"  prefix="META-INF/">               
                <include name="web-fragment.xml" />
           </zipfileset>
       	   <zipfileset dir="${srcdir}/server/dd_jar_in_war"  prefix="WEB-INF/">           
           		<include name="ejb-jar.xml" />          
       	   </zipfileset>
       </jar>
       
 
      
      <!-- let's use dynamic bean gen or doc-lit minimal 
         and just skip packing wsgen  beans for service side -->     
                
      <delete file="${FVT.build.lib.dir}/ejbinwar.war" />
        <war destfile="${FVT.build.lib.dir}/ejbinwar.war"
              webxml="${srcdir}/server/dd_war/web.xml">
              
        <!-- optional file, but we would like to know that it actually works when used -->     
        <zipfileset dir="${srcdir}/server/dd_war"
                includes="webservices.xml"
                prefix="WEB-INF" />                                    
         <zipfileset dir="${srcdir}/server/dd_war"
                includes="ejb-jar.xml"
                prefix="WEB-INF" />
                
        <!-- package a wsdl that is referenced in webservices.xml -->
        <zipfileset dir="${srcdir}/server/wsdl"
                includes="*"
                prefix="WEB-INF/webservicesxml" />                
            
         <zipfileset dir="${FVT.build.lib.dir}"
                includes="ejbinwar.jar"
                prefix="WEB-INF/lib" />    
                
            <classes dir="${workdir}">            
                <include name="**/*.class" />    
                <include name="**/*.java" />        
            </classes>
        </war>
        
       <!-- finally, build a traditional jaxws ejb in a jar, to make sure it can interop and
           that endptenabler or deploy code doesn't trip over the mixture of ejb's
       --> 
        <javac compiler="modern" srcdir="${basedir}"
           destdir="${workdir5}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath>
                <pathelement path="${workdir5}"/>    
                <path refid="classpath"/>                        
          </classpath>         
          <include name="**/server/EjbInJarHello.java"/>
           <include name="**/server/CommonClient.java"/>
      </javac> 
      
   
      <delete file="${FVT.build.lib.dir}/ejbjar.jar" />
      <jar destfile="${FVT.build.lib.dir}/ejbjar.jar"  
          basedir="${workdir5}"
          includes="**/*"
       /> 

        <!-- we want to create an ear with no application.xml, to see if that works.
           In order to do that, we have to invoke the ear task in update mode against
           an empty zip file
        -->               
        <delete file="${FVT.build.installableApps.dir}/ejbinwar.ear"/>
        <zip destfile="${FVT.build.installableApps.dir}/ejbinwar.ear"
	        whenempty="create"
	        basedir="."  
	        includes="absolutely/**/nothing"
        />
        <echo message="note: the error opening an empty zip file is expected" /> 
        <!-- appxml="${srcdir}/server/application.xml">              -->
        <ear earfile="${FVT.build.installableApps.dir}/ejbinwar.ear" update="true">             
            <fileset dir="${FVT.build.lib.dir}"  includes="ejbinwar.war" />   
            <fileset dir="${FVT.build.lib.dir}"  includes="ejbjar.jar" />    
        </ear>    
  </target> 
  
  
    <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
    --> 
       <target name="preinstall"
            depends="setenv">
        <!--<endpointenable earfile="${FVT.build.installableApps.dir}/ejbinwar.ear" />-->
    </target>        
               
  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->  
  <target name="client" depends="setenv">
        
  </target>
   
  
                            
  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->                               
  <target name="test" depends="setenv">
           <javac compiler="modern" srcdir="${basedir}"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/test/*.java"/>
      </javac>
  </target>   
  
  <!-- compile generated artifacts used by the clients in both server and tests 
      I don't like burning in the wsdl url but haven't found an easy way around it.  
      We'll hardcode the host to 127.0.0.1, then at least the app will be portable to 
      other systems with same port number. 
      This might cause trouble if the tests are running on a different host than the ear. 
      
      Only other way might be for the services to get the port number as a websphere variable,
      then cast the webservice port to a BindingProvider and update the tcpip port number.
      Boy, that would be ugly, read user_install_root and was_props_dir to find portdef.props, read that.
      
  -->    
  

  <target name="genclient" depends="setenv">
                 <!-- get host and port --> 
  				 <readCellConfig prefix="server1"
                        key="defaultServer"
                        verbose="${verbose.output}" />
          <!--  <property name="myhostname" value="${server1.hostName}" />     -->
				<property name="myhostname" value="127.0.0.1" />                     
               
               
                <wsimport wsdl="${srcdir}/server/wsdl/EjbInWarClassesHelloService.wsdl"
                     destdir="${workdir4}"
                     wsdllocation = "http://${myhostname}:${server1.WC_defaulthost}/ejbinwar/EjbInWarClassesHelloService?wsdl"
                     package="jaxwsejbinwar.generatedclient"
                     verbose="false"                           
                     sourcedestdir="${workdir4}">
                </wsimport>
              
                <wsimport wsdl="${srcdir}/server/wsdl/ServletInWarClassesHelloService.wsdl"
                     destdir="${workdir4}"
                     verbose="false"   
                     wsdllocation = "http://${myhostname}:${server1.WC_defaulthost}/ejbinwar/ServletInWarClassesHelloService?wsdl"
                       package="jaxwsejbinwar.generatedclient"                        
                     sourcedestdir="${workdir4}">
                </wsimport>   
              
                <wsimport wsdl="${srcdir}/server/wsdl/EjbInWarLibHelloService.wsdl"
                     destdir="${workdir4}"
                     verbose="false"
                     wsdllocation = "http://${myhostname}:${server1.WC_defaulthost}/ejbinwar/EjbInWarLibHelloService?wsdl"
                     package="jaxwsejbinwar.generatedclient"                                           
                     sourcedestdir="${workdir4}">
                </wsimport>    
                <wsimport wsdl="${srcdir}/server/wsdl/ServletInWarLibHelloService.wsdl"
                     destdir="${workdir4}"
                     verbose="false"      
                     wsdllocation = "http://${myhostname}:${server1.WC_defaulthost}/ejbinwar/ServletInWarLibHelloService?wsdl"
                     package="jaxwsejbinwar.generatedclient"                                          
                     sourcedestdir="${workdir4}">
                </wsimport> 
                
                <wsimport wsdl="${srcdir}/server/wsdl/EjbInJarHelloService.wsdl"
                     destdir="${workdir4}"
                     verbose="false"      
                     wsdllocation = "http://${myhostname}:${server1.WC_defaulthost}/ejbjar/EjbInJarHelloService?wsdl"
                     package="jaxwsejbinwar.generatedclient"                                          
                     sourcedestdir="${workdir4}">
                     
                </wsimport>   
  </target>      
    
  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->           
  <target name="install" depends="setenv">
    <ant antfile="${srcdir}/installTest.xml"
         dir="${srcdir}">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>
  
    
  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->           
  <target name="uninstall" depends="setenv">
    <ant antfile="${srcdir}/uninstallTest.xml"
         dir="${srcdir}">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>
 
</project>
