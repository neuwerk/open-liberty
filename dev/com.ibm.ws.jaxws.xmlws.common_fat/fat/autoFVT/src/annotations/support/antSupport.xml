<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml"><!-- file:34 -->
        <!ENTITY properties SYSTEM "../../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml"><!-- file:31 -->
]>

<!-- 1.4, 1/5/07

     Description: Provides access to ant tasks that can be called
     from the Implementation Adapter used by some of the annotation tests.

     Date        Author       Feature/Defect          Description
     06/16/2006  btiffany     LIDB3296.31.01          New File
-->
<!-- basedir will be passed in, don't set it -->
<project name="build" default="donothing" >


  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->
  &instance;
  &properties;
  &paths;


  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
  <property name="componentName" value="nothing"/>


  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>

  <path id="invokeClasspath">
    <pathelement path="${basedir}" />
    <pathelement location="${FVT.base.dir}/common/jars/junit.jar"/>
    <path refid="classpath"/>

  </path>

  <target name="donothing">
  </target>



  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
     <target name="buildall" depends="setenv, clean, init, server, client, test, preinstall"/>
  -->

  <target name="compile">
     <javac compiler="modern" sourcepath="${workdir}"
           srcdir="${srcdir}"
           destdir="${targetDir}"
           deprecation="${deprecation}"
           debug="${debug}"
           failonerror="${failonerror}"
           verbose="false">
      <classpath refid="classpath"/>
      <include name="${srcfile}"/>
     </javac>
  </target>

  <!-- a way to run our java executables and pick up ant's classpath
      need a way to get the return code back out....
  -->
  <target name="invoke">
    <java classname="${classname}"  failonerror="true">
          <classpath refid="invokeClasspath"/>
    </java>
  </target>



  <!-- The createEar target will make the ear file.
       Define these things on invocation:

       workdir (working directory where ./*xml and ./wsdl/*wsdl files will be found)
       earname (exclude the .war extension)

           the implementation adapter will have already generated these
           goodies in the root of the working dir:
       web.xml
       ibmservices.xml
       application.xml
  -->
  <target name="createEar" >

    <!-- to be compatible with the old structure, we have to move wsdl and xsd  to wsdl subdirectory -->
    <mkdir dir="${workdir}/wsdl"/>
    <copy todir="${workdir}/wsdl" overwrite="true">
         <fileset dir="${workdir}">
            <include name="*wsdl"/>
            <include name="*xsd" />
         </fileset>
    </copy>

    <war warfile="${FVT.build.lib.dir}/${earname}.war"
         webxml="${workdir}/web.xml">
      <webinf dir="${workdir}">
       <exclude   name="web.xml"/>
        <include  name="ibmservices.xml"/>
        <include  name="wsdl/*.wsdl" if="includeWsdl"/>
        <include  name="wsdl/*.xsd"  if="includeWsdl"/>
      </webinf>
      <classes dir="${workdir}">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
      </classes>
    </war>

    <ear earfile="${FVT.build.installableApps.dir}/${earname}.ear"
         appxml="${workdir}/application.xml">
      <fileset dir="${FVT.build.lib.dir}">
        <include name="${earname}.war"/>
      </fileset>
    </ear>

  </target>



</project>
