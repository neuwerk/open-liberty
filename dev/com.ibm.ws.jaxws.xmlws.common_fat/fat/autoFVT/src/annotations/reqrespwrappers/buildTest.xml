<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../instance.xml">
        <!ENTITY properties SYSTEM "../../xmls/properties.xml">
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml">
        <!ENTITY targets SYSTEM "../../xmls/targets.xml">
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml">
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml">
]>

<!-- 1.1.1.5, 3/7/07

     Description: Build file for the WAS annotation tests.


     Date        Author       Feature/Defect          Description
     06/15/2006  btiffany     LIDB3296-31.01          New File
     09/25/2006  btiffany        "                    Add overloading test
     03/07/207   btiffany                             remove xjc use - causes test to fail
     09/11/2008   whsu        550219                  flag for 64bit
  
       (because objectfactory is built strictly from wsdl and won't have the renamed beans in it.)
     09/26/2007  btiffany                             get rid of runsetups call  
     07/16/2010  btiffany                             add new jaxws22 test


     To run this standalone, set WAS_HOME, ANT_HOME, JUNIT_HOME, FVT_TOP
     and run unittest.bat long enough so that it creates instance.xml
-->
<project name="build" default="buildall" basedir=".">


  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;


  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
  <property name="componentName" value="annotations/reqrespwrappers"/>
  <property name="componentPath"  value="${componentName}" />

  <!-- a variable to let us largely reuse this file without so many changes.
       set it to the name of the subdir under annotations
  -->
  <property name="anno_subset"    value="reqrespwrappers" />
  <property name ="betaworkdir"   value="${FVT.build.work.dir}/ReqRespWrappersRuntimeTestCase/beta" />
  <property name ="workdir"   value="${FVT.build.work.dir}/ReqRespWrappersRuntimeTestCase/server" />
  <property name ="J2WWrapperCheck_workdir"   value="${FVT.build.work.dir}/ReqRespWrappersTestCase/j2w" />



  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>

  <!-- need junit.jar explicitly in the path for setup to run -->
  <path id="setupClasspath">
    <pathelement location="${FVT.base.dir}/common/jars/junit.jar"/>
    <path refid="classpath"/>
  </path>


  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
       Note that junit doesn't get invoked here, that happens later
       in src/build.xml.
  -->

  <!--
     we had to pull server2 and client2 from the test, we were trying to
     test the ability of req/resp to change the classname.  Ran into:
     - can't test method disambiguation due to @WebMethod broken
     - can't test classname change because objectfactory won't be generated on server
       with correct classnames.  On client side, bean names will come from wsdl and be
         different, so can't use objectfactory from client.

  -->

  <target name="buildall" depends="setenv, clean, init, server, client, jaxws22testclasses, test "/>

  <!-- the setenv target is in src/xmls/targets.xml and sets up a the environment -->


  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->
  <target name="init" depends="setenv">
        <!-- component-init comes from targets.xml and makes the main directories
            used by all tests.
        -->
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
    <mkdir dir="${workdir}" />
	<mkdir dir="${J2WWrapperCheck_workdir}"/>
  </target>


  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/annotations/${anno_subset}"/>
    <delete dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
    <delete dir="${FVT.build.work.dir}/ReqRespWrappersRuntimeTestCase"/>
    <delete file="${FVT.build.lib.dir}/reqrespanno.war"/>
    <delete file="${FVT.build.installableApps.dir}/reqrespanno.ear"/>
    <delete file="${FVT.build.lib.dir}/reqrespanno2.war"/>
    <delete file="${FVT.build.installableApps.dir}/reqrespanno2.ear"/>
    <delete dir="${workdir}" />
	<delete dir="${J2WWrapperCheck_workdir}"/>
  </target>


  <target name="jaxws22testclasses" depends="setenv" >
    <property name="j22workdir" value="${FVT.build.work.dir}/annotations/${anno_subset}/jaxws22" />
    <delete dir="${j22workdir}"/>
    <mkdir dir="${j22workdir}"/>
    <javac compiler="modern" fork="true"
             srcdir="${FVT.base.dir}/src/annotations/reqrespwrappers/server"
             destdir="${j22workdir}"
             deprecation="${deprecation}"
             debug="${debug}"
    	     source="${build.tests.with.java.level}"
    	     target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath refid="thinclientclasspath" />
             <include name="Jaxws22*java" />
             <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
     </javac>
      <echo message="--wsgen--" />
	  <wsgen genwsdl="true" keep="true" verbose="false" fork="true"
            destdir="${j22workdir}"
            resourcedestdir="${j22workdir}"
            sei="annotations.reqrespwrappers.server.Jaxws22ImplCheck"
            classpath="${j22workdir}">
            <classpath refid="classpath" />
            <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
     </wsgen>
     <!-- for some reason wsgen isn't closing the file --> 
     <copy file="${j22workdir}/Jaxws22ImplCheckService.wsdl" tofile="${j22workdir}/Jaxws22ImplCheckService2.wsdl" />
     <replace file="${j22workdir}/Jaxws22ImplCheckService2.wsdl"
                 value="http://bogushost:54321/bogus/url">
         <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
     </replace>
     <wsimport
              destdir="${FVT.build.classes.dir}"
              sourcedestdir="${FVT.build.classes.dir}"
              wsdl="${j22workdir}/Jaxws22ImplCheckService2.wsdl"
              verbose="true"
      >
      </wsimport>
     
  </target>

  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->
  <target name="server" depends="setenv">
	<!-- Move compile into ant scripts since Build ID cannot run ant command on build engine -->
	 <javac compiler="modern"
             srcdir="${FVT.base.dir}/src/annotations/reqrespwrappers/server"
             destdir="${J2WWrapperCheck_workdir}"
             deprecation="${deprecation}"
             debug="${debug}"
  	         source="${build.tests.with.java.level}"
  	         target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath refid="thinclientclasspath" />
             <include name="J2WWrapperCheck.java" />
     </javac>
     <!-- compile for wsgen -->
     <javac compiler="modern"
             srcdir="${FVT.base.dir}/src/annotations/reqrespwrappers/server"
             destdir="${workdir}"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath refid="thinclientclasspath" />
             <include name="ReqRespRuntimeCheck.java" />
     </javac>
      <echo message="--wsgen--" />
	  <wsgen genwsdl="true" keep="true" verbose="false"
            destdir="${workdir}"
            resourcedestdir="${workdir}"
            sei="annotations.reqrespwrappers.server.ReqRespRuntimeCheck"
            classpath="${workdir}">
            <classpath refid="classpath" />
     </wsgen>

    <!-- generate gen classes from impl class.
      We'll gen. wsdl for checking, but won't put it in war,  want server to generate wsdl on the fly.
      We need it to gen the client though.
    -->
    <echo message="--wsgen--" />
    <wsgen genwsdl="true" keep="true" verbose="false"
            destdir="${workdir}"
            resourcedestdir="${workdir}"
            sei="annotations.reqrespwrappers.server.ReqRespRuntimeCheck"
            classpath="${workdir}">
            <classpath refid="classpath" />
    </wsgen>


    <!-- copy in impl source -->
    <copy file="${FVT.base.dir}/src/annotations/reqrespwrappers/server/ReqRespRuntimeCheck.java" todir="${workdir}" />

    <!-- war/ear it up -->
    <war warfile="${FVT.build.lib.dir}/reqrespanno.war"
     webxml="${FVT.base.dir}/src/annotations/reqrespwrappers/server/etc/web.xml">
            <!--  we want the server to generate wsdl  -->
            <!-- pick up compiled and generated classes -->
            <classes dir="${workdir}">
                    <include name="**/*.class"/>
                    <include name="**/*.java"/>
            </classes>
    </war>

    <ear earfile="${FVT.build.installableApps.dir}/reqrespanno.ear"
            appxml="${FVT.base.dir}/src/annotations/reqrespwrappers/server/etc/application.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="reqrespanno.war" />
    </ear>

  </target>

  <!-- we have to do some weird things for beta, so tack on an extra target
  for the beta server that builds on what we already have produced
  -->
  <target name="server2" depends="setenv">
     <delete dir="${betaworkdir}" />
     <mkdir  dir="${betaworkdir}" />
     <!-- wsgen the java class and sei, just to get a wsdl which we'll put in the source tree -->
     <echo message="building server2 (beta)" />
     <!-- copy and compile our server classes -->
     <copy todir="${betaworkdir}">
         <fileset dir="${FVT.base.dir}/src/${componentPath}/server"  >
            <include name="RRN*java" />
         </fileset>
     </copy>


      <javac compiler="modern" srcdir="${betaworkdir}"
             destdir="${betaworkdir}"
             deprecation="${deprecation}"
             debug="${debug}"
  	         source="${build.tests.with.java.level}"
  	         target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="*.java"/>
      </javac>


     <!-- run wsgen against our class and sei to get a wsdl.
          This can be removed once we have the wsdl and schema stable.
     -->
     <mkdir dir="${betaworkdir}/wsgen" />

      <echo message="wsgen, just for checking..." />
      <wsgen
              genwsdl="true"
              keep="true"
              verbose="false"
              destdir="${betaworkdir}/wsgen"
              resourcedestdir="${betaworkdir}/wsgen"
              sourcedestdir="${betaworkdir}/wsgen"
              sei="annotations.reqrespwrappers.server.RRNameCheck"
              >
              <classpath>
                      <path refid="classpath"/>
                      <pathelement path="${betaworkdir}"/>
           </classpath>
      </wsgen>

     <!-- wsimport the wsdl to generate beans we can actually use -->
     <!-- here we've manually copied the wsdl to the source tree, and patched up the schema file
          Now we run wsimport against our patched wsdl and schema.
      -->
      <wsimport
              destdir="${betaworkdir}"
              sourcedestdir="${betaworkdir}"
              wsdl="${FVT.base.dir}/src/annotations/reqrespwrappers/server/rro.wsdl"
              verbose="true"
      >
      </wsimport>

     <!-- ********************************
          the generated sei is not what we need, as it will have read the operation names from
          wsdl and they won't be overloaded any more, so we need to replace it with ours that
          preserves the overloading so we can test it.  What a pain
          ********************************
     -->

    <copy
        file="${FVT.base.dir}/src/annotations/reqrespwrappers/server/RRNif._java"
        tofile="${workdir}/RRNif.java"
    />
    <copy
         file    ="${workdir}/annotations/reqrespwrappers/server/RRNif.class"
         tofile = "${workdir}/annotations/reqrespwrappers/server/RRNif_original.class"
    />

    <javac compiler="modern" srcdir="${workdir}"
           destdir="${workdir}"
           deprecation="${deprecation}"
           debug="${debug}"
           failonerror="${failonerror}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           verbose="true">
          <classpath refid="classpath"/>
          <include name="RRNif.java"/>
    </javac>

    <!-- retain the source in the war file for reference -->
    <copy
         file="${workdir}/RRNif.java"
         todir = "${workdir}/annotations/reqrespwrappers/server"
    />

     <!-- package the server side -->
     <!-- at this point everything we need except the wsdl should be in betaworkdir... -->
     <!-- create war file and ear file -->

     <war warfile="${FVT.build.lib.dir}/reqrespanno2.war"
          webxml="${FVT.base.dir}/src/annotations/reqrespwrappers/server/web.xml">

       <zipfileset dir="${FVT.base.dir}/src/annotations/reqrespwrappers/server/" prefix="WEB-INF/wsdl">
         <include name="rro.wsdl" />
         <include name="rro.xsd"  />
       </zipfileset>
       <!-- toss in the source too -->
       <!-- use the workdir since we did some funny copy/rename stuff, don't want to confuse -->
       <classes dir="${betaworkdir}">
         <include name="**/*.java"/>
         <include name="**/*.class"/>
         <exclude name="wsgen/**/*"/>
       </classes>
     </war>

     <ear earfile="${FVT.build.installableApps.dir}/reqrespanno2.ear"
          appxml="${FVT.base.dir}/src/annotations/reqrespwrappers/server/application.xml" >
       <fileset dir="${FVT.build.lib.dir}" includes="reqrespanno2.war"/>
     </ear>

  </target>




  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->
  <target name="client" depends="setenv">
	 <mkdir dir="${workdir}/../client" />
     <wsimport
              destdir="${workdir}/../client"
              sourcedestdir="${workdir}/../client"
              wsdl="${workdir}/ReqRespRuntimeCheckService.wsdl"
              verbose="true"
      >
      </wsimport>
      
  
     <javac compiler="modern"
             srcdir="${FVT.base.dir}/src/annotations/reqrespwrappers/client"
             destdir="${workdir}/../client"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath>
                <pathelement location="${workdir}/../client" />
             	<path refid="thinclientclasspath" />
             </classpath>	
             <include name="ReqRespRuntimeClient.java" />
     </javac>
  
  </target>



  <target name="client2" depends="setenv">
     <echo message="tbd" />
  </target>

  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->
  <target name="test" depends="setenv">

    <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/${anno_subset}:${FVT.base.dir}/src/annotations/support"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
       	   source="${build.tests.with.java.level}"
       	   target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <exclude name="**/testdata/*"/>
      <exclude name="**/*lient/*"/>
      <exclude name="**/*erver*/*"/>
    </javac>
  </target>


   <!-- Run all the setUp() methods in the tests.
        These tests were developed self-contained, and have their own setup methods external
        to ant.  We have to call them when we run inside ant.
        They will call annotations/support/antSupport.xml and produce wars, ears, etc.
   -->
   <target name="runsetups">
       <!--
       <echo message="annotations setUp target running..." />
       <java classname="annotations.support.RunSetupMethods" fork="true" dir="${FVT.base.dir}">
           <classpath refid="setupClasspath"/>
           <jvmarg line="-DRun_Setup=true ${hp64StafFlag}" />
           <arg line="${FVT.build.classes.dir}/annotations/${anno_subset}" />
       </java>
       -->
   </target>


  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->
  <target name="preinstall" depends="setenv">
  </target>


  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/installTest.xml"
         dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>


  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/uninstallTest.xml"
         dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>

</project>
