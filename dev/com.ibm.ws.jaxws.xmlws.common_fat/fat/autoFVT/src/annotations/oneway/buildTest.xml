<?xml version="1.0"?>


<!-- 1.2.1.9, 3/21/07

     Description: Build file for the WAS annotation tests.


     Date        Author       Feature/Defect          Description
     06/15/2006  btiffany     LIDB3296-31.01          New File
     09/22/2006  btiffany                             Add another test that can work for beta.
     02/23/2007  btiffany                             quit using zero byte wsdl file - runtime now rejects
     09/11/2008  whsu                                 add flag for 64os (solaris) 


     To run this standalone, set WAS_HOME, ANT_HOME, JUNIT_HOME, FVT_TOP
     and run unittest.bat long enough so that it creates instance.xml
-->
<project name="build" default="buildall" basedir=".">
<import file="../../xmls/common_imports.xml" />


  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
  <property name="componentName"  value="annotations/oneway"/>
  <property name="componentPath"  value="annotations/oneway/" />
  <property name ="betaworkdir"   value="${FVT.build.work.dir}/onewayannobeta" />
  <property name ="workdir"       value="${FVT.build.work.dir}/OneWayRunTimetestCase" />
  <property name ="OneWayTestCase_workdir"       value="${FVT.build.work.dir}/OneWayTestCase" />


  <!-- a variable to let us largely reuse this file without so many changes.
       set it to the name of the subdir under annotations
  -->
  <property name="anno_subset"  value="oneway" />


  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>

  <!-- need junit.jar explicitly in the path for setup to run -->
  <path id="setupClasspath">
    <pathelement location="${FVT.base.dir}/common/jars/junit.jar"/>
    <path refid="classpath"/>
  </path>


  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
       Note that junit doesn't get invoked here, that happens later
       in src/build.xml.
  -->
  <target name="buildall" depends="setenv, clean, init, serverbeta, clientbeta, server, client, test"/>

  <!-- the setenv target is in src/xmls/targets.xml and sets up a the environment -->


  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->
  <target name="init" depends="setenv">
        <!-- component-init comes from targets.xml and makes the main directories
            used by all tests.
        -->
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
    <mkdir dir="${betaworkdir}" />
    <mkdir dir="${workdir}" />
	<mkdir dir="${OneWayTestCase_workdir}" />
  </target>


  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/annotations/${anno_subset}"/>
    <delete dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
    <delete dir="${workdir}"/>
    <delete file="${FVT.build.lib.dir}/*${anno_subset}*war"/>
    <delete file="${FVT.build.installableApps.dir}/${anno_subset}*.ear"/>
    <delete dir="${betaworkdir}" />
	<delete dir="${OneWayTestCase_workdir}"/>
  </target>


  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->
  <target name="server" depends="setenv">
	  <!-- Since Liberty build ID has no execution right on ant command, we
	       use this workaround to generate OneWayDefaults for OneWayTestCase.
	  -->
	  <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}/testdata"
             destdir="${OneWayTestCase_workdir}"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="OneWayDefaults.java"/>
      </javac>
	  
      <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}/testdata"
             destdir="${workdir}"
             deprecation="${deprecation}"
             debug="${debug}"
	  	     source="${build.tests.with.java.level}"
	  	     target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="OneWayDefaults.java"/>
      </javac>

      <wsgen
              genwsdl="true"
              keep="true"
              verbose="false"
              destdir="${workdir}"
              resourcedestdir="${workdir}"
              sourcedestdir="${workdir}"
              sei="annotations.oneway.testdata.OneWayDefaults"
              >
              <classpath>
                      <path refid="classpath"/>
                      <pathelement path="${workdir}"/>
           </classpath>
      </wsgen>


     <war warfile="${FVT.build.lib.dir}/onewayanno.war"
          webxml="${FVT.base.dir}/src/annotations/oneway/testdata/web.xml">
       <classes dir="${workdir}">
         <include name="**/*.java"/>
         <include name="**/*.class"/>
       </classes>
       <!-- toss in src -->
       <classes dir="${FVT.base.dir}/src/${componentPath}/testdata" >
         <include name="OneWayDefaults.java"/>
       </classes>
     </war>

     <ear earfile="${FVT.build.installableApps.dir}/onewayanno.ear"
          appxml="${FVT.base.dir}/src/annotations/oneway/testdata/application.xml" >
       <fileset dir="${FVT.build.lib.dir}" includes="onewayanno.war"/>
     </ear>


  </target>


 <!-- we have to do some weird things for beta, so tack on an extra target
 for the beta server that builds on what we already have produced
 -->
 <target name="serverbeta" depends="setenv">
   <echo message="building serverbeta" />
   <!-- copy and compile our server classes -->
   <copy todir="${betaworkdir}">
       <fileset dir="${FVT.base.dir}/src/${componentPath}/testdata"  >
          <include name="*BetaImpl.java" />
       </fileset>
   </copy>

   <!-- we're going to rename the sei, which allows us to use a client written for the impl-based
     service, OneWayDefaultsService
   -->
   <copy file="${FVT.base.dir}/src/${componentPath}/testdata/OneWayDefaultsBetaIf.java"
         tofile="${betaworkdir}/OneWayDefaults.java"
   />


    <javac compiler="modern" srcdir="${betaworkdir}"
           destdir="${betaworkdir}"
           deprecation="${deprecation}"
           debug="${debug}"
   	       source="${build.tests.with.java.level}"
   	       target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="*.java"/>
    </javac>

   <mkdir dir="${betaworkdir}/wsgen" />
    <!-- ==========================================================================================
    getting a strange failure here but it's not critical so did not resolve it.
         Tried for a long time though. 397101.
         Seems that wsgen has problems when working in the presence of wsimport generated beans.

         Well, we fixed that by building serverbeta first and changing the target directory.
         But now something else is wrong - wsgen is failing with a classcast exception deep in
         the sun code, but only when run inside our foreach loop.  Classpath is the same in both
         cases, so it must be something in the jvm environment.  Ugh.  Rather than deal with that
         and risk breaking other tests, I'm going to check the wsdl back into the src tree and delete
         this offending step.
    <wsgen
            genwsdl="true"
            keep="true"
            verbose="false"
            destdir="${betaworkdir}/wsgen"
            resourcedestdir="${betaworkdir}/wsgen"
            sourcedestdir="${betaworkdir}/wsgen"
            sei="annotations.oneway.testdata.OneWayDefaultsBetaImpl"
            >
            <classpath>
                    <path refid="classpath"/>
                    <pathelement path="${betaworkdir}"/>
         </classpath>
    </wsgen>
    =============================================================================================== -->

   <!-- here we've manually copied the wsdl to the source tree, and patched up the schema file
        Now we run wsimport against our patched wsdl and schema.
            wsdl="${betaworkdir}/wsgen/OneWayDefaultsService.wsdl"
    -->
    <libertywsimport
            target="2.2"
            destdir="${betaworkdir}"
            sourcedestdir="${betaworkdir}"
            wsdl="${FVT.base.dir}/src/annotations/oneway/testdata/etcbeta/OneWayDefaultsService.wsdl"
            verbose="true"
    >
    </libertywsimport>


   <!-- at this point everything we need except the wsdl should be in betaworkdir... -->
   <!-- create war file and ear file -->

   <war warfile="${FVT.build.lib.dir}/onewayannobeta.war"
        webxml="${FVT.base.dir}/src/annotations/oneway/testdata/web_beta.xml">
     <zipfileset dir="${FVT.base.dir}/src/annotations/oneway/testdata/etcbeta" prefix="WEB-INF/wsdl">
       <include name="*wsdl" />
       <include name="*xsd"  />
     </zipfileset>
     <!-- use the workdir since we did some funny copy/rename stuff, don't want to confuse -->
     <classes dir="${betaworkdir}">
       <include name="**/*.java"/>
       <include name="**/*.class"/>
       <exclude name="wsgen/**/*"/>
     </classes>
   </war>

   <ear earfile="${FVT.build.installableApps.dir}/onewayannobeta.ear"
        appxml="${FVT.base.dir}/src/annotations/oneway/testdata/application_beta.xml" >
     <fileset dir="${FVT.build.lib.dir}" includes="onewayannobeta.war"/>
   </ear>


   <!-- ***** war up another one with wsdlloca annotation attribute empty, foring dynamic wsdl ****** -->
   <delete file="${betaworkdir}/OneWayDefaultsBetaImpl.java" />
   <copy file=  "${FVT.base.dir}/src/${componentPath}/testdata/OneWayDefaultsBetaImpl_nowsdl.java"
         tofile="${betaworkdir}/OneWayDefaultsBetaImpl.java"
   />

    <javac compiler="modern" srcdir="${betaworkdir}"
           destdir="${betaworkdir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="OneWayDefaultsBetaImpl.java"/>
    </javac>


   <war warfile="${FVT.build.lib.dir}/onewayannobeta2.war"
        webxml="${FVT.base.dir}/src/annotations/oneway/testdata/web_beta.xml">
     <!-- add the empty wsdl -->
     <zipfileset dir="${betaworkdir}" prefix="WEB-INF/wsdl">
       <include name="OneWayDefaultsBetaImplService.wsdl" />
     </zipfileset>
     <!-- use the workdir since we did some funny copy/rename stuff, don't want to confuse -->
     <classes dir="${betaworkdir}">
       <include name="**/*.java"/>
       <include name="**/*.class"/>
       <exclude name="wsgen/**/*"/>
     </classes>
   </war>

   <delete file="${FVT.build.installableApps.dir}/onewayannobeta2.ear" />

   <ear earfile="${FVT.build.installableApps.dir}/onewayannobeta2.ear"
        appxml="${FVT.base.dir}/src/annotations/oneway/testdata/application2.xml" >
     <fileset dir="${FVT.build.lib.dir}" includes="onewayannobeta2.war"/>
   </ear>
 </target> <!-- serverbeta -->



  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->
  <target name="client" depends="setenv">
      <libertywsimport
              target="2.2"
              destdir="${FVT.build.classes.dir}"
              sourcedestdir="${FVT.build.classes.dir}"
              wsdl="${workdir}/OneWayDefaultsService.wsdl"
              verbose="true"
      >
      </libertywsimport>

      <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/oneway/testdata"
             destdir="${FVT.build.classes.dir}"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="OneWayRuntimeTestCaseClient.java" />
      </javac>
  </target>

  <!-- because we had to change the schema for beta, the beans are different, need to
       make the new beans available to the client
       probably the easiest way to do that is just compile the client in beta dir and run it there.
  -->
  <target name="clientbeta" depends="setenv">
     <echo message="building clientbeta" />
     <copy todir="${betaworkdir}">
         <fileset dir="${FVT.base.dir}/src/${componentPath}/testdata"  >
            <include name="*Client.java" />
         </fileset>
     </copy>

      <javac compiler="modern" srcdir="${betaworkdir}"
             destdir="${betaworkdir}"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath>
           <path refid="thinclientclasspath"/>
           <pathelement path="${betaworkdir}"/>
        </classpath>
      </javac>

  </target>


  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->
  <target name="test" depends="setenv">

      <!-- need test compiled to run setups, but can't compile test until we build the client.
           One more reason that whole ImplementationAdapter thing needs to be retired
      -->

      <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/${anno_subset}:${FVT.base.dir}/src/annotations/support"
             destdir="${FVT.build.classes.dir}"
             deprecation="${deprecation}"
             debug="${debug}"
           	 source="${build.tests.with.java.level}"
           	 target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <exclude name="**/testdata/*"/>
      </javac>

  </target>


   <!-- Run all the setUp() methods in the tests.
        These tests were developed self-contained, and have their own setup methods external
        to ant.  We have to call them when we run inside ant.
        They will call annotations/support/antSupport.xml and produce wars, ears, etc.
   -->
   <target name="runsetups">
       <echo message="annotations setUp target running..." />
       <java classname="annotations.support.RunSetupMethods" fork="true"  dir="${FVT.base.dir}">
           <classpath refid="setupClasspath"/>
           <jvmarg line="-DRun_Setup=true ${hp64StafFlag}" />
           <arg line="${FVT.build.classes.dir}/annotations/${anno_subset}" />
       </java>

   </target>


  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->
  <target name="preinstall" depends="setenv">
  </target>


  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/installTest.xml"
         dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>


  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/uninstallTest.xml"
         dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>

</project>
