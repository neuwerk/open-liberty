<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY instance SYSTEM "../../../instance.xml"><!-- file:30 -->
        <!ENTITY properties SYSTEM "../../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../../xmls/path_refs.xml"><!-- file:31 -->
        <!ENTITY targets SYSTEM "../../xmls/targets.xml"><!-- file:33 -->
        <!ENTITY taskdefs SYSTEM "../../xmls/taskdefs.xml"><!-- file:34 -->
        <!ENTITY taskdefs_post_compile SYSTEM "../../xmls/taskdefs_post_compile.xml"><!-- file:47 -->
]>

<!-- 1.6, 8/3/07

        Description: Build file for the partialwsdl test.

        Date        Author       Feature/Defect          Description
        11/10/2006  euzunca      LIDB3296.31.01          partial wsdl test cases
        1/10/2007   btiffany                             removed unused server stuff.
        2/14/2007   btiffany                             modify wsimport call so this will work when
                                                         built on one machine and run on another (z-os)
        4/03/2007   btiffany                             build manual test for 430297
-->

<project name="build" default="buildall" basedir=".">

        <!-- These are XML entity refs.  Basically these statements cause the
                files declared in the DOCTYPE at the top of the file to be imported
                into this build file. -->
          &instance;
          &properties;
          &paths;
          &targets;
          &taskdefs;
          &taskdefs_post_compile;

        <!-- This property should match the package name of the test class.  The
                property is used in the targets.xml file when running any of the
                component-run* targets for running a single test case class. -->
        <property name="componentName" value="annotations/partialwsdl/test" />

        <!-- This path id is used in the targets.xml file when running any of
                the component-run* targets.  This allows setting the classpath
                for an individual test. -->
        <path id="componentClasspath">
                <path refid="thinclientclasspath" />
        </path>


        <!-- only compile the support classes if not already done -->
        <uptodate property="supportBuild.notRequired" targetfile="${FVT.base.dir}/build/classes/annotations/support/Support.class" >
            <srcfiles dir= "${FVT.base.dir}/src/annotations/support" includes="**/*.java"/>
        </uptodate>

        <!-- The buildall target will execute all of the targets necessary
                before installing the test into WebSphere. -->
        <target name="buildall" depends="setenv, clean, init, compileSupport, server, client, 430297, preinstall, test"/>

        <!-- The clean target will clean any files, classes, or directories
                so that a new copy of the test can be built and run. -->
        <target name="clean" depends="setenv">
                <delete dir="${FVT.build.classes.dir}/annotations/partialwsdl" />
                <delete dir="${FVT.build.work.dir}/annotations/partialwsdl" />
                <delete file="${FVT.build.lib.dir}/PartialWsdlNoWsdl.war" />
                <delete file="${FVT.build.lib.dir}/PartialWsdlPartial1.war" />
                <delete file="${FVT.build.lib.dir}/PartialWsdlPartial2.war" />
                <delete file="${FVT.build.installableApps.dir}/PartialWsdlPartial1.ear" />
                <delete file="${FVT.build.installableApps.dir}/PartialWsdlPartial2.ear" />
                <delete file="${FVT.build.installableApps.dir}/PartialWsdlNoWsdl.ear" />
        </target>

        <!-- The init target will initialize any directories, properties, etc.
                that are needed for the test. -->
        <target name="init" depends="setenv">
                <antcall target="component-init" />
                <mkdir dir="${FVT.build.work.dir}/annotations/partialwsdl" />
                <mkdir dir="${FVT.build.classes.dir}/annotations/partialwsdl" />

                <mkdir dir="${FVT.build.work.dir}/annotations/partialwsdl/serverpartial1"/>
                <mkdir dir="${FVT.build.work.dir}/annotations/partialwsdl/serverpartial2"/>
                <mkdir dir="${FVT.build.work.dir}/annotations/partialwsdl/servernowsdl"/>

                <mkdir dir="${FVT.build.work.dir}/annotations/partialwsdl/client"/>
        </target>

        <target name="compileSupport" depends="setenv" unless="supportBuild.notRequired" >
          <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/support"
                 destdir="${FVT.build.classes.dir}"
                 deprecation="${deprecation}"
                 debug="${debug}"
                 source="${build.tests.with.java.level}"
                 target="${build.tests.with.java.level}"
                 failonerror="${failonerror}">
            <classpath refid="classpath"/>
          </javac>
        </target>

        <!-- The server target will build anything necessary for the server
                piece of the test.  Typically this target builds the server side EAR. -->
        <target name="server" depends="setenv">
                <javac compiler="modern"
                        srcdir="${FVT.base.dir}/src/annotations/partialwsdl"
                        includes="server*/*.java, exception/*.java"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
                        source="${build.tests.with.java.level}"
                        target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                </javac>

                <!--protocol="Xsoap1.2" extension="true"-->
                <wsgen genwsdl="true" keep="true" verbose="true"
                        destdir="${FVT.build.work.dir}"
                        resourcedestdir="${FVT.build.work.dir}/annotations/partialwsdl/servernowsdl"
                        sei="annotations.partialwsdl.servernowsdl.AddNumbersImplNoWsdl"
                        classpath="${FVT.build.classes.dir}">
                        <classpath refid="classpath" />
                </wsgen>

                <wsgen genwsdl="true" keep="true" verbose="true" fork="true"
                        destdir="${FVT.build.work.dir}"
                        resourcedestdir="${FVT.build.work.dir}/annotations/partialwsdl/serverpartial1"
                        sei="annotations.partialwsdl.serverpartial1.AddNumbersImplPartial1"
                        classpath="${FVT.build.classes.dir}">
                        <classpath refid="classpath" />
                        <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
                </wsgen>


                <war warfile="${FVT.build.lib.dir}/PartialWsdlPartial1.war"
                        webxml="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial1/web.xml">
                        <webinf dir="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial1">
                                <include name="wsdl/*.wsdl" />
                                <include name="wsdl/*.xsd"  />
                        </webinf>
                        <classes dir="${FVT.build.classes.dir}">
                                <include name="annotations/partialwsdl/serverpartial1/**/*.class" />
                                <include name="annotations/partialwsdl/serverpartial1/**/*.java" />
                        </classes>
                        <classes dir="${FVT.build.work.dir}">
                                <include name="annotations/partialwsdl/serverpartial1/**/*.class" />
                                <include name="annotations/partialwsdl/serverpartial1/**/*.java" />
                        </classes>
                </war>

                <war warfile="${FVT.build.lib.dir}/PartialWsdlNoWsdl.war"
                        webxml="${FVT.base.dir}/src/annotations/partialwsdl/etc/nowsdl/web.xml">
                        <classes dir="${FVT.build.classes.dir}">
                                <include name="annotations/partialwsdl/servernowsdl/**/*.class" />
                        </classes>
                        <classes dir="${FVT.build.work.dir}">
                                <include name="annotations/partialwsdl/servernowsdl/**/*.class" />
                        </classes>
                </war>

                <ear earfile="${FVT.build.installableApps.dir}/PartialWsdlPartial1.ear"
                 appxml="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial1/application.xml">
                        <fileset dir="${FVT.build.lib.dir}">
                                <include name="PartialWsdlPartial1.war"/>
                        </fileset>
                </ear>

                <ear earfile="${FVT.build.installableApps.dir}/PartialWsdlNoWsdl.ear"
                 appxml="${FVT.base.dir}/src/annotations/partialwsdl/etc/nowsdl/application.xml">
                        <fileset dir="${FVT.build.lib.dir}">
                                <include name="PartialWsdlNoWsdl.war"/>
                        </fileset>
                </ear>



        </target>

        <!-- added this to check for noise in sysout.log, but that has to be done manually
             There is no corresponding test, and this earfile is not built by default. -->
        <target name="430297" depends="server" >
                <wsgen genwsdl="true" keep="true" verbose="true"
                        destdir="${FVT.build.work.dir}"
                        resourcedestdir="${FVT.build.work.dir}/annotations/partialwsdl/serverpartial2"
                        sei="annotations.partialwsdl.serverpartial2.AddNumbersImplPartial2"
                        classpath="${FVT.build.classes.dir}">
                        <classpath refid="classpath" />
                </wsgen>


                <war warfile="${FVT.build.lib.dir}/PartialWsdlPartial2.war"
                        webxml="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial2/web.xml">
                        <webinf dir="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial2">
                                <include name="wsdl/*.wsdl" />
                                <include name="wsdl/*.xsd"  />
                        </webinf>
                        <classes dir="${FVT.build.classes.dir}">
                                <include name="annotations/partialwsdl/serverpartial2/**/*.class" />
                                <include name="annotations/partialwsdl/serverpartial2/**/*.java" />
                        </classes>
                        <classes dir="${FVT.build.work.dir}">
                                <include name="annotations/partialwsdl/serverpartial2/**/*.class" />
                                <include name="annotations/partialwsdl/serverpartial2/**/*.java" />
                        </classes>
                </war>

                <ear earfile="${FVT.build.installableApps.dir}/PartialWsdlPartial2.ear"
                 appxml="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial2/application.xml">
                        <fileset dir="${FVT.build.lib.dir}">
                                <include name="PartialWsdlPartial2.war"/>
                        </fileset>
                </ear>
        </target>

        <!-- The client target will build anything necessary for the client
                piece of the test.  This could just be compiling the client class
                or in the case of a managed client, building a client side EAR
                file. -->
        <target name="client" depends="setenv">

                <copy todir="${FVT.build.work.dir}/annotations/partialwsdl/client" overwrite="yes">
                        <fileset dir="${FVT.base.dir}/src/annotations/partialwsdl/client">
                                <include name="AddNumbersClient.java" />
                        </fileset>
                </copy>

                <copy todir="${FVT.build.work.dir}/annotations/partialwsdl/serverpartial1" overwrite="yes">
                        <fileset dir="${FVT.base.dir}/src/annotations/partialwsdl/etc/partial1/wsdl/clientWsdl">
                                <include name="AddNumbersImplPartial1Service*" />
                        </fileset>
                        <filterset id="replace.filter.set1">
                                <filter token="REPLACE_WITH_HOST_NAME" value="${new.default.host}"/>
                                <filter token="REPLACE_WITH_PORT_NUM"  value="${new.wc.defaulthost}"/>
                        </filterset>
                </copy>

                <copy todir="${FVT.build.work.dir}/annotations/partialwsdl/servernowsdl" overwrite="yes">
                        <fileset dir="${FVT.base.dir}/src/annotations/partialwsdl/etc/nowsdl/11/wsdl">
                                <include name="AddNumbersImplNoWsdlService*" />
                        </fileset>
                        <filterset id="replace.filter.set1">
                                <filter token="REPLACE_WITH_HOST_NAME" value="${new.default.host}"/>
                                <filter token="REPLACE_WITH_PORT_NUM"  value="${new.wc.defaulthost}"/>
                        </filterset>
                </copy>


                <!-- this task injects all the topologyProps.props data into Ant properites beginning with "prefix."... -->
                <readCellConfig prefix="server1" key="defaultServer" verbose="false" />

                <!-- the wsdl location needs to be changed to the generated one in order to test
                correctness of the wsdl. The client will invoke the service according to that wsdl. -->
                <wsimport keep="true" verbose="true" destdir="${FVT.build.classes.dir}"
                        wsdl="${FVT.build.work.dir}/annotations/partialwsdl/serverpartial1/AddNumbersImplPartial1Service.wsdl"
                        wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/partialwsdlp1/services/AddNumbersImplPartial1Service?wsdl"
                >
                </wsimport>

                <wsimport keep="true" verbose="true" destdir="${FVT.build.classes.dir}"
                        wsdl="${FVT.build.work.dir}/annotations/partialwsdl/servernowsdl/AddNumbersImplNoWsdlService.wsdl"
                        wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/partialwsdlnw/services/AddNumbersImplNoWsdlService?wsdl"
                >
                </wsimport>

                <javac compiler="modern" fork="true"
                        srcdir="${FVT.build.work.dir}/annotations/partialwsdl"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
                        source="${build.tests.with.java.level}"
                        target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                        <include name="**/client*/*.java" />
                        <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
                </javac>
        </target>

        <!-- The client target will build anything necessary for the test
                piece of the test.  Often this will just include compiling the
                the JUnit test case file. -->
        <target name="test" depends="setenv">
                <javac compiler="modern"
                        srcdir="${FVT.base.dir}/src/annotations/partialwsdl"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
                        source="${build.tests.with.java.level}"
                        target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                        <include name="**/test/*.java" />
                </javac>
        </target>

        <!-- The preinstall target will perform any tasks necessary before the
               application is installed into WebSphere.  This could include running
               ejbdeploy or endptenabler for an EAR that contains an EJB.
          -->
        <target name="preinstall" depends="setenv">
        </target>

        <!-- The install target will install the server side piece of the test
               into WebSphere.  This target calls the installTest.xml file for
               the test. -->
        <target name="install" depends="setenv">
                <ant antfile="${FVT.base.dir}/src/annotations/partialwsdl/installTest.xml"
                 dir="${FVT.base.dir}/src/annotations/partialwsdl">
                        <property name="install.mode" value="${rt.install.mode}"/>
                </ant>
        </target>

        <!-- The uninstall target will uninstall the server side piece of the test
               from WebSphere.  This target calls the uninstallTest.xml file for
               the test.
          -->
        <target name="uninstall" depends="setenv">
                <ant antfile="${FVT.base.dir}/src/annotations/partialwsdl/uninstallTest.xml"
                 dir="${FVT.base.dir}/src/annotations/partialwsdl">
                </ant>
        </target>

</project>





