<?xml version="1.0"?>


<!-- 1.1, 12/22/06
	
	Description: Build file for the webfault/checkexception test.
	
	Date        Author       Feature/Defect          Description
	09/08/2006  euzunca      LIDB3296.31.01          new File
-->

<project name="build" default="buildall" basedir=".">
    <import file="../../xmls/common_imports.xml" />

    <!-- This property should match the package name of the test class.  The
		property is used in the targets.xml file when running any of the
		component-run* targets for running a single test case class. -->
    <property name="componentName" value="annotations/jaxwstooling/test" />

    <!-- This path id is used in the targets.xml file when running any of
		the component-run* targets.  This allows setting the classpath 
		for an individual test. -->
    <path id="componentClasspath">
        <path refid="thinclientclasspath" />
    </path>

    <uptodate property="supportBuild.notRequired" targetfile="${FVT.base.dir}/build/classes/annotations/support/Support.class" >
        <srcfiles dir= "${FVT.base.dir}/src/annotations/support" includes="**/*.java"/>
    </uptodate>

    <!-- The buildall target will execute all of the targets necessary
		before installing the test into WebSphere. -->
    <target name="buildall" depends="setenv, clean, init, compileSupport, server, test, preinstall"/>

    <!-- The clean target will clean any files, classes, or directories
		so that a new copy of the test can be built and run. -->
    <target name="clean" depends="setenv">
        <delete dir="${FVT.build.classes.dir}/annotations/jaxwstooling" />
        <delete dir="${FVT.build.work.dir}/annotations/jaxwstooling" />
    </target>

    <!-- The init target will initialize any directories, properties, etc.
		that are needed for the test. -->
    <target name="init" depends="setenv">
        <antcall target="component-init" />
        <mkdir dir="${FVT.build.work.dir}/annotations/jaxwstooling" />
        <mkdir dir="${FVT.build.work.dir}/annotations/jaxwstooling/bin"/>
        <mkdir dir="${FVT.build.work.dir}/annotations/jaxwstooling/server"/>
        <!-- PK92522 Starts-->
        <mkdir dir="${FVT.build.work.dir}/annotations/jaxwstooling/waswsdlgenerator" />
        <mkdir dir="${FVT.build.work.dir}/annotations/jaxwstooling/waswsdlgenerator/out" />
        <!-- PK92522 Ends-->
    </target>

    <!-- compile annotations/support package -->
    <target name="compileSupport" depends="setenv" unless="supportBuild.notRequired">
        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/support" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="server" depends="setenv">
        <javac compiler="modern"
			srcdir="${FVT.base.dir}/src/annotations/jaxwstooling"
			includes="**/server*/*.java"
			destdir="${FVT.build.classes.dir}" 
			deprecation="${deprecation}"
			debug="${debug}"
			source="${build.tests.with.java.level}"
		    target="${build.tests.with.java.level}"
			failonerror="${failonerror}">
            <classpath refid="thinclientclasspath" />
        </javac>
        <property name="build.work.test.dir" value="${FVT.build.work.dir}/annotations/jaxwstooling"/>

        <copy todir="${FVT.build.work.dir}/annotations/jaxwstooling/bin" overwrite="yes">
            <fileset dir="${FVT.base.dir}/src/annotations/jaxwstooling/etc/bin">
                <include name="wsgencall*" />
            </fileset>
            <filterset id="replace.filter.set1">
                <filter token="test_dir" value="${build.work.test.dir}"/>
                <filter token="was_home" value="${WAS.base.dir}/bin/"/>
                <filter token="build_work" value="${FVT.build.work.dir}"/>
                <filter token="build_classes"  value="${FVT.build.classes.dir}"/>
                <filter token="classpath" value="${FVT.build.classes.dir}" />
            </filterset>
        </copy>

        <property name="invalid.uri" value="dummy://uri.uri.uri"/>
        <property name="inv.package.name" value="22222.33333.44444"/>

        <copy todir="${FVT.build.work.dir}/annotations/jaxwstooling/bin" overwrite="yes">
            <fileset dir="${FVT.base.dir}/src/annotations/jaxwstooling/etc/bin">
                <include name="wsimportcall*" />
            </fileset>
            <filterset id="replace.filter.set2">
                <filter token="dest_dir" value="${FVT.build.work.dir}/INVALIDPATH/jaxwstooling"/>
                <filter token="was_home" value="${WAS.base.dir}/bin/"/>
                <filter token="base_dir" value="${FVT.base.dir}"/>
                <filter token="inv_wsdl_uri" value="${invalid.uri}"/>
                <filter token="inv_package_name" value="${inv.package.name}"/>
                <filter token="inv_binding_path" value="${FVT.build.work.dir}/INVALIDPATH/jaxwstooling"/>
                <filter token="build_work" value="${FVT.build.work.dir}/annotations/jaxwstooling"/>
            </filterset>
        </copy>

        <chmod dir="${FVT.build.work.dir}/annotations/jaxwstooling/bin" perm="ugo+rx">
            <include name="*.sh"/>
        </chmod>
        <!-- PK92522 Starts-->
        <copy todir="${FVT.build.work.dir}/annotations/jaxwstooling/waswsdlgenerator/annotations/jaxwstooling/server">
            <fileset file="${FVT.base.dir}/src/annotations/jaxwstooling/etc/JaxwsTooling.java" />
        </copy>

        <copy todir="${FVT.build.work.dir}/annotations/jaxwstooling/waswsdlgenerator">
            <fileset dir="${FVT.build.classes.dir}">
                <include name="annotations/jaxwstooling/server/**/*" />
            </fileset>
        </copy>

        <!-- Liberty does not have properties folder
        <copy todir="${FVT.build.work.dir}/annotations/jaxwstooling/waswsdlgenerator">
            <fileset file="${WAS.base.dir}/properties/TraceSettings.properties" />
        </copy>-->
        <!-- PK92522 Ends-->
    </target>

    <!-- The client target will build anything necessary for the test
		piece of the test.  Often this will just include compiling the
		the JUnit test case file. -->
    <target name="test" depends="setenv">
        <javac compiler="modern"
			srcdir="${FVT.base.dir}/src/annotations/jaxwstooling"
			destdir="${FVT.build.classes.dir}"
			deprecation="${deprecation}"
			debug="${debug}"
			source="${build.tests.with.java.level}"
		    target="${build.tests.with.java.level}"
			failonerror="${failonerror}">
            <classpath refid="thinclientclasspath" />
            <include name="**/test/*.java" />
        </javac>
    </target>

    <!-- The preinstall target will perform any tasks necessary before the
	       application is installed into WebSphere.  This could include running
	       ejbdeploy or endptenabler for an EAR that contains an EJB.
	  -->
    <target name="preinstall" depends="setenv">
    </target>

    <!-- The install target will install the server side piece of the test
	       into WebSphere.  This target calls the installTest.xml file for
	       the test.
	  -->
    <target name="install" depends="setenv">
        <ant antfile="${FVT.base.dir}/src/annotations/jaxwstooling/installTest.xml"
	         dir="${FVT.base.dir}/src/annotations/jaxwstooling">
        </ant>
    </target>

    <!-- The uninstall target will uninstall the server side piece of the test
	       from WebSphere.  This target calls the uninstallTest.xml file for
	       the test.
	  -->
    <target name="uninstall" depends="setenv">
        <ant antfile="${FVT.base.dir}/src/annotations/jaxwstooling/uninstallTest.xml"
	         dir="${FVT.base.dir}/src/annotations/jaxwstooling">
        </ant>
    </target>

</project>





