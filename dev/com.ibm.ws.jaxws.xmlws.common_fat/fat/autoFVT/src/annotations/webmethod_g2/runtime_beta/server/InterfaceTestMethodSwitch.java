
package annotations.webmethod_g2.runtime_beta.server;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAXWS SI.
 * JAX-WS RI 2.0_01-b15-fcs
 * Generated source version: 2.0
 *
 */
@WebService(name = "InterfaceTestIf", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/")
public interface InterfaceTestIf {

/* Here we change the webmethod annotations so method1 is mapped to method2 and vice versa, to see if that works in runtime.
   The Ant script renames, recompiles, and inserts this into a war file.
   
   Because beta has to have req/resp wrapper annotations, we have to change those two.  Normally, their defaults take into
   consideration the operationName of @WebMethod.
*/


    /**
     *
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName="methodTwo")
    @WebResult(name = "notreturn", targetNamespace = "")
    @RequestWrapper(localName = "methodTwo", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/", className = "annotations.webmethod_g2.runtime_beta.server.MethodTwo")
    @ResponseWrapper(localName = "methodTwoResponse", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/", className = "annotations.webmethod_g2.runtime_beta.server.MethodTwoResponse")
    public String methodOne(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     *
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName="methodOne")
    @WebResult(name = "notreturn", targetNamespace = "")
    @RequestWrapper(localName = "methodOne", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/", className = "annotations.webmethod_g2.runtime_beta.server.MethodOne")
    @ResponseWrapper(localName = "methodOneResponse", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/", className = "annotations.webmethod_g2.runtime_beta.server.MethodOneResponse")
    public String methodTwo(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);
    
    

    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(name = "notreturn", targetNamespace = "")
    @RequestWrapper(localName = "mixTypes", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/", className = "annotations.webmethod_g2.runtime_beta.server.MixTypes")
    @ResponseWrapper(localName = "mixTypesResponse", targetNamespace = "http://server.runtime_beta.webmethod_g2.annotations/", className = "annotations.webmethod_g2.runtime_beta.server.MixTypesResponse")
    public String mixTypes(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        boolean arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        Double arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        float arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        int arg5);

}
