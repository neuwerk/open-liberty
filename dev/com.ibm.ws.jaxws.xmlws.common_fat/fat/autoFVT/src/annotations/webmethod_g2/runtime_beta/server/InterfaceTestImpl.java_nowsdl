/*
 * @(#) 1.1 autoFVT/src/annotations/webmethod_g2/runtime_beta/server/InterfaceTestImpl.java_nowsdl, WAS.websvcs.fvt, WAS85.FVT, cf011231.01 1/5/07 14:50:56 [8/8/12 06:56:10]
 *
 *
 * IBM Confidential OCO Source Material
 * 5724-J08 (C) COPYRIGHT International Business Machines Corp. 2003, 2005
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 *
 * Change History:
 * Date        UserId      Feature/Defect     Description
 * -----------------------------------------------------------------------------
 * 9/20/06     btiffany    LIDB3296.31.01     new file
 *
 */
package annotations.webmethod_g2.runtime_beta.server;

import javax.jws.*;
// since we must use wsimport to gen our sei for beta, 
// the endpointinterface will wind up being the generated sei, not ours.
// That constrains what we can specify for the sei package name.

// endpoint is NOT InterfaceTestIf.  It is instead the class generated by wsimport,
//InterfaceTest 
@WebService(endpointInterface="annotations.webmethod_g2.runtime_beta.server.InterfaceTestIf" )
// note that the implements statement is missing, indeed it's not required. 		
public class InterfaceTestImpl {
	// implemented from interface
	public String methodOne(String s){return "methodOne returns: "+  s;}

	// implemented from interface	
	public String  methodTwo(String s){return  "methodTwo returns: "+s;}
    
    // this has nothing to do with overloading, just something else we
    // want to look at
    public String mixTypes(String s, boolean b, Double d, int i, float f, int c){
        String result = s + " "+ Boolean.toString(b) + " " +
                        Double.toString(d)+ " " + Integer.toString(i) + " " +
                        Float.toString(f) + " " + Integer.toString(c);
        return result;
                        
    }
}
