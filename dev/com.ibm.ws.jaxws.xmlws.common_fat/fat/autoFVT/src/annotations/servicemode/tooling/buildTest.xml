<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../../instance.xml"><!-- file:34 -->
<!ENTITY properties SYSTEM "../../../xmls/properties.xml"><!-- file:28 -->
<!ENTITY paths SYSTEM "../../../xmls/path_refs.xml"><!-- file:23 -->
<!ENTITY targets SYSTEM "../../../xmls/targets.xml"><!-- file:25 -->
<!ENTITY taskdefs SYSTEM "../../../xmls/taskdefs.xml"><!-- file:26 -->
<!ENTITY taskdefs_post_compile SYSTEM "../../../xmls/taskdefs_post_compile.xml"><!-- file:39 -->
]>

<!-- 1.2, 8/3/07
	
	Description: Build file for the servicemode/tooling test.
	
	Date        Author       Feature/Defect          Description
	12/22/2006  euzunca      LIDB3296.31.01          New File
-->

<project name="build" default="buildall" basedir=".">

	<!-- These are XML entity refs.  Basically these statements cause the
		files declared in the DOCTYPE at the top of the file to be imported
		into this build file. -->
	  &instance;
	  &properties;
	  &paths;
	  &targets;
	  &taskdefs;
	  &taskdefs_post_compile;

	<!-- This property should match the package name of the test class.  The
		property is used in the targets.xml file when running any of the
		component-run* targets for running a single test case class. -->
	<property name="componentName" value="annotations/servicemode/tooling/test" />


	<!-- This path id is used in the targets.xml file when running any of
		the component-run* targets.  This allows setting the classpath 
		for an individual test. -->
	<path id="componentClasspath">
		<path refid="thinclientclasspath" />
	</path>
	
	<!-- only compile the support classes if not already done -->
	<uptodate property="supportBuild.notRequired" targetfile="${FVT.base.dir}/build/classes/annotations/support/Support.class">
		<srcfiles dir="${FVT.base.dir}/src/annotations/support" includes="**/*.java" />
	</uptodate>

	<!-- The buildall target will execute all of the targets necessary
		before installing the test into WebSphere. -->
	<target name="buildall" depends="setenv, clean, init, compileSupport, server, test, preinstall"/>

	<!-- The clean target will clean any files, classes, or directories
		so that a new copy of the test can be built and run. -->
	<target name="clean" depends="setenv">
		<delete dir="${FVT.build.classes.dir}/annotations/servicemode/tooling" />
		<delete dir="${FVT.build.work.dir}/annotations/servicemode/tooling" />
	</target>

	<!-- compile annotations.support package-->
	<target name="compileSupport" depends="setenv" unless="supportBuild.notRequired">
		<javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/support" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
			<classpath refid="classpath" />
		</javac>
	</target>

	<!-- The init target will initialize any directories, properties, etc.
		that are needed for the test. -->
	<target name="init" depends="setenv">
		<antcall target="component-init" />
		<mkdir dir="${FVT.build.work.dir}/annotations/servicemode/tooling/server" />
	</target>

	<!-- The server target will build anything necessary for the server
		piece of the test.  Typically this target builds the server side
		EAR. -->
	<target name="server" depends="setenv">
		<javac compiler="modern"
			srcdir="${FVT.base.dir}/src/annotations/servicemode/tooling"
			destdir="${FVT.build.classes.dir}" deprecation="${deprecation}"
			debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="false">
			<classpath refid="thinclientclasspath" />
			<include name="**/server*/*.java" />
		</javac>

		<wsgen genwsdl="true" keep="true" verbose="true"
			destdir="${FVT.build.work.dir}"
			resourcedestdir="${FVT.build.work.dir}/annotations/servicemode/tooling/server"
			sei="annotations.servicemode.tooling.server.ServiceModeTooling"
			classpath="${FVT.build.classes.dir}">
			<classpath refid="classpath" />
		</wsgen>
	</target>

	<!-- The client target will build anything necessary for the test
		piece of the test.  Often this will just include compiling the
		the JUnit test case file. -->
	<target name="test" depends="setenv">
		<javac compiler="modern"
			srcdir="${FVT.base.dir}/src/annotations/servicemode/tooling"
			destdir="${FVT.build.classes.dir}" deprecation="${deprecation}"
			debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
			<classpath refid="thinclientclasspath" />
			<include name="**/test/*.java" />
		</javac>
	</target>

	<!-- The preinstall target will perform any tasks necessary before the
		application is installed into WebSphere.  This could include running
		ejbdeploy or endptenabler for an EAR that contains an EJB. -->
	<target name="preinstall" depends="setenv">
	</target>

</project>





