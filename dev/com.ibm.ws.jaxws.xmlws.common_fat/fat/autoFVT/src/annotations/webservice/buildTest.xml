<?xml version="1.0"?>
<!-- autoFVT/src/annotations/webservice/buildTest.xml, WAS.websvcs.fvt, WASX.FVT, gg0832.60

     Description: Build file for the WAS annotation tests.


     Date        Author       Feature/Defect          Description
     06/15/2006  btiffany     LIDB3296-31.01          New File
     08/17/2007    "          459641                  fix some casing problems
     09/11/2008    whsu       550219                  64 bit flag 

-->
<project name="build" default="buildall" basedir=".">
  <import file="../../xmls/common_imports.xml" />

  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
  <property name="componentName" value="annotations/webservice"/>

  <!-- a variable to let us largely reuse this file without so many changes.
       set it to the name of the subdir under annotations
  -->
  <property name="anno_subset" value="webservice"/>


  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>

  <!-- need junit.jar explicitly in the path for setup to run -->
  <path id="setupClasspath">
    <pathelement location="${FVT.base.dir}/common/jars/junit.jar"/>
    <path refid="classpath"/>
  </path>


  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
       Note that junit doesn't get invoked here, that happens later
       in src/build.xml.
  -->
  <target name="buildall" depends="setenv, clean, init, server, test"/>

  <!-- the setenv target is in src/xmls/targets.xml and sets up a the environment -->


  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->
  <target name="init" depends="setenv">
        <!-- component-init comes from targets.xml and makes the main directories
            used by all tests.
        -->
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
	<mkdir dir="${FVT.build.work.dir}/WebServicePackageMappingTestCase"/>
	<mkdir dir="${FVT.build.work.dir}/WebServiceDefaultsTestCase"/>
  </target>


  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase"/>
        <delete dir="${FVT.build.work.dir}/WebServicePackageMappingTestCase"/>
        <delete dir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase"/>
        <delete dir="${FVT.build.work.dir}/WebServiceDefaultsTestCase"/>
    <delete dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
        <delete dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
    <delete file="${FVT.build.lib.dir}/*websvcanno*war"/>
    <delete file="${FVT.build.installableApps.dir}/websvcanno*.ear"/>	
  </target>


  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.

       For this test, this happens in the java code itself.

       The runsetups target will run the setup methods in the test code,
       which will then build the wars, ears, etc.

       The setup methods may call support/antsupport.xml to get pieces
       of that done.


  -->
  <target name="server" depends="setenv, DefaultsServer, MatchesWsdlServer, PackageMappingServer, RuntimeServer"/>

  <target name="DefaultsServer">
	<!-- Move compilation logic into ant scripts for build env ant execution restriction -->
	<javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" 
		destdir="${FVT.build.work.dir}/WebServiceDefaultsTestCase" 
		deprecation="${deprecation}" 
		debug="${debug}"
		source="${build.tests.with.java.level}"
	    target="${build.tests.with.java.level}"
		failonerror="${failonerror}">
        <classpath refid="thinclientclasspath"/>
        <include name="WebServiceDefaultsValid1.java"/>		
    </javac>
	<javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" 
		destdir="${FVT.build.work.dir}/WebServicePackageMappingTestCase" 
		deprecation="${deprecation}" 
		debug="${debug}"
        source="${build.tests.with.java.level}"
        target="${build.tests.with.java.level}"
		failonerror="${failonerror}">
        <classpath refid="thinclientclasspath"/>        
		<include name="WebServicePackageMapping1.java"/>
		<include name="WebServicePackageMapping2.java"/>
    </javac>
  </target>

  <target name="MatchesWsdlServer">
        <delete dir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase"/>
        <mkdir dir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase"/>

        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" destdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                 <classpath refid="thinclientclasspath"/>
                 <include name="WebServiceMatchesWsdl*.java"/>
         </javac>

         <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" resourcedestdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" sei="annotations.webservice.testdata.WebServiceMatchesWsdl1" classpath="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase">
             <classpath refid="classpath"/>
        </wsgen>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" resourcedestdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" sei="annotations.webservice.testdata.WebServiceMatchesWsdl2" classpath="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase">
             <classpath refid="classpath"/>
        </wsgen>
  </target>

  <target name="PackageMappingServer">
        <!--<delete dir="${FVT.build.work.dir}/WebServicePackageMappingTestCase"/>
        <mkdir dir="${FVT.build.work.dir}/WebServicePackageMappingTestCase"/>-->

        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" destdir="${FVT.build.work.dir}/WebServicePackageMappingTestCase" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                 <classpath refid="thinclientclasspath"/>
                 <include name="WebServicePackageMapping3.java"/>
                 <include name="WebServicePackageMapping4.java"/>
         </javac>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServicePackageMappingTestCase" resourcedestdir="${FVT.build.work.dir}/WebServicePackageMappingTestCase" sei="annotations.webservice.testdata.WebServicePackageMapping3" classpath="${FVT.build.work.dir}/WebServicePackageMappingTestCase">
             <classpath refid="classpath"/>
        </wsgen>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServicePackageMappingTestCase" resourcedestdir="${FVT.build.work.dir}/WebServicePackageMappingTestCase" sei="annotations.webservice.testdata.WebServicePackageMapping4" classpath="${FVT.build.work.dir}/WebServicePackageMappingTestCase">
             <classpath refid="classpath"/>
        </wsgen>
  </target>

  <target name="RuntimeServer" depends="BasicRuntimeServer, SeiRuntimeServer, OthersRuntimeServer"/>

  <target name="BasicRuntimeServer">
        <delete dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase"/>
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb"/>

        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                 <classpath refid="thinclientclasspath"/>
                 <include name="WebServiceBasicRuntime.java"/>
         </javac>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb" resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb" sei="annotations.webservice.testdata.WebServiceBasicRuntime" classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb">
             <classpath refid="classpath"/>
        </wsgen>

        <war warfile="${FVT.build.lib.dir}/websvcannob.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/webb.xml">
                    <!--  we want the server to generate wsdl  -->
                    <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcannob.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/applicationb.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcannob.war"/>
        </ear>
  </target>

  <target name="SeiRuntimeServer">
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf"/>
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeIfc.java_nowsdl" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf/WebServiceRuntimeIfc.java"/>
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeImpl.java" todir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntimeIfc.java"/>
                <include name="WebServiceRuntimeImpl.java"/>
         </javac>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf" resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf" sei="annotations.webservice.testdata.WebServiceRuntimeImpl" classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf">
             <classpath refid="classpath"/>
        </wsgen>

        <war warfile="${FVT.build.lib.dir}/websvcannoIf.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/webIf.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcannoIf.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/applicationIf.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcannoIf.war"/>
        </ear>

        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11"/>

        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeImpl.java" todir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11"/>
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeIfc.java" todir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11"/>
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceIfc.wsdl" todir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="*.java"/>
         </javac>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11" resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11" sei="annotations.webservice.testdata.WebServiceRuntimeImpl" classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11">
             <classpath refid="classpath"/>
        </wsgen>

        <war warfile="${FVT.build.lib.dir}/websvcanno11.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/web11.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server11">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcanno11.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/application11.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcanno11.war"/>
        </ear>
  </target>

  <target name="OthersRuntimeServer" depends="original, server3, server5, server9, server6"/>

  <target name="original">
        <delete dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"/>
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"/>
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/cached_wsdl"/>
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntime.java_nowsdl" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/WebServiceRuntime.java"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntime.java"/>
        </javac>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" sei="annotations.webservice.testdata.WebServiceRuntime" classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
             <classpath refid="classpath"/>
        </wsgen>

        <copy file="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/Valid1.wsdl" todir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/cached_wsdl"/>
        <copy file="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/Valid1_schema1.xsd" todir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/cached_wsdl"/>

        <war warfile="${FVT.build.lib.dir}/websvcanno.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/web.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->

                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcanno.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/application.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcanno.war"/>
        </ear>
  </target>

  <target name="server3">
        <!--
        <delete dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" />
        <mkdir dir="${FVT.base.dir}/WebServiceRunTimeTestCase/server" />
        -->
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeChangedName.java" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/WebServiceRuntime.java" overwrite="true"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntime.java"/>
         </javac>

        <!--
        <wsgen genwsdl="true" keep="true" verbose="false"
             destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"
             resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"
             sei="annotations.webservice.testdata.WebServiceRuntime"
             classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
             <classpath refid="classpath" />
        </wsgen>
        -->

        <war warfile="${FVT.build.lib.dir}/websvcanno3.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/web3.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcanno3.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/application3.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcanno3.war"/>
        </ear>
  </target>

  <target name="server5">
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeChangedEndpoint.java" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/WebServiceRuntime.java" overwrite="true"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntime.java"/>
         </javac>

        <!--
        <wsgen genwsdl="true" keep="true" verbose="false"
             destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"
             resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"
             sei="annotations.webservice.testdata.WebServiceRuntime"
             classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
             <classpath refid="classpath" />
        </wsgen>
        -->

        <war warfile="${FVT.build.lib.dir}/websvcanno5.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/web5.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcanno5.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/application5.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcanno5.war"/>
        </ear>
  </target>

  <target name="server9">
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeChangedWsdlLoc.java" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/WebServiceRuntime.java" overwrite="true"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntime.java"/>
         </javac>
        <!--
        <wsgen genwsdl="true" keep="true" verbose="false"
             destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"
             resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server"
             sei="annotations.webservice.testdata.WebServiceRuntime"
             classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
             <classpath refid="classpath" />
        </wsgen>
        -->

        <war warfile="${FVT.build.lib.dir}/websvcanno9.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/web9.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcanno9.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/application9.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcanno9.war"/>
        </ear>
  </target>

  <target name="server6">
        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntime.java" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/WebServiceRuntime.java" overwrite="true"/>

        <javac compiler="modern" srcdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntime.java"/>
         </javac>

        <wsgen genwsdl="true" keep="true" verbose="false" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" resourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" sei="annotations.webservice.testdata.WebServiceRuntime" classpath="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
             <classpath refid="classpath"/>
        </wsgen>

        <war warfile="${FVT.build.lib.dir}/websvcanno6.war" webxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/web6.xml">
                <!--  we want the server to generate wsdl  -->
                <!-- pick up compiled and generated classes -->
                <zipfileset dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server" prefix="WEB-INF/wsdl">
                        <include name="*wsdl"/>
                        <include name="*xsd"/>
                </zipfileset>
        <classes dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
        </war>

    <ear earfile="${FVT.build.installableApps.dir}/websvcanno6.ear" appxml="${FVT.base.dir}/src/annotations/webservice/testdata/etc/application6.xml">
            <fileset dir="${FVT.build.lib.dir}" includes="websvcanno6.war"/>
        </ear>
  </target>

  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->
  <target name="client" depends="setenv, DefaultsClient, MatchesWsdlClient, PackageMappingClient, RuntimeClient"/>

  <target name="DefaultsClient">
        <mkdir dir="${FVT.build.work.dir}/WebServiceDefaultsTestCase"/>
        <wsimport destdir="${FVT.build.work.dir}/WebServiceDefaultsTestCase" sourcedestdir="${FVT.build.work.dir}/WebServiceDefaultsTestCase" wsdl="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceDefaultsFooService2.wsdl" verbose="true">
        </wsimport>
  </target>

  <target name="MatchesWsdlClient">
        <mkdir dir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase/client"/>

        <wsimport destdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" sourcedestdir="${FVT.build.work.dir}/WebServiceMatchesWsdlTestCase" wsdl="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceTestDerivedJava1.wsdl" verbose="true">
        </wsimport>
  </target>

  <target name="PackageMappingClient">
  </target>

  <target name="RuntimeClient" depends="BasicRuntimeClient, SeiRuntimeClient, OthersRuntimeClient"/>

  <target name="BasicRuntimeClient">
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/clientb"/>

        <wsimport destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/clientb" sourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/clientb" wsdl="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverb/WebServiceBasicRuntimeService.wsdl" verbose="true">
        </wsimport>

        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceBasicRuntimeClient.java" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/clientb"/>

        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/clientb" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceBasicRuntimeClient.java"/>
        </javac>
  </target>

  <target name="SeiRuntimeClient">
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client2"/>

        <wsimport destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client2" sourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client2" wsdl="${FVT.build.work.dir}/WebServiceRunTimeTestCase/serverIf/WebServiceRuntimeImplService.wsdl" verbose="true">
        </wsimport>

        <copy file="${FVT.base.dir}/src/annotations/webservice/testdata/WebServiceRuntimeIFClient.java" tofile="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client2/annotations/sebservice/testdata"/>

        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client2" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntimeIFClient.java"/>
        </javac>
  </target>

  <target name="OthersRuntimeClient">
        <mkdir dir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client"/>

        <wsimport destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client" sourcedestdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client" wsdl="${FVT.build.work.dir}/WebServiceRunTimeTestCase/server/Valid1.wsdl" verbose="true">
        </wsimport>

        <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webservice/testdata" destdir="${FVT.build.work.dir}/WebServiceRunTimeTestCase/client" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                <classpath refid="thinclientclasspath"/>
                <include name="WebServiceRuntimeClient.java"/>
        </javac>
  </target>



  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->
  <target name="test" depends="setenv, client">

    <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/${anno_subset}:${FVT.base.dir}/src/annotations/support" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <exclude name="**/testdata/*"/>
    </javac>
  </target>


   <!-- Run all the setUp() methods in the tests.
        These tests were developed self-contained, and have their own setup methods external
        to ant.  We have to call them when we run inside ant.
        They will call annotations/support/antSupport.xml and produce wars, ears, etc.
   -->
   <target name="runsetups">
       <echo message="annotations setUp target running..."/>
       <java classname="annotations.support.RunSetupMethods" fork="true" dir="${FVT.base.dir}">
           <classpath refid="setupClasspath"/>
           <jvmarg line="-DRun_Setup=true ${hp64StafFlag}"/>
           <arg line="${FVT.build.classes.dir}/annotations/${anno_subset}"/>
       </java>

   </target>


  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->
  <target name="preinstall" depends="setenv">
  </target>


  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/installTest.xml" dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>


  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/uninstallTest.xml" dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>

</project>
