<?xml version="1.0"?>
<!--   1.1.2.6, 5/20/11
     Description: Build file for the WAS annotation tests.
     Date        Author       Feature/Defect          Description
     06/15/2006  btiffany     LIDB3296-31.01          New File
     08/01/2007  btiffany     455216                  use import instead of entity refs
     08/17/2007  "		        459641                  fix some casing errors.	 
     09/11/2008  whsu 		    550219                  64bit flag	 
     05/20/2011  jtnguyen     676742                  add wsdllocation to run on Z/OS
-->
<project name="build" default="buildall" basedir=".">
  <import file="../../xmls/common_imports.xml" />


  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
  <property name="componentName" value="annotations/webmethod"/>

  <!-- a variable to let us largely reuse this file without so many changes.
       set it to the name of the subdir under annotations
  -->
  <property name="anno_subset"  value="webmethod" />
  <property name="workdir"      value="${FVT.build.work.dir}" />
  <property name="warname"              value="webmethodanno" />

  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>

  <!-- need junit.jar explicitly in the path for setup to run -->
  <path id="setupClasspath">
    <pathelement location="${FVT.base.dir}/common/jars/junit.jar"/>
    <path refid="classpath"/>
  </path>


  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
       Note that junit doesn't get invoked here, that happens later
       in src/build.xml.
  -->
  <target name="buildall" depends="setenv, clean, init, server, server2, client, setupdefaults, test" />

  <!-- the setenv target is in src/xmls/targets.xml and sets up a the environment -->


  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->
  <target name="init" depends="setenv">
        <!-- component-init comes from targets.xml and makes the main directories
            used by all tests.
        -->
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
  	<mkdir dir="${FVT.build.work.dir}/WebMethodRunTimeTestCase" />
	<mkdir dir="${FVT.build.work.dir}/WebMethodDefaults" />
  </target>


  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/annotations/${anno_subset}"/>
    <delete dir="${FVT.build.work.dir}/annotations/${anno_subset}"/>
    <delete verbose="true">
        <fileset dir="${FVT.build.lib.dir}" casesensitive="no">
            <include name="${warname}*.war"/>
        </fileset>
    </delete>
    <delete verbose="true">
        <fileset dir="${FVT.build.installableApps.dir}" casesensitive="no">
            <include name="${warname}*.ear"/>
        </fileset>
    </delete>
	<delete dir="${FVT.build.work.dir}/WebMethodDefaults" />
  </target>


  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.
  -->
  <target name="server" depends="setenv">
	<delete dir="${workdir}/WebMethodRunTimeTestCase/server" />
	<mkdir dir="${workdir}/WebMethodRunTimeTestCase/server" />
  	<!-- Migration changes: move some compile logic here to avoid Liberty build engine ant execution restriction -->
	<javac compiler="modern"
  	     srcdir="${FVT.base.dir}/src/annotations/webmethod/testdata"
		 destdir="${workdir}/WebMethodDefaults"
		 deprecation="${deprecation}"
		 debug="${debug}"
		 source="${build.tests.with.java.level}"
		 target="${build.tests.with.java.level}"
		 failonerror="${failonerror}">
		 <classpath refid="thinclientclasspath" />		 
		 <include name="WebMethodNopub.java"/>
		 <include name="WebMethodOnIf*.java"/>
		 <include name="WebMethodNoAnno.java"/>		 
	 </javac>
	    <!-- generate gen classes from impl class.
  	      We'll gen. wsdl for checking, but won't put it in war,  want server to generate wsdl on the fly.
  	      We need it to gen the client though.
  	    -->
		<!-- compile for wsgen -->
	<javac compiler="modern"
  	     srcdir="${FVT.base.dir}/src/annotations/webmethod/testdata"
		 destdir="${workdir}/WebMethodRunTimeTestCase/server"
		 deprecation="${deprecation}"
		 debug="${debug}"
  	     source="${build.tests.with.java.level}"
  	     target="${build.tests.with.java.level}"
		 failonerror="${failonerror}">
		 <classpath refid="thinclientclasspath" />
		 <include name="WebMethodRuntime.java" />
	 </javac>
	<echo message="--wsgen--" />

  	<wsgen genwsdl="true" keep="true" verbose="false"
  	     destdir="${workdir}/WebMethodRunTimeTestCase/server"
  	     resourcedestdir="${workdir}/WebMethodRunTimeTestCase/server"
  	     sei="annotations.webmethod.testdata.WebMethodRuntime"
  	     classpath="${workdir}/WebMethodRunTimeTestCase/server">
  	     <classpath refid="classpath" />
  	</wsgen>


  	    <!-- copy in impl source -->
	<copy file="${FVT.base.dir}/src/annotations/webmethod/testdata/WebMethodRuntime.java" todir="${workdir}" />
  	
		<!-- war/ear it up -->
 	<war warfile="${FVT.build.lib.dir}/webmethodanno.war"
  	     webxml="${FVT.base.dir}/src/annotations/webmethod/testdata/etc/web.xml">
		<zipfileset dir="${workdir}/WebMethodRunTimeTestCase/server/" prefix="WEB-INF/wsdl">
			<include name="*wsdl" />
			<include name="*xsd"  />
		</zipfileset>
 	            <!--  we want the server to generate wsdl  -->
  	            <!-- pick up compiled and generated classes -->
         <classes dir="${workdir}/WebMethodRunTimeTestCase/server">
         <include name="**/*.class"/>
              <include name="**/*.java"/>
        </classes>
  	</war>
		
    <ear earfile="${FVT.build.installableApps.dir}/webmethodanno.ear"
  	            appxml="${FVT.base.dir}/src/annotations/webmethod/testdata/application.xml">
  	            <fileset dir="${FVT.build.lib.dir}" includes="webmethodanno.war" />
  	</ear>	
  </target>

  <target name="server2" depends="setenv">
	<delete dir="${workdir}/WebMethodRunTimeTestCase/server2" />
	<mkdir dir="${workdir}/WebMethodRunTimeTestCase/server2" />
  	<!-- compile for wsgen -->
	<javac compiler="modern"
  	     srcdir="${FVT.base.dir}/src/annotations/webmethod/testdata"
		 destdir="${workdir}/WebMethodRunTimeTestCase/server2"
		 deprecation="${deprecation}"
		 debug="${debug}"
  	     source="${build.tests.with.java.level}"
  	     target="${build.tests.with.java.level}"
		 failonerror="${failonerror}">
		 <classpath refid="thinclientclasspath" />
		 <include name="WebMethodRuntime.java" />
	 </javac>
	<!-- generate gen classes from impl class.
  	      We'll gen. wsdl for checking, but won't put it in war,  want server to generate wsdl on the fly.
  	      We need it to gen the client though.
  	 -->
	<echo message="--wsgen--" />

  	    <wsgen genwsdl="true" keep="true" verbose="false"
  	        destdir="${workdir}/WebMethodRunTimeTestCase/server2"
  	        resourcedestdir="${workdir}/WebMethodRunTimeTestCase/server2"
  	        sei="annotations.webmethod.testdata.WebMethodRuntime"
  	        classpath="${workdir}/WebMethodRunTimeTestCase/server2">
  	        <classpath refid="classpath" />
  	    </wsgen>


  	    <!-- copy in impl source -->
	    <copy file="${FVT.base.dir}/src/annotations/webmethod/testdata/WebMethodRuntime2.java" tofile="${workdir}/WebMethodRunTimeTestCase/server2/WebMethodRuntime.java" />
		<echo message="made it past copy" />
		
	 <javac compiler="modern"
  	     srcdir="${workdir}/WebMethodRunTimeTestCase/server2"
		 destdir="${workdir}/WebMethodRunTimeTestCase/server2"
		 deprecation="${deprecation}"
		 debug="${debug}"
  	     source="${build.tests.with.java.level}"
  	     target="${build.tests.with.java.level}"
		 failonerror="${failonerror}">
		 <classpath refid="thinclientclasspath" />
		 <include name="WebMethodRuntime.java" />
	 </javac>
  	
		<!-- war/ear it up -->
 	<war warfile="${FVT.build.lib.dir}/webmethodanno2.war"
  	     webxml="${FVT.base.dir}/src/annotations/webmethod/testdata/etc/web2.xml">
 	            <!--  we want the server to generate wsdl  -->
  	            <!-- pick up compiled and generated classes -->
		<zipfileset dir="${workdir}/WebMethodRunTimeTestCase/server2/" prefix="WEB-INF/wsdl">
			<include name="*wsdl" />
			<include name="*xsd"  />
		</zipfileset>
        <classes dir="${workdir}/WebMethodRunTimeTestCase/server2">
        <include name="**/*.class"/>
        <include name="**/*.java"/>
        </classes>
  	</war>
		
    <ear earfile="${FVT.build.installableApps.dir}/webmethodanno2.ear"
  	            appxml="${FVT.base.dir}/src/annotations/webmethod/testdata/application2.xml">
  	            <fileset dir="${FVT.build.lib.dir}" includes="webmethodanno2.war" />
  	    </ear>	
  </target>


  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.
  -->
  <target name="client" depends="setenv">
	<delete dir="${workdir}/WebMethodRunTimeTestCase/client" />
	<mkdir dir="${workdir}/WebMethodRunTimeTestCase/client" />
	
	<wsimport
  		destdir="${workdir}/WebMethodRunTimeTestCase/client"
  		sourcedestdir="${workdir}/WebMethodRunTimeTestCase/client"
  		wsdl="${workdir}/WebMethodRunTimeTestCase/server/WebMethodRuntimeService.wsdl"
  		wsdllocation="/META-INF/wsdl/WebMethodRuntimeService.wsdl"
  		verbose="true"
  	>
  	</wsimport>

  	<javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/webmethod/testdata"
		destdir="${workdir}/WebMethodRunTimeTestCase/client"
  	    deprecation="${deprecation}"
  		debug="${debug}"
  		source="${build.tests.with.java.level}"
  	    target="${build.tests.with.java.level}"
  		failonerror="${failonerror}">
  		<classpath refid="classpath"/>
  		<include name="WebMethodRuntimeClient.java" />
  	</javac>
  </target>

  <!-- The setupdefaults target will make any files that are necessary
       to run the WebMethodDefaultsTestCase. -->	

  <target name="setupdefaults" depends = "setenv">
  	<!--<delete dir="${workdir}\WebMethodDefaults" />-->
	<mkdir dir="${workdir}\WebMethodDefaults"/>
	<javac compiler="modern"
  	     srcdir="${FVT.base.dir}/src/annotations/webmethod/testdata"
		 destdir="${workdir}"
		 deprecation="${deprecation}"
		 debug="${debug}"
		 source="${build.tests.with.java.level}"
		 target="${build.tests.with.java.level}"
		 failonerror="${failonerror}">
		 <classpath refid="thinclientclasspath" />
		 <include name="WebMethodDefaults1.java" />
		 <include name="WebMethodNoAnno.java" />
	</javac>

	<wsgen genwsdl="true" keep="true" verbose="false"
  	     destdir="${workdir}/WebMethodDefaults"
  	     resourcedestdir="${workdir}/WebMethodDefaults"
  	     sei="annotations.webmethod.testdata.WebMethodDefaults1"
  	     classpath="${workdir}">
		 <classpath refid="classpath" />
  	</wsgen>

	<!--
	<wsgen genwsdl="true" keep="true" verbose="true"
  	
  	     sei="annotations.webmethod.testdata.WebMethodDefaults1"
  	     classpath="${workdir}">  	
  	</wsgen>
	-->

	<wsimport
  		destdir="${FVT.build.classes.dir}"
  		sourcedestdir="${FVT.build.classes.dir}"
  		wsdl="${workdir}/WebMethodDefaults/WebMethodDefaults1Service.wsdl"
  		wsdllocation="/META-INF/wsdl/WebMethodDefaults1Service.wsdl"
  		verbose="true"
  	>
  	</wsimport>

	
	<wsgen genwsdl="true" keep="true" verbose="false"
  	        destdir="${workdir}/WebMethodDefaults"
  	        resourcedestdir="${workdir}/WebMethodDefaults"
  	        sei="annotations.webmethod.testdata.WebMethodNoAnno"
  	        classpath="${workdir}">
  	        <classpath refid="classpath" />
  	</wsgen>
  </target>


  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->
  <target name="test" depends="setenv, client">

    <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/${anno_subset}:${FVT.base.dir}/src/annotations/support"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           listfiles="yes"
           depend="yes"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <exclude name="**/testdata/*"/>
    </javac>
  </target>


   <!-- Run all the setUp() methods in the tests.
        These tests were developed self-contained, and have their own setup methods external
        to ant.  We have to call them when we run inside ant.
        They will call annotations/support/antSupport.xml and produce wars, ears, etc.
   -->
   <target name="runsetups">
       <echo message="annotations setUp target running..." />
       <java classname="annotations.support.RunSetupMethods" fork="true"  dir="${FVT.base.dir}">
           <classpath refid="setupClasspath"/>
           <jvmarg line="-DRun_Setup=true ${hp64StafFlag}" />
           <arg line="${FVT.build.classes.dir}/annotations/${anno_subset}" />
       </java>

   </target>


  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->
  <target name="preinstall" depends="setenv">
  </target>


  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/installTest.xml"
         dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>


  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/${anno_subset}/uninstallTest.xml"
         dir="${FVT.base.dir}/src/annotations/${anno_subset}">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>

</project>
