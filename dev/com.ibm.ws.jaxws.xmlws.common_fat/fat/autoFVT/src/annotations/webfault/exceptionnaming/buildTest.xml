<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../../instance.xml"><!-- file:34 -->
<!ENTITY properties SYSTEM "../../../xmls/properties.xml"><!-- file:28 -->
<!ENTITY paths SYSTEM "../../../xmls/path_refs.xml"><!-- file:23 -->
<!ENTITY targets SYSTEM "../../../xmls/targets.xml"><!-- file:25 -->
<!ENTITY taskdefs SYSTEM "../../../xmls/taskdefs.xml"><!-- file:26 -->
<!ENTITY taskdefs_post_compile SYSTEM "../../../xmls/taskdefs_post_compile.xml"><!-- file:39 -->
]>

<!-- 1.4, 8/3/07

        Description: Build file for the webfault/exceptionnaming test.

        Date        Author       Feature/Defect          Description
        08/02/2006  euzunca      LIDB3296.31.01          new file
        08/24/2006  euzunca      LIDB3296.31.01          ported to WAS
        08/28/2006  euzunca      LIDB3296.31.01          finished the defaults testcase
        01/04/2007  btiffany                             removed server stop
-->

<project name="build" default="buildall" basedir=".">

        <!-- These are XML entity refs.  Basically these statements cause the
                files declared in the DOCTYPE at the top of the file to be imported
                into this build file. -->
          &instance;
          &properties;
          &paths;
          &targets;
          &taskdefs;
          &taskdefs_post_compile;

        <!-- This property should match the package name of the test class.  The
                property is used in the targets.xml file when running any of the
                component-run* targets for running a single test case class. -->
        <property name="componentName" value="annotations/webfault/exceptionnaming/test" />


        <!-- This path id is used in the targets.xml file when running any of
                the component-run* targets.  This allows setting the classpath
                for an individual test. -->
        <path id="componentClasspath">
                <path refid="thinclientclasspath" />
        </path>

        <!-- only compile the support classes if not already done -->
        <uptodate property="supportBuild.notRequired" targetfile="${FVT.base.dir}/build/classes/annotations/support/Support.class">
                <srcfiles dir="${FVT.base.dir}/src/annotations/support" includes="**/*.java" />
        </uptodate>

        <!-- The buildall target will execute all of the targets necessary
                before installing the test into WebSphere. -->
        <target name="buildall" depends="setenv, clean, init, compileSupport, server, client, test, preinstall"/>

        <!-- The clean target will clean any files, classes, or directories
                so that a new copy of the test can be built and run. -->
        <target name="clean" depends="setenv">
                <delete dir="${FVT.build.classes.dir}/annotations/webfault/exceptionnaming" />
                <delete dir="${FVT.build.work.dir}/annotations/webfault/exceptionnaming" />
        </target>

        <!-- compile annotations.support package-->
        <target name="compileSupport" depends="setenv" unless="supportBuild.notRequired">
                <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/support" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                        <classpath refid="classpath" />
                </javac>
        </target>

        <!-- The init target will initialize any directories, properties, etc.
                that are needed for the test. -->
        <target name="init" depends="setenv">
                <antcall target="component-init" />
                <mkdir dir="${FVT.build.work.dir}/annotations/webfault/exceptionnaming/server1" />
                <mkdir dir="${FVT.build.work.dir}/annotations/webfault/exceptionnaming/server2" />
                <!--
                <antcall target="stop-server"/>
                -->

        </target>

        <!-- The server target will build anything necessary for the server
                piece of the test.  Typically this target builds the server side
                EAR. -->
        <target name="server" depends="setenv">
                <javac compiler="modern"
                        srcdir="${FVT.base.dir}/src/annotations/webfault/exceptionnaming"
                        destdir="${FVT.build.classes.dir}" deprecation="${deprecation}"
                        debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                        <include name="**/server*/*.java" />
                </javac>

                <wsgen genwsdl="true" keep="true" verbose="true" fork="true"
                        destdir="${FVT.build.work.dir}"
                        resourcedestdir="${FVT.build.work.dir}/annotations/webfault/exceptionnaming/server1"
                        sei="annotations.webfault.exceptionnaming.server1.WebFaultExceptionNaming"
                        classpath="${FVT.build.classes.dir}">
                        <classpath refid="classpath" />
                        <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
                </wsgen>

                <wsgen genwsdl="true" keep="true" verbose="true" fork="true"
                        destdir="${FVT.build.work.dir}"
                        resourcedestdir="${FVT.build.work.dir}/annotations/webfault/exceptionnaming/server2"
                        sei="annotations.webfault.exceptionnaming.server2.WebFaultDefaults"
                        classpath="${FVT.build.classes.dir}">
                        <classpath refid="classpath" />
                        <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
                </wsgen>
        </target>

	<!-- The client target will build anything necessary for the client
		piece of the test.  This could just be compiling the client class
		or in the case of a managed client, building a client side EAR
		file.
	-->
	<target name="client" depends="setenv">
		<wsimport keep="true" verbose="true" fork="true"
			destdir="${FVT.build.classes.dir}"
			wsdl="${FVT.build.work.dir}/annotations/webfault/exceptionnaming/server1/WebFaultExceptionNamingService.wsdl">
            <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
		</wsimport>

		<wsimport keep="true" verbose="true" fork="true"
			destdir="${FVT.build.classes.dir}"
			wsdl="${FVT.build.work.dir}/annotations/webfault/exceptionnaming/server2/WebFaultDefaultsService.wsdl">
            <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
		</wsimport>
	</target>

	<!-- The client target will build anything necessary for the test
		piece of the test.  Often this will just include compiling the
		the JUnit test case file. -->
	<target name="test" depends="setenv">
		<javac compiler="modern"
			srcdir="${FVT.base.dir}/src/annotations/webfault/exceptionnaming"
			destdir="${FVT.build.classes.dir}" deprecation="${deprecation}"
			debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
			<classpath refid="thinclientclasspath" />
			<include name="**/test/*.java" />
		</javac>
	</target>

	<!-- The preinstall target will perform any tasks necessary before the
		application is installed into WebSphere.  This could include running
		ejbdeploy or endptenabler for an EAR that contains an EJB. -->
	<target name="preinstall" depends="setenv">
	</target>

</project>





