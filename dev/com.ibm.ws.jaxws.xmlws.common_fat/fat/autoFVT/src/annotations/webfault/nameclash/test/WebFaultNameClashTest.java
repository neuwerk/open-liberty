/*
 * @(#) 1.9 autoFVT/src/annotations/webfault/nameclash/test/WebFaultNameClashTest.java, WAS.websvcs.fvt, WASX.FVT 4/30/07 12:12:33 [7/11/07 13:11:53]
 *
 *
 * IBM Confidential OCO Source Material
 * 5724-J08 (C) COPYRIGHT International Business Machines Corp. 2003, 2005
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 *
 * Change History:
 * Date        UserId      Feature/Defect     Description
 * -----------------------------------------------------------------------------
 * 06/16/2006  euzunca     LIDB3296.31.01     new file
 * 06/29/2006  euzunca     LIDB3296.31.01     javadoc/import/constructor/path names
 * 08/01/2006  euzunca     LIDB3296.31.01     added wsdl test case
 * 
 */

package annotations.webfault.nameclash.test;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.textui.TestRunner;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import annotations.support.WSDLEvaluator;
import annotations.support.XMLValidator;

import com.ibm.ws.wsfvt.build.tools.AppConst;
import com.ibm.ws.wsfvt.build.tools.ConfigRequirement;

/*
 * These are tooling tests for name clashing. 
 * 
 * notes:
 * 2007.01.04 - 394385 opened on this one.  Probably a permfail.  
 * Would be nice if wsgen caught the error, but that may be out of scope. 
 * 
 * 2007.04.30 removed test_j2w_NameClashing_WebMethodDefaults()
 * as 394385 cancelled 4/24. 
 */
public class WebFaultNameClashTest extends com.ibm.ws.wsfvt.test.framework.FVTTestCase {

	private static String buildDir = null;
	private static String testDir  = null;
	static {
		buildDir = AppConst.FVT_HOME + File.separator +
		          "build";
		testDir = "annotations" + File.separator +
			      "webfault" + File.separator +
			      "nameclash";
	}

	/*
	 * String arg constructor: This constructor allows for altering the test
	 * suite to include just one test.
	 */
	public WebFaultNameClashTest(String name) {
		super(name);
	}
	
	protected void suiteSetup(ConfigRequirement cr) throws java.lang.Exception {
        System.out.println("Do not need suiteSetup since no application is installed");    
    }

	/*
	 * This test method will verify that generated exception bean classes
	 * do not clash with other classes in the same package.
	 * 
	 * @testStrategy This test generates JAX-WS portable artifacts used 
	 *               in JAX-WS web services. The service implementation
	 *               contains a method named same as the exception Java beans used
	 *               (generated by the tool) for JAXB mapping. In the 
	 *               absence of customizations, the generated exception bean
	 *               and the method name clashes, and the java2wsdl tool
	 *               should raise an exception. As a result, artifacts are not
	 *               generated. This test case checks existence of the wsdl file.
	 */
    @com.ibm.ws.wsfvt.test.framework.FvtTest(description="This test generates JAX-WS portable artifacts used  in JAX-WS web services. The service implementation contains a method named same as the exception Java beans used (generated by the tool) for JAXB mapping. In the absence of customizations, the generated exception bean and the method name clashes, and the java2wsdl tool should raise an exception. As a result, artifacts are not generated. This test case checks existence of the wsdl file.",
    expectedResult="",
    since=com.ibm.ws.wsfvt.test.framework.FvtTest.Releases.WSFP)
	public void test_j2w_NameClash_FaultBean() throws Exception {

		File f = new File(buildDir + "/work/" +
				testDir + "/server1/WebFaultNameClash1Service.wsdl");

		assertFalse("wsdl must not be generated due to name clashing..!", f.exists());
	}
	
	/*
	 * This test method will verify that customizations in @WebFault and
	 * @WebMethod annotations do not cause a name clash.
	 * 
	 * @testStrategy This test generates the wsdl file from a service
	 * implementation. The exception class uses a @WebFault annotation with
	 * default values. In the implementation bean, @WebMethod
	 * annotation is used and the operation name is customized to be the same as
	 * the default fault name (the class name). This test case checks the validity 
	 * of the wsdl file generated by the java2wsdl tool.
     * 
     * 4.30.07 removed as 394385 cancelled.
	 * 
	 */
    @com.ibm.ws.wsfvt.test.framework.FvtTest(description="",
    expectedResult="",
    since=com.ibm.ws.wsfvt.test.framework.FvtTest.Releases.WSFP)
	public void _test_j2w_NameClashing_WebMethodDefaults() throws Exception {
		String wsdlFile = buildDir + "/work/" + testDir
				+ "/server3/WebFaultNameClash3Service.wsdl";
		File wsdl = new File(wsdlFile);

		boolean wsdlOK = false,
		        faultNameInWsdlCorrect = false;
		String errorMsg = null;
		
		if (wsdl.exists()) {
			faultNameInWsdlCorrect = checkFaultNameInWSDL(wsdl,
					"WebFaultNameClashException3");
			if (faultNameInWsdlCorrect) {
				try {
					XMLValidator validator = new XMLValidator();
					wsdlOK = validator.validateWSDL11(wsdl);
				} catch (ParserConfigurationException e) {
					// exception handling
				} catch (SAXException e) {
					errorMsg = e.toString();
				} catch (IOException e) {
					// exception handling
				}
			} else {
				fail("fault name is WRONG in the wsdl file..!");
			}
		} else
			fail(wsdlFile + " NOT found..!");

		assertTrue("Def. 394385 - "+ errorMsg, wsdlOK);
	}

	/*--------------------------------------------------------------------
	 * THIS TEST CASE IS NOT VALID ANYMORE SINCE @WEBFAULT(NAME) DOES NOT
	 * EFFECT THE FAULT NAME IN THE WSDL. CONFLICT WITH THE @WEBMETHOD(NAME)
	 * CANNOT BE GENERATED...
	 * -------------------------------------------------------------------
	 * This test method will verify that customizations in @WebFault and
	 * @WebMethod annotations do not cause a name clash.
	 * 
	 * @testStrategy This test generates the wsdl file from a service
	 * implementation. The exception class uses a @WebFault annotation and
	 * customizes the fault name. In the implementation bean, @WebMethod
	 * annotation is used and the operation name is customized to be the same as
	 * the fault name. This test case checks the validity of the wsdl file
	 * generated by the java2wsdl tool.
	 * 
	 */
    @com.ibm.ws.wsfvt.test.framework.FvtTest(description="",
    expectedResult="",
    since=com.ibm.ws.wsfvt.test.framework.FvtTest.Releases.WSFP)
	public void _test_j2w_NameClashing_WebMethod() throws Exception {
		String wsdlFile = buildDir + "/work/" + testDir
				+ "/server2/WebFaultNameClash2Service.wsdl";
		File wsdl = new File(wsdlFile);
		
		boolean wsdlOK = false,
		        faultNameInWsdlCorrect = false;
		
		String  errorMsg  = null;
		if (wsdl.exists()) {
			faultNameInWsdlCorrect = checkFaultNameInWSDL(wsdl, "WebFaultDefaultsException");
			if (faultNameInWsdlCorrect) {
				try {
					XMLValidator validator = new XMLValidator();
					wsdlOK = validator.validateWSDL11(wsdl);
				} catch (ParserConfigurationException e) {
					// exception handling
				} catch (SAXException e) {
					errorMsg = e.toString();
				} catch (IOException e) {
					// exception handling
				}
			}
			else{
				fail("fault name is WRONG in the wsdl file..!");
			}
		}
		else
			fail(wsdlFile + " NOT found..!");
		
		assertTrue(errorMsg, wsdlOK);
	}

	/*
	 * utility method
	 * --------------
	 * checks if the _faultName is correct in the wsdl file f
	 */
	private boolean checkFaultNameInWSDL(File f, String _faultName)
			throws Exception {

		boolean faultNameIsCorrect = false;

		DocumentBuilder builder = DocumentBuilderFactory.newInstance()
				.newDocumentBuilder();
		Document document = builder.parse(f);
		XPath xpath = XPathFactory.newInstance().newXPath();

		NodeList nodes = null;
		Node fault = null;
		String faultName = null;

		// get the fault element from the wsdl file
		String expression = "definitions" + "/portType" + "/operation"
				+ "/fault";

		nodes = (NodeList) xpath.evaluate(expression, document,
				XPathConstants.NODESET);

		// get the "name" attribute, if the fault exists
		if (nodes.getLength() > 0) {
			fault = nodes.item(0);
			faultName = WSDLEvaluator.getAttributeValue(fault, "name");
		} else {
			faultName = "NOT_FOUND";
		}

		if (faultName.equals(_faultName))
			faultNameIsCorrect = true;
		System.out.println(nodes.getLength() + "\n" +
				faultName + "\n");
		return faultNameIsCorrect;
	}
	
	public static junit.framework.Test suite() {
		System.out.println(WebFaultNameClashTest.class.getName());
		return new TestSuite(WebFaultNameClashTest.class);
	}

	public static void main(String[] args) {
		TestRunner.run(suite());
	}
}
