<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY instance SYSTEM "../../../../instance.xml"><!-- file:30 -->
<!ENTITY properties SYSTEM "../../../xmls/properties.xml"><!-- file:28 -->
<!ENTITY paths SYSTEM "../../../xmls/path_refs.xml"><!-- file:23 -->
<!ENTITY targets SYSTEM "../../../xmls/targets.xml"><!-- file:25 -->
<!ENTITY taskdefs SYSTEM "../../../xmls/taskdefs.xml"><!-- file:26 -->
<!ENTITY taskdefs_post_compile SYSTEM "../../../xmls/taskdefs_post_compile.xml"><!-- file:39 -->
]>

<!-- 1.7, 8/3/07

        Description: Build file for the webfault/customization test.

        Date        Author       Feature/Defect          Description
        08/25/2006  euzunca      LIDB3296.31.01          new file
        01/10/2007  btiffany                             change to use nondefault annotation attributes
          "                                              change to test annotation and binding separately
        02/14/07    btiffany                             add wsdllocation to wsimport for z-os
-->

<project name="build" default="buildall" basedir=".">

        <!-- These are XML entity refs.  Basically these statements cause the
                files declared in the DOCTYPE at the top of the file to be imported
                into this build file. -->
          &instance;
          &properties;
          &paths;
          &targets;
          &taskdefs;
          &taskdefs_post_compile;

        <!-- This property should match the package name of the test class.  The
                property is used in the targets.xml file when running any of the
                component-run* targets for running a single test case class. -->
        <property name="componentName" value="annotations/webfault/customization/test" />


        <!-- This path id is used in the targets.xml file when running any of
                the component-run* targets.  This allows setting the classpath
                for an individual test. -->
        <path id="componentClasspath">
                <path refid="thinclientclasspath" />
        </path>

        <uptodate property="supportBuild.notRequired" targetfile="${FVT.base.dir}/build/classes/annotations/support/Support.class" >
                <srcfiles dir= "${FVT.base.dir}/src/annotations/support" includes="**/*.java"/>
        </uptodate>

        <!-- The buildall target will execute all of the targets necessary
                before installing the test into WebSphere. -->
        <target name="buildall" depends="setenv, clean, init, compileSupport, server, client, test, preinstall" />

        <!-- The clean target will clean any files, classes, or directories
                so that a new copy of the test can be built and run. -->
        <target name="clean" depends="setenv">
                <delete dir="${FVT.build.classes.dir}/annotations/webfault/customization" />
                <delete dir="${FVT.build.work.dir}/annotations/webfault/customization" />
                <delete file="${FVT.build.lib.dir}/WebFaultCustomization.war" />
                <delete file="${FVT.build.installableApps.dir}/WebFaultCustomization.ear" />
        </target>

        <!-- The init target will initialize any directories, properties, etc.
                that are needed for the test. -->
        <target name="init" depends="setenv">
                <antcall target="component-init" />
                <mkdir dir="${FVT.build.work.dir}/annotations/webfault/customization/server" />
        </target>

        <!-- compile annotations/support package -->
        <target name="compileSupport" depends="setenv" unless="supportBuild.notRequired">
                <javac compiler="modern" srcdir="${FVT.base.dir}/src/annotations/support" destdir="${FVT.build.classes.dir}" deprecation="${deprecation}" debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                        <classpath refid="classpath" />
                </javac>
        </target>

        <!-- The server target will build anything necessary for the server
                piece of the test.  Typically this target builds the server side EAR. -->
        <target name="server" depends="setenv">

                <mkdir dir="${FVT.build.work.dir}/annotations/webfault/customization/server"/>

                <javac compiler="modern"
                        srcdir="${FVT.base.dir}/src/annotations/webfault/customization"
                        includes="**/server/*.java"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
                	    source="${build.tests.with.java.level}"
                	    target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                </javac>
                <!-- Modified for liberty run -->
                <wsgen genwsdl="true" keep="true" verbose="true" fork="true"
                        destdir="${FVT.build.work.dir}"
                        resourcedestdir="${FVT.build.work.dir}/annotations/webfault/customization/server"
                        sei="annotations.webfault.customization.server.WebFaultCustomization"
                        classpath="${FVT.build.classes.dir}">
                        <classpath refid="classpath" />
                        <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
                </wsgen>

                <war warfile="${FVT.build.lib.dir}/WebFaultCustomization.war"
                        webxml="${FVT.base.dir}/src/annotations/webfault/customization/etc/web.xml">
                        <!-- pick up compiled classes -->
                        <classes dir="${FVT.build.classes.dir}">
                                <include name="annotations/webfault/customization/server/*.class"/>
                                <include name="annotations/webfault/customization/server/*.java"/>
                        </classes>
                        <!-- pick up generated jaxws classes -->
                        <classes dir="${FVT.build.work.dir}">
                                <include name="annotations/webfault/customization/server/**/*.class"/>
                                <include name="annotations/webfault/customization/server/**/*.java"/>
                        </classes>
                </war>

                <ear earfile="${FVT.build.installableApps.dir}/WebFaultCustomization.ear"
                 appxml="${FVT.base.dir}/src/annotations/webfault/customization/etc/application.xml">
                        <fileset dir="${FVT.build.lib.dir}">
                                <include name="WebFaultCustomization.war" />
                        </fileset>
                </ear>
        </target>

        <!-- The client target will build anything necessary for the client
                piece of the test.  This could just be compiling the client class
                or in the case of a managed client, building a client side EAR
                file.
        -->
        <target name="client" depends="setenv">

                <!-- this task injects all the topologyProps.props data into Ant properites beginning with "prefix."... -->
                <!-- then we'll use them to adjust the host and port -->
                <readCellConfig prefix="server1" key="defaultServer" verbose="false" />

                <mkdir dir="${FVT.build.work.dir}/annotations/webfault/customization/client" />
                <copy todir="${FVT.build.work.dir}/annotations/webfault/customization/client" overwrite="yes" verbose="true">
                        <fileset dir="${FVT.build.work.dir}/annotations/webfault/customization/server">
                                <include name="*wsdl" />
                                <include name="*xsd" />
                        </fileset>
                        <!-- can't use brain damaged ant filterset here, use replace instead -->
                        <!--
                        <filterset begintoken="R" endtoken="L" >
                                <filter token="REPLACE_WITH_ACTUAL_URL" value="friggin_ant"/>
                        </filterset>
                        -->
                </copy>
                <!-- replace task isn't too bright either, variable substitution only occurs for this form of the task.  -->
                <replace file="${FVT.build.work.dir}/annotations/webfault/customization/client/WebFaultCustomizationService.wsdl"
                        token="REPLACE_WITH_ACTUAL_URL"
                        value="http://${new.default.host}:${new.wc.defaulthost}/webfaultcustomization/services/WebFaultCustomizationService"
                />

                <!-- Modified for liberty run -->
                <wsimport keep="true" verbose="true" destdir="${FVT.build.classes.dir}" fork="true"
                        wsdl="${FVT.build.work.dir}/annotations/webfault/customization/client/WebFaultCustomizationService.wsdl"
                        wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/webfaultcustomization/services/WebFaultCustomizationService?wsdl"
                >
                    <jvmarg line="-Djava.endorsed.dirs=${FVT.base.dir}/common/jars/endorsed"/>
                </wsimport>


                <!--
                <copy todir="${FVT.build.work.dir}/annotations/webfault/customization/client" overwrite="yes">
                        <fileset dir="${FVT.base.dir}/src/annotations/webfault/customization/client">
                                <include name="WebFaultCustomizationClient.java" />
                        </fileset>
                </copy>
                -->
                <!-- Modified for liberty run -->
                <javac compiler="modern" fork="true"
                        srcdir="${FVT.base.dir}/src/annotations/webfault/customization/client"
                        includes="**/*.java"
                        destdir="${FVT.build.classes.dir}"
                        deprecation="${deprecation}"
                        debug="${debug}"
                        source="${build.tests.with.java.level}"
                        target="${build.tests.with.java.level}"
                        failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                        <compilerarg value="-J-Xbootclasspath/p:${ref.to.22api}"/>
                </javac>
        </target>

        <!-- The test target will build anything necessary for the test
                piece of the test.  Often this will just include compiling the
                the JUnit test case file. -->
        <target name="test" depends="setenv">
                <javac compiler="modern"
                        srcdir="${FVT.base.dir}/src/annotations/webfault/customization"
                        destdir="${FVT.build.classes.dir}" deprecation="${deprecation}"
                        debug="${debug}" source="${build.tests.with.java.level}" target="${build.tests.with.java.level}" failonerror="${failonerror}">
                        <classpath refid="thinclientclasspath" />
                        <include name="**/test/*.java" />
                </javac>
        </target>

        <!-- The preinstall target will perform any tasks necessary before the
                application is installed into WebSphere.  This could include running
                ejbdeploy or endptenabler for an EAR that contains an EJB. -->
        <target name="preinstall" depends="setenv">
        </target>



        <!-- The install target will install the server side piece of the test
             into WebSphere.  This target calls the installTest.xml file for
             the test.
        -->
        <target name="install" depends="setenv">
          <ant antfile="${FVT.base.dir}/src/annotations/webfault/customization/installTest.xml"
               dir="${FVT.base.dir}/src/annotations/webfault/customization">
            <property name="install.mode" value="${rt.install.mode}"/>
          </ant>
        </target>


        <!-- The uninstall target will uninstall the server side piece of the test
             from WebSphere.  This target calls the uninstallTest.xml file for
             the test.
        -->
        <target name="uninstall" depends="setenv">
          <ant antfile="${FVT.base.dir}/src/annotations/webfault/customization/uninstallTest.xml"
               dir="${FVT.base.dir}/src/annotations/webfault/customization">
            <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
          </ant>
        </target>

</project>





