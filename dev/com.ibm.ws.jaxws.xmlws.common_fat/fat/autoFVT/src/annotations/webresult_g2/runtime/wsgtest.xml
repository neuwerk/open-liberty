<?xml version="1.0"?>
<project name="build" default="buildall" basedir=".">


  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->
  <property name="FVT.build.work.dir" value="c:\eclipse\wfvt\ws\code\websvcs.fvt\build\work" />
  <property name="FVT.base.dir" value="c:\eclipse\wfvt\ws\code\websvcs.fvt" />
  <property name="componentPath" value="annotations/webresult_g2/runtime" />
  <property name="betaworkdir"   value="${FVT.build.work.dir}/webresultg2beta"/>
  <property name="srcpath"       value="${FVT.base.dir}/src/${componentPath}"/>
  <property name="WAS.base.dir"  value="C:\Program Files\IBM\WebSphere\AppServer" />

  <path id="classpath">
             <pathelement path="c:\Progra~1\IBM\WebSphere\AppServer\runtimes\com.ibm.wsfp.thinclient.jar" />
  </path>

  <path id="wastaskclasspath">
    <!-- Important for wsimport/wsgen -->
    <pathelement location="${WAS.base.dir}/runtimes/com.ibm.wsfp.thinclient.jar"/>
  <!-- IMPORTANT : FOR NEW TOOL
    <pathelement location="${WAS.base.dir}/runtimes/com.ibm.wsfp.thinclient.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.runtime.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.wsfp.main.jar"/>
    -->
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.runtime.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.wsfp.main.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.wsfp.jaxws.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.wsfp.axis2.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.runtime.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.runtime.ws390.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.wccm.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.emf.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/com.ibm.ws.bootstrap.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/org.eclipse.core.runtime.jar"/>
    <pathelement location="${WAS.base.dir}/plugins/org.eclipse.osgi.jar"/>
    <pathelement location="${WAS.base.dir}/lib/j2ee.jar"/>
    <pathelement location="${WAS.base.dir}/lib/bootstrap.jar"/>
    <pathelement location="${FVT.base.dir}/build/classes"/>
  </path>

  <taskdef name="wsgen" loaderRef="refwsgen"  classname="com.sun.tools.ws.ant.WsGen">
      <classpath refid="wastaskclasspath"/>
  </taskdef>



  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.work.dir}/${betaworkdir}"/>
  </target>
  <target name="setenv" />
  <target name="init" />
  <target name="buildall" depends="setenv, clean, init, serverbeta, clientbeta"/>

  <target name="serverbeta" depends="setenv" >

      <echo message="removing ${betaworkdir}" />
      <delete dir="${betaworkdir}" />
      <mkdir dir="${betaworkdir}/wsgen" />

      <javac compiler="modern" srcdir="${srcpath}/server"
             destdir="${betaworkdir}"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="**/WRCB*.java"/>
      </javac>

      <!-- we're going to run this just to check the wsdl.
        For beta, we have to use wsimport to get a fully annotated sei
      -->

      <echo message="wsgen, just for checking..." />
      <wsgen
              genwsdl="true"
              keep="true"
              verbose="true"
              destdir="${betaworkdir}/wsgen"
              resourcedestdir="${betaworkdir}/wsgen"
              sourcedestdir="${betaworkdir}/wsgen"
              sei="annotations.webresult_g2.runtime.server.WRCBetaImpl"
              >
              <classpath>
                      <pathelement path="${betaworkdir}"/>
                      <pathelement path="c:\Progra~1\IBM\WebSphere\AppServer\runtimes\com.ibm.wsfp.thinclient.jar" />
                      <!-- <path refid="classpath"/> -->
           </classpath>
      </wsgen>


  </target>


  <target name="clientbeta" depends="setenv" >
       <!-- this time we need the beans and gen classes where junit can get at them -->
       <wsimport
               destdir="${FVT.build.classes.dir}"
               sourcedestdir="${FVT.build.classes.dir}"
               wsdl="${srcpath}/etcBeta/WRCBetaImplService.wsdl"
               verbose="true"
       >
       </wsimport>


      <javac compiler="modern" srcdir="${srcpath}/client"
             destdir="${FVT.build.classes.dir}"
             deprecation="${deprecation}"
             debug="${debug}"
             source="${build.tests.with.java.level}"
             target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath>
                <path refid="thinclientclasspath"/>
                <pathelement path="${FVT.build.classes.dir}"/>
             </classpath>
             <include name="*WRCB*Client.java" />
      </javac>

  </target>



  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->
  <target name="preinstall" depends="setenv">
  </target>


  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
  <target name="install" depends="setenv">
  <!-- nothing to install yet
    <ant antfile="${FVT.base.dir}/src/annotations/webservice/inheritance/installTest.xml"
         dir="${FVT.base.dir}/src/annotations/webservice/inheritance">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  -->
  </target>


  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
  <target name="uninstall" depends="setenv">
  <!-- nothing to install yet
    <ant antfile="${FVT.base.dir}/src/annotations/webservice/inheritance/uninstallTest.xml"
         dir="${FVT.base.dir}/src/annotations/webservice/inheritance">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  -->
  </target>

  <!-- for development/debug outside of harness -->
  <target name="runtests">
          <echo message= "need to implement this" />
  </target>

</project>
