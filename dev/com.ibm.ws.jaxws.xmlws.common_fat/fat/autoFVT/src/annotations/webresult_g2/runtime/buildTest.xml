<?xml version="1.0"?>
<!DOCTYPE project [
        <!ENTITY instance SYSTEM "../../../../instance.xml"><!-- file:34 -->
        <!ENTITY properties SYSTEM "../../../xmls/properties.xml"><!-- file:36 -->
        <!ENTITY paths SYSTEM "../../../xmls/path_refs.xml"><!-- file:31 -->
        <!ENTITY targets SYSTEM "../../../xmls/targets.xml"><!-- file:33 -->
        <!ENTITY taskdefs SYSTEM "../../../xmls/taskdefs.xml"><!-- file:34 -->
        <!ENTITY taskdefs_post_compile SYSTEM "../../../xmls/taskdefs_post_compile.xml"><!-- file:47 -->
]>

<!-- 1.1.1.10, 8/3/07

     Description: Build file for webservice annotation test

     Date           Author              Feature/Defect  Description
     08/02/06       Bruce Tiffany       lidb3296.31.01  new
     01/07/07        "                                  stop using wsdl in src dir for beta client
-->

<project name="build" default="buildall" basedir=".">


  <!-- These are XML entity refs.  Basically these statements cause the
       files declared in the DOCTYPE at the top of the file to be imported
       into this build file.
  -->
  &instance;
  &properties;
  &paths;
  &targets;
  &taskdefs;
  &taskdefs_post_compile;


  <property name="componentPath" value="annotations/webresult_g2/runtime" />
  <property name="warname"       value="webresultannog2"/>
  <property name="warfile"       value="${warname}.war" />
  <property name ="earfile"      value="${warname}.ear" />
  <property name="betaworkdir"   value="${FVT.build.work.dir}/webresultg2beta"/>
  <property name="srcpath"       value="${FVT.base.dir}/src/${componentPath}"/>

  <!-- This property should match the package name of the test class.  The
       property is used in the targets.xml file when running any of the
       component-run* targets for running a single test case class.
  -->
  <property name="componentName" value="${componentPath}/test"/>


  <!-- This path id is used in the targets.xml file when running any of
       the component-run* targets.  This allows setting the classpath
       for an individual test.
  -->
  <path id="componentClasspath">
    <path refid="thinclientclasspath"/>
  </path>


  <!-- The init target will initialize any directories, properties, etc.
       that are needed for the test.
  -->
  <target name="init" depends="setenv">
    <antcall target="component-init"/>
    <mkdir dir="${FVT.build.work.dir}/${componentPath}/client" />
  </target>


  <!-- The clean target will clean any files, classes, or directories
       so that a new copy of the test can be built and run.
  -->
  <target name="clean" depends="setenv">
    <delete dir="${FVT.build.classes.dir}/${componentPath}"/>
    <delete dir="${FVT.build.work.dir}/${componentPath}"/>
    <delete dir="${FVT.build.work.dir}/${betaworkdir}"/>
    <delete file="${FVT.build.lib.dir}/${warfile}"/>
    <delete file="${FVT.build.installableApps.dir}/${earfile}"/>
    <delete file="${FVT.build.installableApps.dir}/webresultannobeta.ear"/>
  </target>


  <!-- The buildall target will execute all of the targets necessary
       before installing the test into WebSphere.
  -->
  <target name="buildall" depends="setenv, clean, init, server, client, serverbeta, clientbeta, test, preinstall"/>


  <!-- The server target will build anything necessary for the server
       piece of the test.  Typically this target builds the server side
       EAR.

       If we needed to replace parameters in the java, we would copy to build/work/... then compile.

  -->
  <target name="server" depends="init">

    <echo message="javac..." />
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}"
           destdir="${FVT.build.work.dir}/${componentPath}"
           deprecation="${deprecation}"
           debug="${debug}"
           verbose="false"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server2/WebResultCheck*.java"/>
          <include name="**/server2/CustomerRecord*.java"/>
          <include name="**/server2/MyString*.java"/>
    </javac>

    <!-- keeping wsdl but not using it initially -->
    <echo message="wsgen..." />
    <wsgen
        genwsdl="true"
        keep="true"
        verbose="false"
        destdir="${FVT.build.work.dir}/${componentPath}"
        resourcedestdir="${FVT.build.work.dir}/${componentPath}"
        sourcedestdir="${FVT.build.work.dir}/${componentPath}"
        sei="annotations.webresult_g2.runtime.server2.WebResultCheck"
        >
        <classpath>
                <pathelement path="${FVT.build.work.dir}/${componentPath}"/>
                <path refid="classpath"/>
        </classpath>
    </wsgen>



    <!-- copy in impl source -->
    <copy file="${FVT.base.dir}/src/${componentPath}/server2/WebResultCheck.java" todir="${FVT.build.work.dir}/${componentPath}" />
    <copy file="${FVT.base.dir}/src/${componentPath}/server2/CustomerRecord.java" todir="${FVT.build.work.dir}/${componentPath}" />

    <!-- copy and rename empty wsdl so we can put in war file -->
    <mkdir dir="${FVT.build.work.dir}/${componentPath}/emptywsdl" />
    <copy   file="${FVT.base.dir}/src/${componentPath}/etc/wsdl/WebResultCheckService.wsdl_empty"
          tofile="${FVT.build.work.dir}/${componentPath}/emptywsdl/WebResultCheckService.wsdl" />


    <war warfile="${FVT.build.lib.dir}/${warfile}"
         webxml="${FVT.base.dir}/src/annotations/webresult_g2/runtime/etc/dd/web.xml">
      <webinf dir="${FVT.build.work.dir}/${componentPath}/emptywsdl" prefix="WEB-INF/wsdl">
        <include name="*.wsdl"/>
        <include name="*.xsd"/>
      </webinf>
      <!-- pick up generated jaxws classes -->
      <classes dir="${FVT.build.work.dir}/${componentPath}">
          <include name="**/*class"/>
          <include name="**/*java"/>
         <!-- <include name="annotations/webresult_g2/runtime/server/**"/> -->
      </classes>
    </war>

    <ear earfile="${FVT.build.installableApps.dir}/${earfile}"
       appxml="${FVT.base.dir}/src/${componentPath}/etc/dd/application.xml">
       <fileset dir="${FVT.build.lib.dir}" includes="${warfile}"/>
    </ear>


  </target>



  <!-- build this for debugging stack overflow defect.  Not part of default tests -->
  <target name="server_withwsdl" depends="clean, init">

    <mkdir dir="${FVT.build.work.dir}/${componentPath}"/>
    <delete file="${FVT.build.installableApps.dir}/${earfile}withwsdl" />
    <delete file="${FVT.build.lib.dir}/${warfile}" />

    <echo message="javac..." />
    <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}"
           destdir="${FVT.build.work.dir}/${componentPath}"
           deprecation="${deprecation}"
           debug="${debug}"
           verbose="false"
    	   source="${build.tests.with.java.level}"
    	   target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
          <classpath refid="classpath"/>
          <include name="**/server2/WebResultCheck*.java"/>
          <include name="**/server2/CustomerRecord*.java"/>
          <include name="**/server2/MyString*.java"/>
    </javac>

    <!-- keeping wsdl but not using it initially -->
    <echo message="wsgen..." />
    <wsgen
        genwsdl="true"
        keep="true"
        verbose="false"
        destdir="${FVT.build.work.dir}/${componentPath}"
        resourcedestdir="${FVT.build.work.dir}/${componentPath}"
        sourcedestdir="${FVT.build.work.dir}/${componentPath}"
        sei="annotations.webresult_g2.runtime.server2.WebResultCheck"
        >
        <classpath>
                <pathelement path="${FVT.build.work.dir}/${componentPath}"/>
                <path refid="classpath"/>
        </classpath>
    </wsgen>



    <!-- copy in impl source -->
    <copy file="${FVT.base.dir}/src/${componentPath}/server2/WebResultCheck.java" todir="${FVT.build.work.dir}/${componentPath}" />
    <copy file="${FVT.base.dir}/src/${componentPath}/server2/CustomerRecord.java" todir="${FVT.build.work.dir}/${componentPath}" />

    <war warfile="${FVT.build.lib.dir}/${warfile}"
         webxml="${FVT.base.dir}/src/annotations/webresult_g2/runtime/etc/dd/web.xml">
      <!-- supply full wsdl this time -->
      <webinf dir="${FVT.build.work.dir}/${componentPath}" prefix="WEB-INF/wsdl">
        <include name="*.wsdl"/>
        <include name="*.xsd"/>
      </webinf>

      <!-- pick up generated jaxws classes -->
      <classes dir="${FVT.build.work.dir}/${componentPath}">
          <include name="**/*class"/>
          <include name="**/*java"/>
         <!-- <include name="annotations/webresult_g2/runtime/server/**"/> -->
      </classes>
    </war>

    <ear earfile="${FVT.build.installableApps.dir}/${earfile}withwsdl"
       appxml="${FVT.base.dir}/src/${componentPath}/etc/dd/application.xml">
       <fileset dir="${FVT.build.lib.dir}" includes="${warfile}"/>
    </ear>


  </target>


  <!-- The client target will build anything necessary for the client
       piece of the test.  This could just be compiling the client class
       or in the case of a managed client, building a client side EAR
       file.

       Note that in this test, we're changing namespace parameters, so
       package names are not what we expect (ifimpl and iftest, or some such thing).
       Yet we have to put the classes in buid/classes directory to be able
       to cleanly run the client later.

            If you need to FIND the generated client classes to examine them,
            use this parameter instead:
                        destdir="${FVT.build.work.dir}/${componentPath}/client"
  -->
  <target name="client" depends="setenv">
      <!-- generate client side classes -->
      <echo message="wsimport...." />
          <wsimport
              keep="true"
              verbose="true"
              sourcedestdir="${FVT.build.work.dir}/${componentPath}/client"
              destdir="${FVT.build.classes.dir}"
              wsdl="${FVT.build.work.dir}/annotations/webresult_g2/runtime/WebResultCheckService.wsdl">
          </wsimport>

      <!-- compile client implementation -->
          <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}/client"
             destdir="${FVT.build.classes.dir}"
             deprecation="${deprecation}"
             debug="${debug}"
      	     source="${build.tests.with.java.level}"
      	     target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath>
                 <path refid="thinclientclasspath"/>
                 <pathelement path="${FVT.build.classes.dir}"/>
             </classpath>
        <include name="*lient.java"/>
        <exclude name="*eta*lient.java" />

      </javac>
  </target>


  <target name="serverbeta" depends="setenv" >

      <echo message="removing ${betaworkdir}" />
      <delete dir="${betaworkdir}" />
      <mkdir dir="${betaworkdir}/wsgen" />

      <javac compiler="modern" srcdir="${srcpath}/server"
             destdir="${betaworkdir}"
             deprecation="${deprecation}"
             debug="${debug}"
  	         source="${build.tests.with.java.level}"
  	         target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
        <classpath refid="classpath"/>
        <include name="**/WRCB*.java"/>
      </javac>

      <!-- we're going to run this just to check the wsdl.
        For beta, we have to use wsimport to get a fully annotated sei
      -->

      <echo message="wsgen.." />
      <wsgen
              genwsdl="true"
              keep="true"
              verbose="true"
              destdir="${betaworkdir}/wsgen"
              resourcedestdir="${betaworkdir}/wsgen"
              sourcedestdir="${betaworkdir}/wsgen"
              sei="annotations.webresult_g2.runtime.server.WRCBetaImpl"
              >
              <!-- don't know why classpath refid has to be in wsgen's classpath, but it does -->
              <classpath>
                <path refid="classpath"/>
                 <pathelement path="${betaworkdir}"/>
              </classpath>
      </wsgen>


      <!-- here we've manually copied the wsdl to the source tree, and patched up the schema file
           Now we run wsimport against our patched wsdl and schema.

           AS of 11/15, we're just going to use the generated wsdl.  See workspace backup to revert this whole mess.
       -->
       <wsimport
               destdir="${betaworkdir}"
               sourcedestdir="${betaworkdir}"
               wsdl="${betaworkdir}/wsgen/WRCBetaImplService.wsdl"
               verbose="true"
       >
       </wsimport>

       <!-- Miraculously, the generated SEI contains the
            correct annotations, so we don't have to replace it.
       -->


      <!-- at this point everything we need except the wsdl should be in betaworkdir... -->
      <!-- create war file and ear file -->

      <war warfile="${FVT.build.lib.dir}/webresultannobeta.war"
           webxml="${srcpath}/etcBeta/dd/web.xml">

       <!--
        <zipfileset dir="${srcpath}/etcBeta" prefix="WEB-INF/wsdl">
          <include name="*wsdl" />
          <include name="*xsd"  />
        </zipfileset>
        -->

        <zipfileset dir="${betaworkdir}/wsgen" prefix="WEB-INF/wsdl">
          <include name="*wsdl" />
          <include name="*xsd"  />
        </zipfileset>

        <!-- toss in the source too -->
        <!-- use the workdir since we did some funny copy/rename stuff, don't want to confuse -->
        <!-- we pick up wsimport's beans due to package limitation, but exclude the cient, since it confuses the server -->
        <classes dir="${betaworkdir}">
          <include name="**/*.java"/>
          <include name="**/*.class"/>
          <exclude name="**/WRCBetaImplService.*"/>
          <exclude name="wsgen/**/*"/>
        </classes>
        <!-- toss in impl source -->
        <classes dir="${srcpath}/server">
          <include name="**/WRCB*Impl.java"/>
        </classes>
      </war>

      <ear earfile="${FVT.build.installableApps.dir}/webresultannobeta.ear"
           appxml="${srcpath}/etcBeta/dd/application.xml" >
        <fileset dir="${FVT.build.lib.dir}" includes="webresultannobeta.war"/>
      </ear>

  </target>


  <target name="clientbeta" depends="setenv" >

       <!-- this time we need the beans and gen classes where junit can get at them -->
       <!-- 1.8.07 - quit pulling wsdl from src tree,was wsdl="${srcpath}/etcBeta/WRCBetaImplService.wsdl" -->
       <wsimport
               destdir="${FVT.build.classes.dir}"
               sourcedestdir="${FVT.build.classes.dir}"
               wsdl="${betaworkdir}/wsgen/WRCBetaImplService.wsdl"
               verbose="true"
       >
       </wsimport>


      <javac compiler="modern" srcdir="${srcpath}/client"
             destdir="${FVT.build.classes.dir}"
             deprecation="${deprecation}"
             debug="${debug}"
  	         source="${build.tests.with.java.level}"
  	         target="${build.tests.with.java.level}"
             failonerror="${failonerror}">
             <classpath>
                <path refid="thinclientclasspath"/>
                <pathelement path="${FVT.build.classes.dir}"/>
             </classpath>
             <include name="*WRCB*Client.java" />
      </javac>

  </target>

  <!-- The test target will build anything necessary for the test
       piece of the test.  Often this will just include compiling the
       the JUnit test case file.
  -->
  <target name="test" depends="setenv, client">

    <javac compiler="modern" srcdir="${srcpath}"
           destdir="${FVT.build.classes.dir}"
           deprecation="${deprecation}"
           debug="${debug}"
           source="${build.tests.with.java.level}"
           target="${build.tests.with.java.level}"
           failonerror="${failonerror}">
      <classpath refid="classpath"/>
      <include name="**/test/*.java"/>
    </javac>

  </target>


  <!-- The preinstall target will perform any tasks necessary before the
       application is installed into WebSphere.  This could include running
       ejbdeploy or endptenabler for an EAR that contains an EJB.
  -->
  <target name="preinstall" depends="setenv">
  </target>


  <!-- The install target will install the server side piece of the test
       into WebSphere.  This target calls the installTest.xml file for
       the test.
  -->
  <target name="install" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/webresult_g2/runtime/installTest.xml"
         dir="${FVT.base.dir}/src/annotations/webresult_g2/runtime">
      <property name="install.mode" value="${rt.install.mode}"/>
    </ant>
  </target>


  <!-- The uninstall target will uninstall the server side piece of the test
       from WebSphere.  This target calls the uninstallTest.xml file for
       the test.
  -->
  <target name="uninstall" depends="setenv">
    <ant antfile="${FVT.base.dir}/src/annotations/webresult_g2/runtime/uninstallTest.xml"
         dir="${FVT.base.dir}/src/annotations/webresult_g2/runtime">
      <property name="uninstall.mode" value="${rt.uninstall.mode}"/>
    </ant>
  </target>


</project>
