/*
 * autoFVT/src/annotations/webservice_g2/inheritance/test/WebserviceInheritanceToolingTest.java, WAS.websvcs.fvt, WAS85.FVT, cf011231.01
 *
 *
 * IBM Confidential OCO Source Material
 * 5724-J08 (C) COPYRIGHT International Business Machines Corp. 2003, 2005
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 *
 * Change History:
 * Date        UserId      Feature/Defect     Description
 * -----------------------------------------------------------------------------
 * 07/21/2006  btiffany    LIDB3296.31.01     new file
 * 09/07/2007  btiffany    398900.2           removing testInhSeiWsdl as invalid.
 *
 */

package annotations.webservice_g2.inheritance.test;
import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.textui.TestRunner;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import annotations.support.*;
/**
 * @throws Exception
 *
 * @author btiffany
 *
 * When it comes to inheritance, the latest thinking seems to be jsr250 2.1 of Apr 19, 2006, which
 * contains the following (paraphrased) high points:
 *
 * 1) Class annotations don't affect members declared by any superclass
 * 2) implemented interfaces (not same as referenced by endpointinterface=... !) never contribute annotations
 * 4) inherited members maintain what they had IN THE CLASS THAT DECLARED THEM
 * 5) overriding or hiding causes annotations to be ignored.
 *
 */
public class WebserviceInheritanceToolingTest extends com.ibm.ws.wsfvt.test.framework.FVTTestCase {

    String workDir=Support.getFvtBaseDir()+"/build/work/webservice_g2_inheritance/tooling";

    /** @testStrategy generate wsdl for an sei impl. class
     * that both implements interfaces and extends classes.
     * Per jsr224 3.4.1, all inherited methods should map to wsdl.
     *
     * We're looking at wsdl for annotations.webservice_g2.inheritance.tooling.InheritImpl,
     * which has a 2-level inheritance on interface, and also a 2-level inheritance
     * by extending classes.
     *
     * As of 7.21, extended classes were failing.
     *
     *
     */
    @com.ibm.ws.wsfvt.test.framework.FvtTest(description="generate wsdl for an sei impl. class  that both implements interfaces and extends classes. Per jsr224 3.4.1, all inherited methods should map to wsdl.  We're looking at wsdl for annotations.webservice_g2.inheritance.tooling.InheritImpl, which has a 2-level inheritance on interface, and also a 2-level inheritance by extending classes.  As of 7.21, extended classes were failing.  ",
    expectedResult="",
    since=com.ibm.ws.wsfvt.test.framework.FvtTest.Releases.WSFP)
    public void testInhImplWsdl() throws Exception {
        System.out.println("********** testInhImplWsdl() is running **********");

        // the wsdl was generated by ant, go look at it and make sure
        // all methods are there.
        String infil = workDir+"/InheritImplService.wsdl";
                DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                Document document = builder.parse(new File(infil));
                XPath xpath = XPathFactory.newInstance().newXPath();
                NodeList nodes = null;

                // look for element name, should match annnotation parameter
                String expression = "definitions/portType/operation[@name='echo']";
                nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
                assertTrue("op name echo not found in wsdl", nodes.getLength()==1);
                System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

                expression = "definitions/portType/operation[@name='echoIf']";
                nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
                assertTrue("inherited op name echoIf not found in wsdl", nodes.getLength()==1);
                System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

                expression = "definitions/portType/operation[@name='echoIf2']";
                nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
                assertTrue("inherited op name echoIf2 not found in wsdl", nodes.getLength()==1);
                System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

                expression = "definitions/portType/operation[@name='echo2']";
                nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
                assertTrue("(def. 397702) inherited op name echo2 not found in wsdl", nodes.getLength()==1);
                System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

                expression = "definitions/portType/operation[@name='echo1']";
                nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
                assertTrue("inherited op name echo1 not found in wsdl", nodes.getLength()==1);
                System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());


    }



        /** @testStrategy generate wsdl for an sei impl. class
         * that both implements interfaces and extends classes, AND
         * uses an SEI to define the contract.
         * Per jsr224 3.4.1, all inherited methods should map to wsdl.
         *
         */
    @com.ibm.ws.wsfvt.test.framework.FvtTest(description="generate wsdl for an sei impl. class  that both implements interfaces and extends classes, AND uses an SEI to define the contract. Per jsr224 3.4.1, all inherited methods should map to wsdl. ",
    expectedResult="",
    since=com.ibm.ws.wsfvt.test.framework.FvtTest.Releases.WSFP)
        public void _testInhSeiWsdl() throws Exception {
            System.out.println("********** testInhSeiWsdl() is running **********");

            // because the wsgen task is failing right now, that will cause
            // the fvt build to fail.  So, call it here instead
            ImplementationAdapter imp = new IBM_ImplementationAdapter(workDir);
            try{
                imp.j2w("","src/annotations/webservice_g2/inheritance/tooling/Inh*.java",
                    "annotations.webservice_g2.inheritance.tooling.InheritSeiImpl");
            } catch(Exception e){
                e.printStackTrace();
                fail("def. 398900 - wsgen does not detect inherited methods as implementing an interface");
            }


            // go look at wsdl and make sure
            // all methods are there.
            String infil = workDir+"/InheritSeiImplService.wsdl";
            File f = new File(infil);
            assertTrue("def. 398900 - wsgen failed to generate wsdl", f.exists());
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            Document document = builder.parse(new File(infil));
            XPath xpath = XPathFactory.newInstance().newXPath();
            NodeList nodes = null;

            // look for element name, should match annnotation parameter
            String expression = "definitions/portType/operation[@name='echo']";
            nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
            assertTrue("op name echo not found in wsdl", nodes.getLength()==1);
            System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

            expression = "definitions/portType/operation[@name='echoIf']";
            nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
            assertTrue("inherited op name echoIf not found in wsdl", nodes.getLength()==1);
            System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

            expression = "definitions/portType/operation[@name='echoIf2']";
            nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
            assertTrue("inherited op name echoIf2 not found in wsdl", nodes.getLength()==1);
            System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

            expression = "definitions/portType/operation[@name='echo1']";
            nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
            assertTrue("(def. 397702) inherited op name echo1 not found in wsdl", nodes.getLength()==1);
            System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

            expression = "definitions/portType/operation[@name='echo2']";
            nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
            assertTrue("inherited op name echo2 not found in wsdl", nodes.getLength()==1);
            System.out.println("xpath found: "+nodes.item(0).getAttributes().getNamedItem("name").getNodeValue());

            // if we ever get past that, we'll need to check the runtime case
            fail("tooling tests pass, now need to write runtime case");

        }


        public static void main(String[] args) throws Exception {
        WebserviceInheritanceToolingTest  t = new WebserviceInheritanceToolingTest();
                //t.testInhImplWsdl();
        //t.testInhSeiWsdl();
                TestRunner.run(suite());
        }


    /**
     * junit needs next 3.
     * @return A Test object containing tests to be run
     */
    public static junit.framework.Test suite() {
         return new TestSuite(WebserviceInheritanceToolingTest.class);
    }

        public WebserviceInheritanceToolingTest(String str) {
                super(str);
        }

        public WebserviceInheritanceToolingTest(){
                super();
        }



}
