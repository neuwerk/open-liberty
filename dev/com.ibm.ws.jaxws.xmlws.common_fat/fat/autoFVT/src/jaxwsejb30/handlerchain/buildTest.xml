<?xml version="1.0"?>

<!--
    autoFVT/src/jaxwsejb30/handlerchain/buildTest.xml, WAS.websvcs.fvt, WAS85.FVT, cf011231.01
    
    Change History:
    Date            UserId              Feature/Defect          Description
    ***************************************************************************
    04/10/2009      btiffany            582987.1                new file
-->

<project default="buildall" basedir=".">
    <import file="../../xmls/common_imports.xml" />

    <!--
        This property should match the package name of the test class.  The
        property is used in the targets.xml file when running any of the
        component-run* targets for running a single test case class.
    -->
    <property name="componentName"
              value="jaxwsejb30/handlerchain/test" />

    <!-- 
        This path id is used in the targets.xml file when running any of
        the component-run* targets.  This allows setting the classpath 
        for an individual test.
    -->
    <path id="componentClasspath">
        <path refid="thinclientclasspath" />
    </path>
    
    <property name="componentPath" value="jaxwsejb30/handlerchain" />

    <!-- 
        MY PROPERTIES
    -->
	<property name="workdir" value="${FVT.build.work.dir}/jaxwsejb30/handlerchain"/>
	<property name="workdirmc" value="${FVT.build.work.dir}/jaxwsejb30/handlerchainmc"/>
	<property name="warfile" value="warechoannoimpl.war" />
	<property name="earfile" value="jaxwsejb30handlerhchain.ear"/>
	<property name="srcdir" value="${FVT.base.dir}/src/${componentPath}" />


    <!-- =================================
          target: init
         ================================= -->
    <target name="init"
            description="--> Creates initial directories needed for tests">
        <antcall target="component-init" />
        <mkdir dir="${workdir}" />
		 <mkdir dir="${workdirmc}" />

    </target>

    <!-- ================================= 
          target: clean
         ================================= -->
    <target name="clean"
            description="--> clean any files, classes, or directories
                           so that a new copy of the test can be built and run">
        <delete dir="${workdir}" />
        <delete dir="${workdirmc}" />
	    <delete failonerror="false">
                 <fileset dir="${FVT.build.lib.dir}">
                    <include name = "${warfile}"/>
                 </fileset>
                 <fileset dir="${FVT.build.installableApps.dir}">
                    <include name = "*${earfile}" />
                 </fileset>
	             <fileset dir="${FVT.build.classes.dir}/jaxwsejb30/handlerchain">
	                 <include name="**/*"/>
                 </fileset>
	    </delete>
    </target>

    <!-- =================================
          target: buildall
         ================================= -->
    <target name="buildall"
            depends="clean, init, setenv, server, client, managedclient, test" />

    <!-- ================================= 
          target: server
         
          The server target will build anything necessary for the server
          piece of the test.  Typically this target builds the server side
          EAR.
         ================================= -->
    <target name="server"
            depends="setenv"
            description="--> Build servers">
            
       <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}/server"
            destdir="${workdir}"
            deprecation="${deprecation}"
            debug="${debug}"
            source="${build.tests.with.java.level}"
            target="${build.tests.with.java.level}"
            failonerror="${failonerror}">
       		<classpath refid="classpath"/>
	       <include name="**/WarEchoAnnoImpl.java"/>    
	       <include name="**/*Handler*java" />
        </javac>
	     <echo message="wsgen....." />
	     <wsgen genwsdl="true"
             keep="true"
             verbose="true"
             destdir="${workdir}"
             resourcedestdir="${workdir}"
             sei="jaxwsejb30.handlerchain.server.WarEchoAnnoImpl"
             >
             <classpath path="${workdir}"/>
             <classpath refid="classpath" />
         </wsgen> 

	    <!-- copy the handler files  and src to the right place -->
	     <copydir src="${srcdir}/server/"
			dest="${workdir}/jaxwsejb30/handlerchain/server/"  >
	          <include name="*xml"/>
	     </copydir>
	    <war warfile="${FVT.build.lib.dir}/${warfile}"
	         webxml="${srcdir}/server/dd/web.xml">

	      <webinf dir="${srcdir}/server/dd" >
	          <include name="webservices.xml" />
	      </webinf>

	
	        <!-- pick up generated jaxws classes  and handler file -->
	       <classes dir="${workdir}">
	          <include name="**/*.class"/>
	          <include name="**/*.java"/>	
	          <include name="**/*.xml" />
	       </classes>
	    </war>

    <ear earfile="${FVT.build.installableApps.dir}/${earfile}"
         appxml="${srcdir}/server/dd/application.xml">
      <fileset dir="${FVT.build.lib.dir}" includes="${warfile}"/>
    </ear>
  </target>

    <!-- ================================= 
          target: client
          
          The client target will build anything necessary for the client
          piece of the test.  This could just be compiling the client class
          or in the case of a managed client, building a client side EAR
          file.
         ================================= -->
    <target name="client"
            depends="setenv"
            description="--> Build clients">
	    <echo message="wsimport...." />
        <wsimport
             keep="true"
             verbose="true"
             sourcedestdir="${FVT.build.classes.dir}"
             destdir="${FVT.build.classes.dir}"
             wsdl="${workdir}/WarEchoAnnoImplService.wsdl">
	   </wsimport>


    </target>
	
	<target name="managedclient" depends="setenv">	
	  <readCellConfig prefix="server1" key="defaultServer" verbose="false"/>
	    <!-- for managed client, we must have a wsdl in the jar, or the webserviceref annotation
	         will not work.	         
	         I don't like burning the test url into the jar, but we have to do it here.
	     -->
	    
	    <replace file="${workdir}/WarEchoAnnoImplService.wsdl"
             token="REPLACE_WITH_ACTUAL_URL"
             value="http://${server1.hostName}:${server1.WC_defaulthost}/jaxwsejb30handlerchain_warechoannoimpl/warechoannoimplservice"
        />  
        
        <echo message="client url burned in: http://${server1.hostName}:${server1.WC_defaulthost}/jaxwsejb30handlerchain_warechoannoimpl/warechoannoimplservice" />  

	
	    <echo message="wsimport...." />
	    <mkdir dir="${workdirmc}" />
	    <wsimport
	         keep="true"
	         verbose="true"
	         sourcedestdir="${workdirmc}"
	         destdir="${workdirmc}"
	         wsdl="${workdir}/WarEchoAnnoImplService.wsdl">
	   </wsimport>
	
	    <!-- put handler config file in right place -->
	    <copy file="${srcdir}/managedclientdd/mchandlerchain.xml" 
	          todir="${workdirmc}/jaxwsejb30/handlerchain/mclient" 
	    />
	
	   
		<!-- here we can't bury the client inside the testcase, darn -->
	    <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}/mclient"
	         destdir="${workdirmc}"
	         deprecation="${deprecation}"
	         debug="${debug}"
			 source="${build.tests.with.java.level}"
			 target="${build.tests.with.java.level}"
	         failonerror="${failonerror}">
	    		<classpath refid="classpath"/>
		       <include name="**/*.java"/>    
	    </javac>
	    <!-- handlers -->
	    <javac compiler="modern" srcdir="${FVT.base.dir}/src/${componentPath}/server"
	         destdir="${workdirmc}"
	         deprecation="${deprecation}"
	         debug="${debug}"
        	 source="${build.tests.with.java.level}"
        	 target="${build.tests.with.java.level}"
	         failonerror="${failonerror}">
	    		<classpath refid="classpath"/>
		       <include name="**/*Handler.java"/>    
	    </javac>
	
	    <!-- todo: jar source -->
	
	    <delete file="${FVT.build.lib.dir}/jaxwsejb30hcclient.jar"/>
		<jar jarfile="${FVT.build.lib.dir}/jaxwsejb30hcclient.jar"
			manifest="${srcdir}/managedclientdd/MANIFEST.MF" 
			>		                 
		   <fileset dir="${workdirmc}"> 
	             <include name="**/*.class"/>
	             <include name="**/*.java"/>
	             <include name="**/*.xml" />
	       </fileset>
	       
		   <zipfileset dir="${workdir}"
                       prefix="META-INF/wsdl" >
	              <include name="*wsdl" />
				  <include name="*xsd" />
		   </zipfileset>
		   
	        <zipfileset dir="${srcdir}/managedclientdd"
    			prefix="META-INF">
	           <include name="application-client.xml" />			 
            </zipfileset>
	    </jar>		
		
	    <ear earfile="${FVT.build.installableApps.dir}/jaxwsejb30hcclient.ear"
	         appxml="${srcdir}/managedclientdd/application.xml">
	         <!-- manifest="${packagedir}/client/META-INF/MANIFEST.MF"> -->
	      <fileset dir="${FVT.build.lib.dir}">
	        <include name="jaxwsejb30hcclient.jar"/>
	      </fileset>
	    </ear>
	</target>
	

    <!-- ================================= 
          target: test
              
          The test target will build anything necessary for the test
          piece of the test.  Often this will just include compiling the
          the JUnit test case file.
         ================================= -->
    <target name="test" depends="setenv" description="--> Build tests">
        <javac compiler="modern" srcdir="${srcdir}/test"
               destdir="${FVT.build.classes.dir}"
               deprecation="${deprecation}"
               verbose="${verbose.output}"
               debug="${debug}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
             <classpath refid="componentClasspath"/>   
            <include name="*.java" />
        </javac>

    </target>

    <!-- ================================= 
          target: preinstall
          
          The preinstall target will perform any tasks necessary before the
          application is installed into WebSphere.  This could include running
          ejbdeploy or endptenabler for an EAR that contains an EJB.
         ================================= -->
    <target name="preinstall"
            depends="setenv"
            description="--> Runs EJB deploy and/or Endpointenabler">

    </target>

    <!-- ================================= 
          target: install
          
          The install target will install the server side piece of the test
          into WebSphere.  This target calls the installTest.xml file for
          the test.
         ================================= -->
    <target name="install"
            depends="setenv, preinstall"
            description="--> Installs the App">
        <ant antfile="${srcdir}/installTest.xml" dir="${srcdir}">
            <property name="install.mode" value="${rt.install.mode}" />
        </ant>
    </target>

    <!-- ================================= 
          target: uninstall 
          
          The uninstall target will uninstall the server side piece of the test
          from WebSphere.  This target calls the uninstallTest.xml file for
          the test.
             ================================= -->
    <target name="uninstall"
            depends="setenv"
            description="--> Uninstalls the App">
        <ant antfile="${srcdir}/uninstallTest.xml" dir="${srcdir}">
            <property name="uninstall.mode" value="${rt.uninstall.mode}" />
        </ant>
    </target>


</project>
