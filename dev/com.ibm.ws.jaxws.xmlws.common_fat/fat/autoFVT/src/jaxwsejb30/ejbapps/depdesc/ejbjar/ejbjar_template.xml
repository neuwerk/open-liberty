<!-- service-ref template, used by clients for service-refs -->
<!-- see sec 4.2 of jsr109 -->

<port-component-ref>

</port-component-ref>

<!-- pretty much a clone of webservices.xml -->
<service-ref>
    <service-ref-name>
        jndi-name, traditionally service/(blah..)
    </service-ref-name>

    <service-interface>fq_classname-jax-ws-or-rpc</service-interface>

    <!--0-1-->
    <service-ref-type>fq_classType</service-ref-type>
    <!-- 7.2.3:
        The service-ref-type element declares the type of the serviceref
        element that is injected or returned when a JNDI lookup
        is done. This must be either a fully
        qualified name of Service class or the fully qualified
        name of Service endpoint interface class. This is
        an optional element and used only with JAX-WS.
        
        Schema:
        This is only used with JAX-WS runtime where the corresponding
        @WebServiceRef annotation can be used to denote both a Service
        or a Port.
        If this is not specified, then the type of service-ref element
        that is injected or returned when a JNDI lookup is done is
        always a Service interface/class.
        
    -->


    <!--0-1-->
    <wsdl-file>AnyURI</wsdl-file>


    <!--0-1-->
    jaxrpc-mapping-file>pathType
    </jaxrpc-mapping-file>
    <!-- na for jaxws -->

    <!--0-1-->
    <service-qname>Qname</service-qname>
    <!--
        The service-qname element declares the specific WSDL service
        element that is being refered to. It is not specified if no
        wsdl-file is declared.
        
        (Perhaps if there is >1 service in the wsdl? )
    -->

    <!--0-n-->
    <port-component-ref>

        <service-endpoint-interface>fq_classname</service-endpoint-interface/>

        <!--0-1-->
        <enable-mtom>true/false</enable-mtom>


        <!--0-1-->
        <port-component-link>String</port-component-link>
        <!-- The port-component-link element links a port-component-ref
            to a specific port-component required to be made available
            by a service reference.
            
            The value of a port-component-link must be the
            port-component-name of a port-component in the same module
            or another module in the same application unit. The syntax
            for specification follows the syntax defined for ejb-link
            in the EJB 2.0 specification.
        -->
    </port-component-ref>

    <!-- jax-rpc only -->
    <handler>...</handler>

    <!-- duplicate of server side, so if I can write tests for that side,
        they should be usable on this side
    -->
    <!--0-n-->
    <handler-chains>
        <!--0-n-->
        <handler-chain>
            <service-name-pattern></service-name-pattern>
            <port-name-pattern></port-name-pattern>
            <protocol-bindings>
                <protocol-bindings>
                    <handler></handler>
                    <handler-name>MyHandler</handler-name>
                    <handler-class>
                        foobah.MyHandler
                        </handler-name>
                        <soap-header>Qname</soap-header>
                        <!-- defines the qname of a soap header that will be processed
                            by the handler
                        -->

                        <!-- qname of soap header that will be proc.'d by handler -->
                        <soap-header></soap-header>

                        <!--
                            The soap-role element contains a SOAP actor definition that the
                            Handler will play as a role.
                        -->
                        <soap-role>a_string</soap-role>

                        <!-- jaxrpc only -->
                        <init-param id="x"></init-param>
                        <description>blah</description>
                        <param-name>a name</param-name>
                        </param-value>
                        a_value
                        </param-value>
                        </init-param>
                    </handler-class>
                </protocol-bindings>
            </protocol-bindings>
        </handler-chain>
    </handler-chains>


</service-ref>