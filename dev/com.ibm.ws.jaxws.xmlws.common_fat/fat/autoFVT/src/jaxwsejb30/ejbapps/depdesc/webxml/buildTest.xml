<?xml version="1.0"?>

<!--
    autoFVT/src/jaxwsejb30/ejbapps/depdesc/webxml/buildTest.xml, WAS.websvcs.fvt, WAS85.FVT, cf011231.01
    
    Change History:
    Date       UserId              Feature/Defect          Description
    ***************************************************************************
    01/28/2008 samerrel            LIDB4511.45.01          New File
    07/07/2008 samerrel            534715                  Fixed overeager clean target
    07/31/2008 samerrel            538865                  Fixed wsdl location problems
    08/26/2010 lizet               F1149.1-32025           update tests for java endorsed dir.
-->

<project default="buildall" basedir=".">
    <import file="../../../../xmls/common_imports.xml" />

    <!-- This property should match the package name of the test class.  The
         property is used in the targets.xml file when running any of the
         component-run* targets for running a single test case class.
    -->
    <property name="componentName"
              value="jaxwsejb30/ejbapps/depdesc/webxml/test" />

    <property name="subpath" value="jaxwsejb30/ejbapps/depdesc/webxml" />
    <property name="src.dir" value="${FVT.base.dir}/src/${subpath}" />
    <property name="work.dir" value="${FVT.build.work.dir}/${subpath}" />
    <property name="ear.name" value="jwsejb30-depdesc-webxml" />
    <property name="verbose.output" value="false" />

    <!-- EAR FILE NAMES -->
    <property name="ejbsvc.ear" value="${ear.name}-ejbservice" />
    <property name="warsvc.ear" value="${ear.name}-warservice" />
    <property name="warref.ear" value="${ear.name}-warrefchecker" />
    <!-- WORK DIR SHORTCUTS -->
    <property name="work.dir.ejbsvc" value="${work.dir}/ejbservice" />
    <property name="work.dir.warrefchecker" value="${work.dir}/warrefchecker" />
    <property name="work.dir.warsvc" value="${work.dir}/warservice" />
    <property name="work.dir.test" value="${work.dir}/test" />

    <!-- 
         This path id is used in the targets.xml file when running any of
         the component-run* targets.  This allows setting the classpath 
         for an individual test.
    -->
    <path id="componentClasspath">
        <path refid="thinclientclasspath" />
    </path>

    <!-- =================================
          target: init
         ================================= -->
    <target name="init"
            description="--> Creates initial directories needed for tests">
        <antcall target="component-init" />
        <mkdir dir="${work.dir}" />
        <mkdir dir="${work.dir.ejbsvc}" />
        <mkdir dir="${work.dir.warrefchecker}" />
        <mkdir dir="${work.dir.warsvc}" />
        <mkdir dir="${work.dir.test}" />
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean"
            description="--> clean any files, classes, or directories
                       so that a new copy of the test can be built and run">
        <delete dir="${FVT.build.classes.dir}/${subpath}" />
        <delete dir="${work.dir}" />
        <delete file="${FVT.build.installableApps.dir}/${ejbsvc.ear}.ear" />
        <delete file="${FVT.build.installableApps.dir}/${warref.ear}.ear" />
        <delete file="${FVT.build.installableApps.dir}/${warsvc.ear}.ear" />
        <delete file="${FVT.build.lib.dir}/${ejbsvc.ear}.jar" />
        <delete file="${FVT.build.lib.dir}/${warref.ear}.war" />
        <delete file="${FVT.build.lib.dir}/${warsvc.ear}.war" />
    </target>

    <!-- =================================
          target: buildall
         ================================= -->
    <target name="buildall"
            depends="clean, init, setenv, ejbservice, warservice, warrefchecker, test, preinstall" />

    <!-- ================================= 
          target: ejbservice              
         ================================= -->
    <target name="ejbservice"
            depends="setenv, compile_ejbservice, wsgen_ejbservice, pkg_ejbservice"
            description="--> Compiles, generates, and packages the ejbservice" />

    <!-- ================================= 
          target: compile_ejbservice              
         ================================= -->

    <target name="compile_ejbservice"
            depends="setenv"
            description="--> Compiles the server">
        <javac compiler="modern" srcdir="${src.dir}/ejbservice"
               destdir="${work.dir.ejbsvc}"
               deprecation="${deprecation}"
               verbose="${verbose.output}"
               debug="${debug}"
        	   source="${build.tests.with.java.level}"
        	   target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
            <classpath >
                <path refid="classpath"/>
            </classpath>
            <include name="**/*.java" />
        </javac>
    </target>

    <!-- ================================= 
          target: wsgen_ejbservice              
         ================================= -->
    <target name="wsgen_ejbservice"
            depends="setenv"
            description="--> Generates needed files for the JAX-WS service">
        <wsgen genwsdl="true"
               keep="true"
               verbose="${verbose.output}"
               destdir="${work.dir.ejbsvc}"
               resourcedestdir="${work.dir.ejbsvc}"
               sei="jaxwsejb30.ejbapps.depdesc.webxml.ejbservice.HelloRefSupplier">
            <classpath>
                <pathelement location="${work.dir.ejbsvc}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
    </target>

    <!-- ================================= 
          target: pkg_ejbservice              
         ================================= -->
    <target name="pkg_ejbservice"
            depends="setenv"
            description="--> Packages ejbservice in an ear file">

        <!-- Get the cells config info -->
        <readCellConfig prefix="server1"
                        key="defaultServer"
                        verbose="${verbose.output}" />

        <mkdir dir="${work.dir.ejbsvc}/wsdl" />

        <!-- Move the wsdl and xsd because I can't seem to get an inline replacement for the url -->
        <copy todir="${work.dir.ejbsvc}/wsdl">
            <fileset dir="${work.dir.ejbsvc}">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </fileset>
        </copy>

        <replace file="${work.dir.ejbsvc}/wsdl/HelloRefSupplierService.wsdl"
                 value="http://${server1.hostName}:${server1.WC_defaulthost}/${ejbsvc.ear}/HelloRefSupplierService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
        </replace>

        <jar jarfile="${FVT.build.lib.dir}/${ejbsvc.ear}.jar">
            <fileset dir="${work.dir.ejbsvc}">
                <include name="**/*class" />
                <include name="**/*java" />
            </fileset>
            <zipfileset dir="${src.dir}/ejbservice/etc/" prefix="META-INF/">
                <include name="ejb-jar.xml" />
            </zipfileset>
            <zipfileset dir="${work.dir.ejbsvc}/wsdl" prefix="META-INF/wsdl">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </zipfileset>
        </jar>

        <ear earfile="${FVT.build.installableApps.dir}/${ejbsvc.ear}.ear"
             appxml="${src.dir}/ejbservice/etc/application.xml">
            <fileset dir="${FVT.build.lib.dir}">
                <include name="${ejbsvc.ear}.jar" />
            </fileset>
        </ear>
    </target>

    <!-- =================================
          target: warrefchecker  
         ================================= -->
    <target name="warrefchecker"
            depends="setenv, wsimport_warrefchecker, compile_warrefchecker, wsgen_warrefchecker, pkg_warrefchecker"
            description="--> Compiles, wsgen, and packages warrefchecker" />

    <!-- =================================
          target: wsimport_ejbservice  
         ================================= -->
    <!-- need client artifacts from ejbservice for warrefchecker -->
    <target name="wsimport_warrefchecker"
            depends="setenv"
            description="--> Runs wsimport on warrefchecker">
        <wsimport keep="true"
                  verbose="${verbose.output}"
                  extension="true"
                  sourcedestdir="${work.dir.warrefchecker}"
                  destdir="${work.dir.warrefchecker}"
                  wsdl="${work.dir.ejbsvc}/wsdl/HelloRefSupplierService.wsdl"
                  wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/${ejbsvc.ear}/HelloRefSupplierService?wsdl">

        </wsimport>
        <wsimport keep="true"
                  verbose="${verbose.output}"
                  extension="true"
                  sourcedestdir="${work.dir.warrefchecker}"
                  destdir="${work.dir.warrefchecker}"
                  wsdl="${work.dir.warsvc}/wsdl/WarRefSupplierService.wsdl"
                  wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/${warsvc.ear}/WarRefSupplierService?wsdl">
        </wsimport>
    </target>

    <!-- ================================= 
          target: compile_warrefchecker              
         ================================= -->
    <target name="compile_warrefchecker"
            depends="setenv"
            description="--> Compiles warrefchecker">
        <javac compiler="modern" srcdir="${src.dir}/warrefchecker"
               destdir="${work.dir.warrefchecker}"
               deprecation="${deprecation}"
               verbose="${verbose.output}"
               debug="${debug}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
            <classpath>
                <path refid="classpath" />
                <pathelement location="${work.dir.warrefchecker}" />
            </classpath>
            <include name="**/*.java" />
        </javac>
    </target>

    <!-- ================================= 
          target: wsgen_warrefchecker              
         ================================= -->
    <target name="wsgen_warrefchecker"
            depends="setenv"
            description="--> Generates needed files for the JAX-WS service">
        <wsgen genwsdl="true"
               keep="true"
               verbose="${verbose.output}"
               destdir="${work.dir.warrefchecker}"
               resourcedestdir="${work.dir.warrefchecker}"
               sei="jaxwsejb30.ejbapps.depdesc.webxml.warrefchecker.WarRefChecker">
            <classpath>
                <pathelement location="${work.dir.warrefchecker}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
    </target>

    <!-- ================================= 
	      target: pkg_warrefchecker              
	     ================================= -->
    <target name="pkg_warrefchecker"
            depends="setenv"
            description="--> Packages the server into an ear file ready to deploy">

        <!-- Get the cells config info -->
        <readCellConfig prefix="server1"
                        key="defaultServer"
                        verbose="${verbose.output}" />

        <mkdir dir="${work.dir.warrefchecker}/wsdl" />

        <!-- Move the wsdl and xsd because I can't seem to get an inline replacement for the url -->
        <copy todir="${work.dir.warrefchecker}/wsdl">
            <fileset dir="${work.dir.warrefchecker}">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </fileset>
            <fileset dir="${work.dir.ejbsvc}/wsdl">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </fileset>
            <fileset dir="${work.dir.warsvc}/wsdl">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </fileset>
        </copy>

        <replace file="${work.dir.warrefchecker}/wsdl/WarRefCheckerService.wsdl"
                 value="http://${server1.hostName}:${server1.WC_defaulthost}/jwsejb30-depdesc-webxml-warrefchecker/WarRefCheckerService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
        </replace>

        <war destfile="${FVT.build.lib.dir}/${warref.ear}.war"
             webxml="${src.dir}/warrefchecker/etc/web.xml">
            <classes dir="${work.dir.warrefchecker}">
                <exclude name="**/*.wsdl" />
                <exclude name="**/*.xsd" />
                <exclude name="**/wsdl*" />
            </classes>
            <zipfileset dir="${work.dir.warrefchecker}/wsdl/"
                        prefix="WEB-INF/wsdl">
                <include name="*.xsd" />
                <include name="*.wsdl" />
            </zipfileset>
        </war>

        <ear earfile="${FVT.build.installableApps.dir}/${warref.ear}.ear"
             appxml="${src.dir}/warrefchecker/etc/application.xml">
            <fileset dir="${FVT.build.lib.dir}">
                <include name="${warref.ear}.war" />
            </fileset>
        </ear>
    </target>

    <!-- ================================= 
		  target: warservice              
		 ================================= -->
    <target name="warservice"
            depends="setenv, compile_warservice, wsgen_warservice, pkg_warservice"
            description="--> Compiles, generates, and packages the warservice" />


    <!-- ================================= 
          target: compile_warservice              
         ================================= -->
    <target name="compile_warservice"
            depends="setenv"
            description="--> Compiles the server">
        <javac compiler="modern" srcdir="${src.dir}/warservice"
               destdir="${work.dir.warsvc}"
               deprecation="${deprecation}"
               verbose="${verbose.output}"
               debug="${debug}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
            <classpath >
                <path refid="classpath"/>
            </classpath>
            <include name="**/*.java" />
        </javac>
    </target>

    <!-- =================================     
		  target: wsgen_warservice              
		 ================================= -->
    <target name="wsgen_warservice"
            depends="setenv"
            description="--> Generates needed files for the JAX-WS service">
        <wsgen genwsdl="true"
               keep="true"
               verbose="${verbose.output}"
               destdir="${work.dir.warsvc}"
               resourcedestdir="${work.dir.warsvc}"
               sei="jaxwsejb30.ejbapps.depdesc.webxml.warservice.WarRefSupplier">
            <classpath>
                <pathelement location="${work.dir.warsvc}" />
                <path refid="classpath" />
            </classpath>
        </wsgen>
    </target>

    <!-- ================================= 
		  target: pkg_warservice              
		 ================================= -->
    <target name="pkg_warservice"
            depends="setenv"
            description="--> Packages the server into an ear file ready to deploy">

        <!-- Get the cells config info -->
        <readCellConfig prefix="server1"
                        key="defaultServer"
                        verbose="${verbose.output}" />

        <mkdir dir="${work.dir.warsvc}/wsdl" />

        <!-- Move the wsdl and xsd because I can't seem to get an inline replacement for the url -->
        <copy todir="${work.dir.warsvc}/wsdl">
            <fileset dir="${work.dir.warsvc}">
                <include name="*.wsdl" />
                <include name="*.xsd" />
            </fileset>
        </copy>

        <replace file="${work.dir.warsvc}/wsdl/WarRefSupplierService.wsdl"
                 value="http://${server1.hostName}:${server1.WC_defaulthost}/${warsvc.ear}/WarRefSupplierService">
            <replacefilter token="REPLACE_WITH_ACTUAL_URL" />
        </replace>

        <war destfile="${FVT.build.lib.dir}/${warsvc.ear}.war"
             webxml="${src.dir}/warservice/etc/web.xml">
            <classes dir="${work.dir.warsvc}/">
                <exclude name="**/*.wsdl" />
                <exclude name="**/*.xsd" />
                <exclude name="**/wsdl*" />
            </classes>
            <zipfileset dir="${work.dir.warsvc}/wsdl/" prefix="WEB-INF/wsdl">
                <include name="*.xsd" />
                <include name="*.wsdl" />
            </zipfileset>
        </war>

        <ear earfile="${FVT.build.installableApps.dir}/${warsvc.ear}.ear"
             appxml="${src.dir}/warservice/etc/application.xml">
            <fileset dir="${FVT.build.lib.dir}">
                <include name="${warsvc.ear}.war" />
            </fileset>
        </ear>
    </target>

    <!-- ================================= 
          target: wsimport_test              
         ================================= -->
    <target name="wsimport_test"
            depends="setenv"
            description="--> Runs wsimport on services the test consumes">
        <wsimport keep="true"
                  verbose="${verbose.output}"
                  extension="true"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${work.dir.ejbsvc}/wsdl/HelloRefSupplierService.wsdl"
                  wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/${ejbsvc.ear}/HelloRefSupplierService?wsdl">
        </wsimport>
        <wsimport keep="true"
                  verbose="${verbose.output}"
                  extension="true"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${work.dir.warsvc}/wsdl/WarRefSupplierService.wsdl"
                  wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/${warsvc.ear}/WarRefSupplierService?wsdl">
        </wsimport>
        <wsimport keep="true"
                  verbose="${verbose.output}"
                  extension="true"
                  sourcedestdir="${FVT.build.classes.dir}"
                  destdir="${FVT.build.classes.dir}"
                  wsdl="${work.dir.warrefchecker}/wsdl/WarRefCheckerService.wsdl"
                  wsdllocation="http://${server1.hostName}:${server1.WC_defaulthost}/jwsejb30-depdesc-webxml-warrefchecker/WarRefCheckerService?wsdl">
        </wsimport>
    </target>

    <!-- ================================= 
	      target: test              
	     ================================= -->
    <target name="test"
            depends="setenv, wsimport_test"
            description="--> Compiles, imports, and packages test">
        <javac compiler="modern" srcdir="${src.dir}/test"
               destdir="${FVT.build.classes.dir}"
               deprecation="${deprecation}"
               verbose="${verbose.output}"
               debug="${debug}"
               source="${build.tests.with.java.level}"
               target="${build.tests.with.java.level}"
               failonerror="${failonerror}">
            <compilerarg line="-endorseddirs ${WAS.base.dir}/runtimes/endorsed"/>
            <classpath>
                <path refid="classpath" />
                <pathelement path="${work.dir.test}" />
            </classpath>
            <include name="**/*.java" />
        </javac>
    </target>

    <!-- ================================= 
		  target: preinstall              
		 ================================= -->
    <target name="preinstall"
            depends="setenv"
            description="--> performs ejbdeploy and endptenabler for the ear files">
        <!--<endpointenable earfile="${FVT.build.installableApps.dir}/${ejbsvc.ear}.ear" />
        <ejbdeploy inputEar="${FVT.build.installableApps.dir}/${ejbsvc.ear}.ear"
                   workDir="${FVT.build.work.dir}"
                   outputEar="${FVT.build.installableApps.dir}/${ejbsvc.ear}.temp.ear">
        </ejbdeploy>
        <move file="${FVT.build.installableApps.dir}/${ejbsvc.ear}.temp.ear"
              tofile="${FVT.build.installableApps.dir}/${ejbsvc.ear}.ear"
              overwrite="yes" />-->
    </target>

    <!-- ================================= 
          target: install              
         ================================= -->
    <target name="install"
            depends="setenv, preinstall"
            description="--> Installs the App">
        <ant antfile="${src.dir}/installTest.xml" dir="${src.dir}">
            <property name="install.mode" value="${rt.install.mode}" />
        </ant>
    </target>

    <!-- ================================= 
          target: uninstall              
         ================================= -->
    <target name="uninstall"
            depends="setenv"
            description="--> Uninstalls the App">
        <ant antfile="${src.dir}/uninstallTest.xml" dir="${src.dir}">
            <property name="uninstall.mode" value="${rt.uninstall.mode}" />
        </ant>
    </target>
</project>
